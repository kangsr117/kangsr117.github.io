import * as React from "react";
import { useEffect } from "react";
import { Frame, addPropertyControls, ControlType, RenderTarget } from "framer";
import { gtag } from "./gtag";
import { useScript } from "./useScript";

type Props = {
  trackingId?: string;
  screenName: string;
  appName: string;
  width?: number;
  height?: number;
  showInstructions: boolean;
};

const icon = (
  <svg
    style={{
      width: "100%",
      height: "100%",
      maxWidth: "50px",
      maxHeight: "50px"
    }}
    version="1.1"
    id="Layer_1"
    xmlnsXlink="http://www.w3.org/1999/xlink"
    x="0px"
    y="0px"
    viewBox="0 0 2195.9 2430.9"
    xmlSpace="preserve"
  >
    <path
      style={{ fill: "#F9AB00" }}
      d="M2195.9 2126.7c.9 166.9-133.7 302.8-300.5 303.7-12.4.1-24.9-.6-37.2-2.1-154.8-22.9-268.2-157.6-264.4-314V316.1c-3.7-156.6 110-291.3 264.9-314 165.7-19.4 315.8 99.2 335.2 264.9 1.4 12.2 2.1 24.4 2 36.7v1823z"
    />
    <path
      style={{ fill: "#E37400" }}
      d="M301.1 1828.7c166.3 0 301.1 134.8 301.1 301.1s-134.8 301.1-301.1 301.1S0 2296.1 0 2129.8s134.8-301.1 301.1-301.1zm792.2-912.5c-167.1 9.2-296.7 149.3-292.8 316.6v808.7c0 219.5 96.6 352.7 238.1 381.1 163.3 33.1 322.4-72.4 355.5-235.7 4.1-20 6.1-40.3 6-60.7v-907.4c.3-166.9-134.7-302.4-301.6-302.7-1.7 0-3.5 0-5.2.1z"
    />
  </svg>
);

const ComponentInstructions: React.SFC = ({ children }) => {
  return (
    <div
      style={{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexDirection: "column",
        width: "100%",
        height: "100%",
        fontSize: 16,
        fontWeight: 500,
        textAlign: "left",
        color: "#bb88ff",
        backgroundColor: "#2f2546",
        border: "1px solid #8855ff",
        padding: 32,
        overflow: "hidden"
      }}
    >
      {children}
    </div>
  );
};

const ComponentError: React.SFC<{ title: string; message: string }> = props => {
  return (
    <div
      style={{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        width: "100%",
        height: "100%",
        fontSize: 16,
        fontWeight: 500,
        minHeight: 300,
        minWidth: 460,
        textAlign: "left",
        color: "rgb(255, 0, 85)",
        backgroundColor: "rgb(242, 219, 224)",
        border: "1px solid rgb(246, 193, 204)",
        padding: 32
      }}
    >
      <h4>{props.title}</h4>
      <p>{props.message}</p>
    </div>
  );
};

export const GoogleAnalyticsEvent: React.SFC<Props> = (props: Props) => {
  const [loaded, error] = useScript(
    `https://www.googletagmanager.com/gtag/js?id=${props.trackingId}`
  );

  useEffect(() => {
    if (loaded && !error) {
      gtag("js", new Date());
      gtag("config", props.trackingId);
      gtag("event", "Framer X Screen View", {
        event_category: props.appName,
        event_label: props.screenName
      });
    }
  }, [loaded, error]);

  if (error) {
    return (
      <ComponentError
        title={"Error loading GA"}
        message={"We were unable to load the Google Analytics script."}
      />
    );
  }

  if (RenderTarget.current() === RenderTarget.thumbnail) {
    return icon;
  }

  if (RenderTarget.current() === RenderTarget.canvas) {
    if (!props.showInstructions) {
      return icon;
    }

    return (
      <ComponentInstructions>
        <h3>Instructions ðŸ”Ž </h3>
        <ol style={{ lineHeight: 2 }}>
          <li>
            <b>Analytics ID</b>: Enter your Google Analytics Tracking ID on the
            component's' properties section.
          </li>
          <li>
            <b>App Name</b>: enter the name of your prototype: e.g.
            "Registration Flow v5".
          </li>
          <li>
            <b>Screen Name</b>: enter the name of the screen you want to track
            e.g. "Registration Step 1"
          </li>
          <li>
            Drop this component on the screen you want to track. This component
            is invisible during Preview so feel free to resize.
          </li>
          <li>
            <b>Show Instructions</b>: You can hide these instructions and
            instead show a Google Analytics icon. This is just a visual change
            and has not effect on the behavior of this component.
          </li>
        </ol>
      </ComponentInstructions>
    );
  }
  return <Frame visible={false} />;
};

GoogleAnalyticsEvent.defaultProps = {
  width: 600,
  height: 600
};

addPropertyControls(GoogleAnalyticsEvent, {
  // Use UA-37076997-21 for testing
  trackingId: {
    type: ControlType.String,
    title: "Tracking ID",
    defaultValue: "UA-XXXXXXXX-XX"
  },
  appName: { type: ControlType.String, title: "App Name" },
  screenName: { type: ControlType.String, title: "Screen Name" },
  showInstructions: {
    type: ControlType.Boolean,
    title: "Show Instructions",
    defaultValue: true
  }
});
