import styled from '@emotion/styled';
import React, { cloneElement, ReactElement } from 'react';
import { colors } from '../../@tossteam/colors';
import { useInspectorContext } from '../../code/Inspector';
import { useComponentID } from '../hooks/useComponentID';
import { formatCode } from '../utils/formatCode';
import { formatReactNode } from '../utils/formatReactNode';

interface Props {
  name: string;
  summary?: { [key: string]: any };
  children: ReactElement;
}

export function InspectorComponent({ children, name, summary }: Props) {
  const componentID = useComponentID();
  const { inInspector, selectedComponent, selectComponent } = useInspectorContext();

  let formattedCode = '';
  try {
    const code = formatReactNode(children);
    formattedCode = formatCode(code);
  } catch (error) {
    formattedCode = error.toString();
  }

  if (!inInspector) {
    return null;
  }

  return (
    <GuideContainer
      className="tds-component__guide-container"
      selected={selectedComponent?.id === componentID}
      onClick={() => {
        selectComponent?.({
          name,
          id: componentID,
          summary,
          code: formattedCode,
        });
      }}
    >
      {/* Note(@joshuakimDwan)
        요약에 적혀 있어서 왜 필요한지 의문이라서 일단 주석 처리
       */}
      {/* <NameBadge className="tds-component__name-badge">{name}</NameBadge> */}
      {/* Note(@joshuakimDwan)
        Transition을 막기 위해 Inspector 내에선 클릭 이벤트가 발생하지 않도록 한다.
        관련 논의: https://tossteam.slack.com/archives/C01CTT5P048/p1604317723391000?thread_ts=1604315114.386000&cid=C01CTT5P048
        */}
      {cloneElement(children, {
        onClick: () => {},
      })}
    </GuideContainer>
  );
}

const GuideContainer = styled.div<{ selected: boolean }>`
  ${({ selected }) =>
    selected
      ? `
background-color: ${colors.green300}1B; // 1B는 opacity 처리를 위한 것
  `
      : ''}

  &:hover {
    /* 1B는 opacity 처리를 위한 것 */
    background-color: ${colors.green300}1B;
  }
`;

// const NameBadge = styled.span`
//   display: none;
//   position: absolute;
//   top: 4px;
//   left: 4px;
//   background-color: #aeefd5;
//   border-radius: 8px;
//   color: #008f64;
//   opacity: 0.9;
//   padding: 3px 5px 2px;

//   .framer-inspector--hide-badge & {
//     display: none;
//   }
// `;
