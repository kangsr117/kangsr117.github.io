import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { Props as TDSSwitchProps, Switch as TDSSwitch } from '../@tossteam/tds-web/react/components/Switch/Switch';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

type CheckedLabel = 'On' | 'Off';
type DisabledLabel = '아니오' | '네';

interface Props {
  checked: CheckedLabel;
  disabled: DisabledLabel;

  onToggle?: () => void;
  onToggleOn?: () => void;
  onToggleOff?: () => void;

  disableInspector?: boolean;
}

const checkedByControlLabel: {
  [key in CheckedLabel]: TDSSwitchProps['checked'];
} = {
  On: true,
  Off: false,
};

const disabledByControlLabel: {
  [key in DisabledLabel]: TDSSwitchProps['disabled'];
} = {
  아니오: false,
  네: true,
};

export function Switch(props: Props) {
  const {
    checked,
    disabled,
    onToggle,
    onToggleOn,
    onToggleOff,

    disableInspector,
  } = useFilteringEventHandlersInInspector(props);

  const [value, setValue] = React.useState(checkedByControlLabel[checked]);

  React.useEffect(() => {
    setValue(checkedByControlLabel[checked]);
  }, [checkedByControlLabel[checked]]);

  const handleChange = (_, newChecked) => {
    setValue(newChecked);
    onToggle?.();
    newChecked ? onToggleOn?.() : onToggleOff?.();
  };

  return (
    <TDSComponent
      name="Switch"
      disabled={disableInspector}
      summary={{
        checked: value,
        disabled: disabledByControlLabel[disabled],
      }}
    >
      <TDSSwitch checked={value} disabled={disabledByControlLabel[disabled]} onChange={handleChange} />
    </TDSComponent>
  );
}

addPropertyControls(Switch, {
  checked: {
    title: '토글',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: ['On', 'Off'],
    defaultValue: 'On',
  },
  disabled: {
    title: '비활성',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: ['아니오', '네'],
    defaultValue: '아니오',
  },
  onToggle: {
    type: ControlType.EventHandler,
  },
  onToggleOn: {
    type: ControlType.EventHandler,
  },
  onToggleOff: {
    type: ControlType.EventHandler,
  },
});

(Switch as any).defaultProps = {
  width: 50,
  height: 30,
};

Switch.displayName = makeComponentDisplayName('Switch', '스위치');
