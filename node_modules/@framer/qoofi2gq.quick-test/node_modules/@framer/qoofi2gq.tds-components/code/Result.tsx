import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { ComponentProps } from 'react';
import { Button as TDSButton } from '../@tossteam/tds-web/react/components/Button/Button';
import { default as TDSIcon } from '../@tossteam/tds-web/react/components/Icon/Icon';
import { default as TDSResult } from '../@tossteam/tds-web/react/components/Result/Result';
import Lottie from '../@tossteam/tds-web/react/storybook/Lottie';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import {
  styleByControlLabel,
  StyleLabel as ButtonStyleLabel,
  styleLabels as buttonStyleLabels,
  typeByControlLabel,
  TypeLabel as ButtonTypeLabel,
  typeLabels as buttonTypeLabels,
} from './Button';

const figureTypeLables = ['로띠', '아이콘', '없음'] as const;
const titleLabels = ['있음', '없음'] as const;
const descriptionLabels = ['있음', '없음'] as const;
const buttonLabels = ['있음', '없음'] as const;

type TDSResultProps = ComponentProps<typeof TDSResult>;
type FigureTypeLabel = typeof figureTypeLables[number];
type TitleLabel = typeof titleLabels[number];
type DescriptionLabel = typeof descriptionLabels[number];
type ButtonLabel = typeof buttonLabels[number];

interface Props {
  figureType: FigureTypeLabel;
  lottieURL: string;
  iconName: string;
  title: TitleLabel;
  titleText: string;
  description: DescriptionLabel;
  descriptionText: string;
  button: ButtonLabel;
  buttonText: string;
  buttonType: ButtonTypeLabel;
  buttonStyle: ButtonStyleLabel;

  onButtonClick?: () => void;
}

function getFigureComponent({ figureType, lottieURL, iconName }: Pick<Props, 'figureType' | 'lottieURL' | 'iconName'>) {
  switch (figureType) {
    case '로띠':
      return <Lottie url={lottieURL} loop={false} />;
    case '아이콘':
      return <TDSIcon name={iconName} />;
    default:
      return;
  }
}

export function Result(props: Props) {
  const {
    figureType,
    lottieURL,
    iconName,
    title,
    titleText,
    description,
    descriptionText,
    button,
    buttonText,
    buttonType,
    buttonStyle,

    onButtonClick,
  } = useFilteringEventHandlersInInspector(props);

  return (
    <TDSComponent
      name="Result"
      summary={{
        icon: figureType === '아이콘' ? iconName : undefined,
        lottie: figureType === '로띠' ? lottieURL : undefined,
        title: title === '있음' ? titleText : undefined,
        description: description === '있음' ? descriptionText : undefined,
        button:
          button === '있음'
            ? {
                type: typeByControlLabel[buttonType],
                style: styleByControlLabel[buttonStyle],
                size: 'medium',
                text: buttonText,
              }
            : undefined,
      }}
    >
      <TDSResult
        figure={getFigureComponent({ figureType, lottieURL, iconName })}
        title={title === '있음' ? titleText : undefined}
        description={description === '있음' ? descriptionText : undefined}
        button={
          button === '있음' ? (
            <TDSButton
              type={typeByControlLabel[buttonType]}
              style={styleByControlLabel[buttonStyle]}
              onClick={onButtonClick}
            >
              {buttonText}
            </TDSButton>
          ) : undefined
        }
      />
    </TDSComponent>
  );
}

addPropertyControls(Result, {
  figureType: {
    title: '🍎 상단 그래픽',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: figureTypeLables as any,
    defaultValue: '로띠',
  },
  lottieURL: {
    title: '↳ 로띠주소',
    type: ControlType.String,
    defaultValue: 'https://static.toss.im/lotties/spot/spot-empty-alt.json',
    hidden(props) {
      return props.figureType !== '로띠';
    },
  },
  iconName: {
    title: '↳ 아이콘 이름',
    type: ControlType.String,
    defaultValue: 'icn-info-line',
    hidden(props) {
      return props.figureType !== '아이콘';
    },
  },
  title: {
    title: '✏️ 타이틀',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: titleLabels as any,
    defaultValue: '있음',
  },
  titleText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    displayTextArea: true,
    defaultValue: '다시 접속해주세요',
    hidden(props) {
      return props.title === '없음';
    },
  },
  description: {
    title: '✏️ 설명',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: descriptionLabels as any,
    defaultValue: '있음',
  },
  descriptionText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    displayTextArea: true,
    defaultValue: '페이지를 불러올 수 없습니다\n다시 시도해주세요',
    hidden(props) {
      return props.description === '없음';
    },
  },
  button: {
    title: '🔵 버튼',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonLabels as any,
    defaultValue: '있음',
  },
  buttonText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '재시도',
    hidden(props) {
      return props.button === '없음';
    },
  },
  buttonType: {
    title: '↳ 색상',
    type: ControlType.Enum,
    options: buttonTypeLabels as any,
    defaultValue: '🔵 블루',
    hidden(props) {
      return props.button === '없음';
    },
  },
  buttonStyle: {
    title: '↳ 타입',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonStyleLabels as any,
    defaultValue: 'Fill',
    hidden(props) {
      return props.button === '없음';
    },
  },
  onButtonClick: {
    type: ControlType.EventHandler,
  },
});

(Result as any).defaultProps = {
  width: 375,
  height: 400,
};

Result.displayName = makeComponentDisplayName('Result', '빈화면');
