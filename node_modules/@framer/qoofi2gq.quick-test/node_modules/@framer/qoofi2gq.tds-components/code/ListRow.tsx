import { add, format } from 'date-fns';
import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { colors } from '../@tossteam/colors';
import { default as TDSIcon } from '../@tossteam/tds-web/react/components/Icon/Icon';
import { default as TDSListRow } from '../@tossteam/tds-web/react/components/ListRow/ListRow';
import { ListRowTextsProps } from '../@tossteam/tds-web/react/components/ListRow/ListRowTexts.types';
import { TDSComponent } from '../src/components/TDSComponent';
import { bankIconImageIDByBankName, bankNames } from '../src/constants/bankIcon';
import { cardImageNames, profileImageNames } from '../src/constants/iconNames';
import { timelineIconImageIDByName, timelineIconNames } from '../src/constants/timelineIcon';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { getIconImageURL } from '../src/utils/getIconImageURL';
import { getIlustImageURL } from '../src/utils/getIlustImageURL';
import { getTimelineIconImageURL } from '../src/utils/getTimelineIconImageURL';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import {
  Button,
  DisabledLabel as ButtonDisabledLabel,
  disabledLabels as buttonDisabledLables,
  StyleLabel as ButtonStyleLabel,
  styleLabels as buttonStyleLables,
  TypeLabel as ButtonTypeLabel,
  typeLabels as buttonTypeLabels,
} from './Button';
import { colors as canvasColors } from './canvas';
import { Checkbox } from './Checkbox';
import { Switch } from './Switch';

const leftTypeLabels = [
  '🗑 없음',
  '🔵 일반 아이콘',
  '🟢 은행 로고',
  '⚫️ 브랜드 로고',
  '💳 카드',
  '😀 프로필',
  '🖼 이미지',
  '📃 텍스트',
] as const;
const leftIconTypeLabels = ['일반', '배경형', '원형'] as const;

const countOfContentRowsLabels = ['1줄', '2줄', '3줄'] as const;
const contentRows1TypeLabels = ['일반', '세미볼드', '볼드'] as const;
const contentRows2TypeLabels = [
  '제목 + 설명',
  '숫자제목 + 설명',
  '제목 + 약한설명',
  '설명 + 제목',
  '설명 + 숫자제목',
  '약한설명 + 제목',
] as const;
const contentRows3TypeLabels = ['제목 + 설명두줄', '숫자제목 + 설명두줄'] as const;

const rightTypeLabels = ['🗑 없음', '📃 텍스트', '➡️ 화살표', '🖲 버튼', '🔵 아이콘', '✅ 체크', '💊 스위치'] as const;
const countOfRightTextRowsLabels = ['1줄', '2줄'] as const;
const rightTextRows1TypeLabels = [
  '설명 한줄 (레귤러)',
  '설명 한줄 (미디엄)',
  '작은 설명 한줄',
  '매우 작은 설명 한줄',
] as const;
const rightTextRows2TypeLabels = ['제목 + 설명', '제목 + 약한설명', '설명 + 제목', '약한설명 + 제목'] as const;

const textColorLabels = [
  '강조하는 경우',
  '일반적인 경우',
  '보조 텍스트',
  '안 읽어도 되는 경우',
  '블루',
  '레드',
] as const;

const paddingSizeLabels = ['매우좁음', '좁음', '일반', '큼'] as const;

type LeftTypeLabel = typeof leftTypeLabels[number];
type LeftIconTypeLabel = typeof leftIconTypeLabels[number];
type CountOfContentRowsLabel = typeof countOfContentRowsLabels[number];
type ContentRows1TypeLabel = typeof contentRows1TypeLabels[number];
type ContentRows2TypeLabel = typeof contentRows2TypeLabels[number];
type ContentRows3TypeLabel = typeof contentRows3TypeLabels[number];
type RightTypeLabel = typeof rightTypeLabels[number];
type CountOfRightTextRowsLabel = typeof countOfRightTextRowsLabels[number];
type RightTextRows1TypeLabel = typeof rightTextRows1TypeLabels[number];
type RightTextRows2TypeLabel = typeof rightTextRows2TypeLabels[number];
type TextColorLabel = typeof textColorLabels[number];
type PaddingSizeLabel = typeof paddingSizeLabels[number];

const leftIconTypes: LeftTypeLabel[] = ['🔵 일반 아이콘', '🟢 은행 로고', '⚫️ 브랜드 로고'];

const leftIconComponentByLeftIconType: Record<LeftIconTypeLabel, JSX.Element> = {
  일반: <TDSListRow.Icon name="" />,
  배경형: <TDSListRow.Icon type="background" name="" />,
  원형: <TDSListRow.Image type="circle" src="" />,
};

const leftIconComponentSummaryByLeftIconType: Record<LeftIconTypeLabel, string> = {
  일반: 'icon',
  배경형: 'icon background',
  원형: 'image circle',
};

const contentsComponentTypeByControlLabel: {
  [key in CountOfContentRowsLabel]: {
    [key in ContentRows1TypeLabel | ContentRows2TypeLabel | ContentRows3TypeLabel]?: ListRowTextsProps['type'];
  };
} = {
  '1줄': {
    일반: '1RowTypeA',
    세미볼드: '1RowTypeB',
    볼드: '1RowTypeC',
  },
  '2줄': {
    '제목 + 설명': '2RowTypeA',
    '숫자제목 + 설명': '2RowTypeB',
    '제목 + 약한설명': '2RowTypeC',
    '설명 + 제목': '2RowTypeD',
    '설명 + 숫자제목': '2RowTypeE',
    '약한설명 + 제목': '2RowTypeF',
  },
  '3줄': {
    '제목 + 설명두줄': '3RowTypeA',
    '숫자제목 + 설명두줄': '3RowTypeB',
  },
};

const rightTextComponentByControlLabel: {
  [key in CountOfRightTextRowsLabel]: {
    [key in RightTextRows1TypeLabel | RightTextRows2TypeLabel]?: ListRowTextsProps['type'];
  };
} = {
  '1줄': {
    '설명 한줄 (레귤러)': 'Right1RowTypeA',
    '설명 한줄 (미디엄)': 'Right1RowTypeB',
    '작은 설명 한줄': 'Right1RowTypeC',
    '매우 작은 설명 한줄': 'Right1RowTypeD',
  },
  '2줄': {
    '제목 + 설명': 'Right2RowTypeA',
    '제목 + 약한설명': 'Right2RowTypeB',
    '설명 + 제목': 'Right2RowTypeC',
    '약한설명 + 제목': 'Right2RowTypeD',
  },
};

const textColorByControlLabel: Record<TextColorLabel, string> = {
  '강조하는 경우': colors.grey800,
  '일반적인 경우': colors.grey700,
  '보조 텍스트': colors.grey600,
  '안 읽어도 되는 경우': colors.grey500,
  블루: colors.blue500,
  레드: colors.red500,
};

const paddingByControlLabel: Record<PaddingSizeLabel, number> = {
  매우좁음: 8,
  좁음: 16,
  일반: 24,
  큼: 32,
};

interface Props {
  leftType: LeftTypeLabel;

  leftIconType: LeftIconTypeLabel;
  leftIconName: string;
  leftIconColor: string;

  leftBankIconTypeNormal: boolean;
  leftBankIconImageRandom: boolean;
  leftBankIconBankNameIndex: number;
  leftBankIconBankName: string;

  leftLogoIconTypeNormal: boolean;
  leftLogoIconImageRandom: boolean;
  leftLogoIconNameIndex: number;
  leftLogoIconName: string;

  leftIconAlignCenter: boolean;

  leftCardTypeNormal: boolean;
  leftCardImageIndex: number;
  leftCardName: string;
  leftCardSizeNormal: boolean;

  leftProfileImageIndex: number;

  leftImageShapeSqure: boolean;
  leftImageURL: string;

  leftTextTypeDate: boolean;
  leftDateIndex: number;
  leftText: string;
  leftTextColor: string;
  leftTextAlignCenter: boolean;

  countOfContentRows: CountOfContentRowsLabel;
  contentRows1Type: ContentRows1TypeLabel;
  contentRows2Type: ContentRows2TypeLabel;
  contentRows3Type: ContentRows3TypeLabel;
  text: string;
  textColor: string;
  topText: string;
  topTextColor: string;
  middleText: string;
  middleTextColor: string;
  bottomText: string;
  bottomTextColor: string;
  rightType: RightTypeLabel;
  countOfRightTextRows: CountOfRightTextRowsLabel;
  rightTextRows1Type: RightTextRows1TypeLabel;
  rightTextRows2Type: RightTextRows2TypeLabel;
  rightText: string;
  rightTextColor: TextColorLabel;
  rightTopText: string;
  rightTopTextColor: TextColorLabel;
  rightBottomText: string;
  rightBottomTextColor: TextColorLabel;
  rightTextWithoutArrow: boolean;

  rightButtonText: string;
  rightButtonSizeSmall: boolean;
  rightButtonStyle: ButtonStyleLabel;
  rightButtonType: ButtonTypeLabel;
  rightButtonDisabled: ButtonDisabledLabel;
  onRightButtonClick?: () => void;

  rightIconName: string;

  rightCheckboxTypeCircle: boolean;
  rightCheckboxChecked: boolean;
  rightCheckboxEnabled: boolean;
  onRightCheckChange?: () => void;

  rightSwitchChecked: boolean;
  rightSwitchEnabled: boolean;
  onRightSwitchChange?: () => void;

  paddingSize: PaddingSizeLabel;

  onListClick?: () => void;
}

function getLeftComponent({
  leftType,

  leftIconType,
  leftIconName,
  leftIconColor,

  leftBankIconTypeNormal,
  leftBankIconImageRandom,
  leftBankIconBankNameIndex,
  leftBankIconBankName,

  leftLogoIconTypeNormal,
  leftLogoIconImageRandom,
  leftLogoIconNameIndex,
  leftLogoIconName,

  leftCardTypeNormal,
  leftCardImageIndex,
  leftCardName,
  leftCardSizeNormal,

  leftProfileImageIndex,

  leftImageShapeSqure,
  leftImageURL,

  leftTextTypeDate,
  leftDateIndex,
  leftText,
  leftTextColor,
}: Props) {
  switch (leftType) {
    case '🗑 없음':
      return null;
    case '🔵 일반 아이콘':
      return React.cloneElement(leftIconComponentByLeftIconType[leftIconType], {
        name: leftIconName,
        src: getIconImageURL(leftIconName),
        color: leftIconType === '일반' && leftIconName.endsWith('line') ? leftIconColor : undefined,
      });
    case '🟢 은행 로고':
      const bankName = leftBankIconImageRandom ? bankNames[leftBankIconBankNameIndex - 1] : leftBankIconBankName;
      const iconName = `bank-${leftBankIconTypeNormal ? '' : 'fill-'}${bankIconImageIDByBankName[bankName]}`;
      return React.cloneElement(leftIconComponentByLeftIconType[leftBankIconTypeNormal ? '일반' : '원형'], {
        name: iconName,
        src: getIconImageURL(iconName),
      });
    case '⚫️ 브랜드 로고':
      const timelineIconName = leftLogoIconImageRandom
        ? timelineIconNames[leftLogoIconNameIndex - 1]
        : leftLogoIconName;
      return (
        <TDSListRow.Image
          type={leftLogoIconTypeNormal ? 'default' : 'circle'}
          src={getTimelineIconImageURL(timelineIconImageIDByName[timelineIconName], !leftLogoIconTypeNormal)}
        />
      );
    case '💳 카드':
      return (
        <TDSListRow.Image
          type={leftCardSizeNormal ? 'rectangle' : 'rectangle-small'}
          src={
            leftCardTypeNormal
              ? getIlustImageURL(cardImageNames[leftCardImageIndex - 1])
              : getIconImageURL(leftCardName)
          }
        />
      );
    case '😀 프로필':
      return <TDSListRow.Image type="circle" src={getIlustImageURL(profileImageNames[leftProfileImageIndex - 1])} />;
    case '🖼 이미지':
      return <TDSListRow.Image type={leftImageShapeSqure ? 'square' : 'circle'} src={leftImageURL} />;
    case '📃 텍스트':
      return (
        <TDSListRow.LeftText color={leftTextTypeDate ? undefined : leftTextColor}>
          {leftTextTypeDate ? format(add(new Date(2020, 0, 1), { days: leftDateIndex - 1 }), 'M.d') : leftText}
        </TDSListRow.LeftText>
      );
    default:
      return null;
  }
}

function getLeftComponentSummary({
  leftType,

  leftIconType,
  leftIconName,
  leftIconColor,

  leftBankIconTypeNormal,
  leftBankIconImageRandom,
  leftBankIconBankNameIndex,
  leftBankIconBankName,

  leftLogoIconTypeNormal,
  leftLogoIconImageRandom,
  leftLogoIconNameIndex,
  leftLogoIconName,

  leftCardTypeNormal,
  leftCardImageIndex,
  leftCardName,
  leftCardSizeNormal,

  leftProfileImageIndex,

  leftImageShapeSqure,
  leftImageURL,

  leftTextTypeDate,
  leftDateIndex,
  leftText,
  leftTextColor,
}: Props) {
  switch (leftType) {
    case '🔵 일반 아이콘':
      return {
        type: leftIconComponentSummaryByLeftIconType[leftIconType],
        iconName: leftIconName,
        leftIconColor: leftIconColor.endsWith('-line') ? leftIconColor : undefined,
      };
    case '🟢 은행 로고':
      const bankName = leftBankIconImageRandom ? bankNames[leftBankIconBankNameIndex - 1] : leftBankIconBankName;
      const iconName = `bank-${leftBankIconTypeNormal ? '' : 'fill-'}${bankIconImageIDByBankName[bankName]}`;
      return {
        type: leftIconComponentSummaryByLeftIconType[leftBankIconTypeNormal ? '일반' : '원형'],
        iconName: leftBankIconTypeNormal ? iconName : undefined,
        src: !leftBankIconTypeNormal ? getIconImageURL(iconName) : undefined,
      };
    case '⚫️ 브랜드 로고':
      return {
        type: leftLogoIconTypeNormal ? 'image default' : 'image circle',
        src: leftLogoIconImageRandom ? timelineIconNames[leftLogoIconNameIndex - 1] : leftLogoIconName,
      };
    case '💳 카드':
      return {
        type: leftCardSizeNormal ? 'image rectangle' : 'image rectangle small',
        src: leftCardTypeNormal
          ? getIlustImageURL(cardImageNames[leftCardImageIndex - 1])
          : getIconImageURL(leftCardName),
      };
    case '😀 프로필':
      return {
        type: 'image circle',
        src: getIlustImageURL(profileImageNames[leftProfileImageIndex - 1]),
      };
    case '🖼 이미지':
      return {
        type: leftImageShapeSqure ? 'image square' : 'image circle',
        src: leftImageURL,
      };
    case '📃 텍스트':
      return {
        type: 'text',
        text: leftTextTypeDate ? format(add(new Date(2020, 0, 1), { days: leftDateIndex - 1 }), 'M.d') : leftText,
        textColor: leftTextColor,
      };
    default:
      return {};
  }
}

function getContentsComponent({
  countOfContentRows,
  contentRows1Type,
  contentRows2Type,
  contentRows3Type,
  text,
  textColor,
  topText,
  topTextColor,
  middleText,
  middleTextColor,
  bottomText,
  bottomTextColor,
}: Props) {
  const contentsComponentTypeByRowType = contentsComponentTypeByControlLabel[countOfContentRows];
  const contentsComponentType =
    countOfContentRows === '1줄'
      ? contentsComponentTypeByRowType[contentRows1Type]
      : countOfContentRows === '2줄'
      ? contentsComponentTypeByRowType[contentRows2Type]
      : contentsComponentTypeByRowType[contentRows3Type];
  return (
    <TDSListRow.Texts
      type={contentsComponentType}
      top={countOfContentRows === '1줄' ? text : topText}
      topProps={{
        color: textColorByControlLabel[countOfContentRows === '1줄' ? textColor : topTextColor],
      }}
      middle={middleText}
      middleProps={{
        color: textColorByControlLabel[middleTextColor],
      }}
      bottom={bottomText}
      bottomProps={{
        color: textColorByControlLabel[bottomTextColor],
      }}
    />
  );
}

function getContentsComponentSummary({
  countOfContentRows,
  contentRows1Type,
  contentRows2Type,
  contentRows3Type,
  text,
  textColor,
  topText,
  topTextColor,
  middleText,
  middleTextColor,
  bottomText,
  bottomTextColor,
}: Props) {
  const contentsComponentTypeByRowType = contentsComponentTypeByControlLabel[countOfContentRows];
  const contentsComponentType =
    countOfContentRows === '1줄'
      ? contentsComponentTypeByRowType[contentRows1Type]
      : countOfContentRows === '2줄'
      ? contentsComponentTypeByRowType[contentRows2Type]
      : contentsComponentTypeByRowType[contentRows3Type];

  return {
    type: contentsComponentType,
    row1Text: countOfContentRows === '1줄' ? text : topText,
    row1TextColor: textColorByControlLabel[countOfContentRows === '1줄' ? textColor : topTextColor],
    row2Text: countOfContentRows === '1줄' ? undefined : countOfContentRows === '2줄' ? bottomText : middleText,
    row2TextColor:
      countOfContentRows === '1줄'
        ? undefined
        : countOfContentRows === '2줄'
        ? textColorByControlLabel[bottomTextColor]
        : textColorByControlLabel[middleTextColor],
    row3Text: countOfContentRows === '3줄' ? bottomText : undefined,
    row3TextColor: countOfContentRows === '3줄' ? textColorByControlLabel[bottomTextColor] : undefined,
  };
}

function getRightComponent({
  rightType,
  countOfRightTextRows,
  rightTextRows1Type,
  rightTextRows2Type,
  rightText,
  rightTextColor,
  rightTopText,
  rightTopTextColor,
  rightBottomText,
  rightBottomTextColor,

  rightButtonText,
  rightButtonSizeSmall,
  rightButtonStyle,
  rightButtonType,
  rightButtonDisabled,
  onRightButtonClick,

  rightIconName,

  rightCheckboxTypeCircle,
  rightCheckboxChecked,
  rightCheckboxEnabled,
  onRightCheckChange,

  rightSwitchChecked,
  rightSwitchEnabled,
  onRightSwitchChange,
}: Props) {
  switch (rightType) {
    case '📃 텍스트':
      const rightComponentTypeByRowType = rightTextComponentByControlLabel[countOfRightTextRows];
      const rightComponentType =
        rightComponentTypeByRowType[countOfRightTextRows === '1줄' ? rightTextRows1Type : rightTextRows2Type];
      return (
        <TDSListRow.Texts
          type={rightComponentType}
          top={countOfRightTextRows === '1줄' ? rightText : rightTopText}
          topProps={{
            color: textColorByControlLabel[countOfRightTextRows === '1줄' ? rightTextColor : rightTopTextColor],
          }}
          middle=""
          bottom={rightBottomText}
          bottomProps={{ color: textColorByControlLabel[rightBottomTextColor] }}
        />
      );
    case '🖲 버튼':
      return (
        <Button
          text={rightButtonText}
          size={rightButtonSizeSmall ? 'Tiny' : 'Medium'}
          style={rightButtonStyle}
          type={rightButtonType}
          disabled={rightButtonDisabled}
          onClick={onRightButtonClick}
          disableInspector
        />
      );
    case '🔵 아이콘':
      return <TDSIcon name={rightIconName} />;
    case '✅ 체크':
      return (
        <Checkbox
          checked={rightCheckboxChecked ? 'On' : 'Off'}
          type={rightCheckboxTypeCircle ? '큰체크' : '체크'}
          disabled={rightCheckboxEnabled ? '아니오' : '네'}
          onToggle={onRightCheckChange}
          disableInspector
        />
      );
    case '💊 스위치':
      return (
        <Switch
          checked={rightSwitchChecked ? 'On' : 'Off'}
          disabled={rightSwitchEnabled ? '아니오' : '네'}
          onToggle={onRightSwitchChange}
          disableInspector
        />
      );
    default:
      return null;
  }
}

function getRightComponentSummary({
  rightType,
  countOfRightTextRows,
  rightTextRows1Type,
  rightTextRows2Type,
  rightText,
  rightTextColor,
  rightTopText,
  rightTopTextColor,
  rightBottomText,
  rightBottomTextColor,

  rightButtonText,
  rightButtonSizeSmall,
  rightButtonStyle,
  rightButtonType,
  rightButtonDisabled,

  rightIconName,

  rightCheckboxTypeCircle,
  rightCheckboxChecked,
  rightCheckboxEnabled,

  rightSwitchChecked,
  rightSwitchEnabled,

  rightTextWithoutArrow,
}: Props) {
  switch (rightType) {
    case '📃 텍스트':
      const rightComponentByType = rightTextComponentByControlLabel[countOfRightTextRows];
      const rightComponentType =
        rightComponentByType[countOfRightTextRows === '1줄' ? rightTextRows1Type : rightTextRows2Type];
      return {
        type: rightComponentType,
        row1Text: countOfRightTextRows === '1줄' ? rightText : rightTopText,
        row1TextColor: textColorByControlLabel[countOfRightTextRows === '1줄' ? rightTextColor : rightTopTextColor],
        row2Text: countOfRightTextRows === '2줄' ? rightBottomText : undefined,
        row2TextColor: countOfRightTextRows === '2줄' ? textColorByControlLabel[rightBottomTextColor] : undefined,
        withArrow: !rightTextWithoutArrow ? true : undefined,
      };
    case '🖲 버튼':
      return {
        rightType: 'button',
        text: rightButtonText,
        size: rightButtonSizeSmall ? 'Tiny' : 'Medium',
        style: rightButtonStyle,
        type: rightButtonType,
        disabled: rightButtonDisabled,
      };
    case '🔵 아이콘':
      return {
        rightType: 'icon',
        iconName: rightIconName,
      };
    case '✅ 체크':
      return {
        rightType: 'checkbox',
        checked: rightCheckboxChecked,
        type: rightCheckboxTypeCircle ? 'checkbox-circle-big-primary' : 'checkbox-primary',
        disabled: !rightCheckboxEnabled,
      };
    case '💊 스위치':
      return {
        rightType: 'switch',
        checked: rightSwitchChecked,
        disabled: !rightSwitchEnabled,
      };
    default:
      return null;
  }
}

export function ListRow(originalProps: Props) {
  const props = useFilteringEventHandlersInInspector(originalProps);
  return (
    <TDSComponent
      name="ListRow"
      summary={{
        left: getLeftComponentSummary(props),
        content: getContentsComponentSummary(props),
        right: getRightComponentSummary(props),
        padding: paddingByControlLabel[props.paddingSize],
      }}
    >
      <TDSListRow
        left={getLeftComponent(props)}
        leftAlignment={
          (leftIconTypes.includes(props.leftType) && !props.leftIconAlignCenter) ||
          (props.leftType === '📃 텍스트' && !props.leftTextAlignCenter)
            ? 'top'
            : 'center'
        }
        contents={getContentsComponent(props)}
        right={getRightComponent(props)}
        withArrow={(props.rightType === '📃 텍스트' && !props.rightTextWithoutArrow) || props.rightType === '➡️ 화살표'}
        style={{
          padding: `${paddingByControlLabel[props.paddingSize]}px 24px`,
        }}
        onClick={props.onListClick}
      />
    </TDSComponent>
  );
}

addPropertyControls(ListRow, {
  leftType: {
    title: '👈 왼쪽',
    type: ControlType.Enum,
    options: leftTypeLabels as any,
    defaultValue: leftTypeLabels[0],
  },

  leftIconType: {
    title: '↳ 종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: leftIconTypeLabels as any,
    defaultValue: leftIconTypeLabels[0],
    hidden(props) {
      return props.leftType !== '🔵 일반 아이콘';
    },
  },
  leftIconName: {
    title: '↳ 아이콘 이름',
    type: ControlType.String,
    defaultValue: 'icn-heart-color',
    hidden(props) {
      return props.leftType !== '🔵 일반 아이콘';
    },
  },
  leftIconColor: {
    title: '컬러',
    type: ControlType.Color,
    defaultValue: canvasColors['Grey600 - 가벼운 텍스트, 그레이 아이콘'],
    hidden(props) {
      return (
        props.leftType !== '🔵 일반 아이콘' || props.leftIconType !== '일반' || !props.leftIconName.endsWith('line')
      );
    },
  },

  leftBankIconTypeNormal: {
    title: '↳ 종류',
    type: ControlType.Boolean,
    enabledTitle: '일반',
    disabledTitle: '원형',
    defaultValue: true,
    hidden(props) {
      return props.leftType !== '🟢 은행 로고';
    },
  },
  leftBankIconImageRandom: {
    title: '↳ 이미지',
    type: ControlType.Boolean,
    enabledTitle: '랜덤',
    disabledTitle: '선택',
    defaultValue: true,
    hidden(props) {
      return props.leftType !== '🟢 은행 로고';
    },
  },
  leftBankIconBankNameIndex: {
    title: '↳ 랜덤',
    type: ControlType.Number,
    min: 1,
    max: bankNames.length,
    defaultValue: Math.floor(bankNames.length / 2),
    hidden(props) {
      return props.leftType !== '🟢 은행 로고' || !props.leftBankIconImageRandom;
    },
  },
  leftBankIconBankName: {
    title: '↳ 은행',
    type: ControlType.Enum,
    options: bankNames as any,
    defaultValue: bankNames[0],
    hidden(props) {
      return props.leftType !== '🟢 은행 로고' || props.leftBankIconImageRandom;
    },
  },

  leftLogoIconTypeNormal: {
    title: '↳ 종류',
    type: ControlType.Boolean,
    enabledTitle: '일반',
    disabledTitle: '원형',
    defaultValue: true,
    hidden(props) {
      return props.leftType !== '⚫️ 브랜드 로고';
    },
  },
  leftLogoIconImageRandom: {
    title: '↳ 이미지',
    type: ControlType.Boolean,
    enabledTitle: '랜덤',
    disabledTitle: '선택',
    defaultValue: true,
    hidden(props) {
      return props.leftType !== '⚫️ 브랜드 로고';
    },
  },
  leftLogoIconNameIndex: {
    title: '↳ 랜덤',
    type: ControlType.Number,
    min: 1,
    max: timelineIconNames.length,
    defaultValue: Math.floor(timelineIconNames.length / 2),
    hidden(props) {
      return props.leftType !== '⚫️ 브랜드 로고' || !props.leftLogoIconImageRandom;
    },
  },
  leftLogoIconName: {
    title: '↳ 브랜드',
    type: ControlType.Enum,
    options: timelineIconNames as any,
    defaultValue: timelineIconNames[0],
    hidden(props) {
      return props.leftType !== '⚫️ 브랜드 로고' || props.leftLogoIconImageRandom;
    },
  },

  leftIconAlignCenter: {
    title: '↳ 정렬',
    type: ControlType.Boolean,
    enabledTitle: '중앙정렬',
    disabledTitle: '상단정렬',
    defaultValue: true,
    hidden(props) {
      return !leftIconTypes.includes(props.leftType);
    },
  },

  leftCardTypeNormal: {
    title: '↳ 카드 종류',
    type: ControlType.Boolean,
    enabledTitle: '일반형',
    disabledTitle: '로고형',
    defaultValue: true,
    hidden(props) {
      return props.leftType !== '💳 카드';
    },
  },
  leftCardImageIndex: {
    title: '↳ 이미지',
    type: ControlType.Number,
    min: 1,
    max: cardImageNames.length,
    defaultValue: Math.floor(cardImageNames.length / 2),
    hidden(props) {
      return props.leftType !== '💳 카드' || !props.leftCardTypeNormal;
    },
  },
  leftCardName: {
    title: '↳ 카드 이름',
    type: ControlType.String,
    defaultValue: 'icn-bank-square-toss',
    hidden(props) {
      return props.leftType !== '💳 카드' || props.leftCardTypeNormal;
    },
  },
  leftCardSizeNormal: {
    title: '↳ 카드 크기',
    type: ControlType.Boolean,
    enabledTitle: '일반',
    disabledTitle: '작음',
    defaultValue: true,
    hidden(props) {
      return props.leftType !== '💳 카드';
    },
  },

  leftProfileImageIndex: {
    title: '↳ 이미지',
    type: ControlType.Number,
    min: 1,
    max: profileImageNames.length,
    defaultValue: Math.floor(profileImageNames.length / 2),
    hidden(props) {
      return props.leftType !== '😀 프로필';
    },
  },

  leftImageShapeSqure: {
    title: '↳ 모양',
    type: ControlType.Boolean,
    enabledTitle: '⬜️',
    disabledTitle: '◯',
    defaultValue: true,
    hidden(props) {
      return props.leftType !== '🖼 이미지';
    },
  },

  leftImageURL: {
    title: '↳ URL',
    type: ControlType.String,
    defaultValue: 'https://static.toss.im/illusts/img-securities_163.png',
    hidden(props) {
      return props.leftType !== '🖼 이미지';
    },
  },

  leftTextTypeDate: {
    title: '↳ 종류',
    type: ControlType.Boolean,
    enabledTitle: '날짜',
    disabledTitle: '직접입력',
    defaultValue: true,
    hidden(props) {
      return props.leftType !== '📃 텍스트';
    },
  },
  leftDateIndex: {
    title: '↳ 날짜',
    type: ControlType.Number,
    min: 1,
    max: 366,
    defaultValue: 183,
    hidden(props) {
      return props.leftType !== '📃 텍스트' || !props.leftTextTypeDate;
    },
  },
  leftText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '1',
    hidden(props) {
      return props.leftType !== '📃 텍스트' || props.leftTextTypeDate;
    },
  },
  leftTextColor: {
    title: '↳ 컬러',
    type: ControlType.Color,
    defaultValue: canvasColors.Blue500,
    hidden(props) {
      return props.leftType !== '📃 텍스트' || props.leftTextTypeDate;
    },
  },
  leftTextAlignCenter: {
    title: '↳ 정렬',
    type: ControlType.Boolean,
    enabledTitle: '중앙정렬',
    disabledTitle: '상단정렬',
    defaultValue: false,
    hidden(props) {
      return props.leftType !== '📃 텍스트';
    },
  },

  countOfContentRows: {
    title: '✍️ 컨텐츠',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: countOfContentRowsLabels as any,
    defaultValue: countOfContentRowsLabels[0],
  },
  contentRows1Type: {
    title: '↳ 종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: contentRows1TypeLabels as any,
    defaultValue: contentRows1TypeLabels[0],
    hidden(props) {
      return props.countOfContentRows !== '1줄';
    },
  },
  contentRows2Type: {
    title: '↳ 종류',
    type: ControlType.Enum,
    options: contentRows2TypeLabels as any,
    defaultValue: '제목 + 설명',
    hidden(props) {
      return props.countOfContentRows !== '2줄';
    },
  },
  contentRows3Type: {
    title: '↳ 종류',
    type: ControlType.Enum,
    options: contentRows3TypeLabels as any,
    defaultValue: '제목 + 설명두줄',
    hidden(props) {
      return props.countOfContentRows !== '3줄';
    },
  },
  text: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '동해물과 백두산이',
    hidden(props) {
      return props.countOfContentRows !== '1줄';
    },
  },
  textColor: {
    title: '　 ↳ 색상',
    type: ControlType.Enum,
    options: textColorLabels as any,
    defaultValue: textColorLabels[1],
    hidden(props) {
      return props.countOfContentRows !== '1줄';
    },
  },
  topText: {
    title: '↳ 위쪽',
    type: ControlType.String,
    defaultValue: '동해물과 백두산이',
    hidden(props) {
      return props.countOfContentRows === '1줄';
    },
  },
  topTextColor: {
    title: '　↳ 색상',
    type: ControlType.Enum,
    options: textColorLabels as any,
    defaultValue: textColorLabels[1],
    hidden(props) {
      return props.countOfContentRows === '1줄';
    },
  },
  middleText: {
    title: '↳ 가운데',
    type: ControlType.String,
    defaultValue: '마르고',
    hidden(props) {
      return props.countOfContentRows !== '3줄';
    },
  },
  middleTextColor: {
    title: '　 ↳ 색상',
    type: ControlType.Enum,
    options: textColorLabels as any,
    defaultValue: textColorLabels[2],
    hidden(props) {
      return props.countOfContentRows !== '3줄';
    },
  },
  bottomText: {
    title: '↳ 아래쪽',
    type: ControlType.String,
    defaultValue: '닳도록 하느님이',
    hidden(props) {
      return props.countOfContentRows === '1줄';
    },
  },
  bottomTextColor: {
    title: '　 ↳ 색상',
    type: ControlType.Enum,
    options: textColorLabels as any,
    defaultValue: textColorLabels[2],
    hidden(props) {
      return props.countOfContentRows === '1줄';
    },
  },
  rightType: {
    title: '👉 오른쪽',
    type: ControlType.Enum,
    options: rightTypeLabels as any,
    defaultValue: '없음',
  },
  countOfRightTextRows: {
    title: '✍️ 컨텐츠',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: countOfRightTextRowsLabels as any,
    defaultValue: '1줄',
    hidden(props) {
      return props.rightType !== '📃 텍스트';
    },
  },
  rightTextRows1Type: {
    title: '↳ 종류',
    type: ControlType.Enum,
    options: rightTextRows1TypeLabels as any,
    defaultValue: '레귤러',
    hidden(props) {
      return props.rightType !== '📃 텍스트' || props.countOfRightTextRows !== '1줄';
    },
  },
  rightTextRows2Type: {
    title: '↳ 종류',
    type: ControlType.Enum,
    options: rightTextRows2TypeLabels as any,
    defaultValue: '제목 + 설명',
    hidden(props) {
      return props.rightType !== '📃 텍스트' || props.countOfRightTextRows !== '2줄';
    },
  },
  rightText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '동해물과 백두산이',
    hidden(props) {
      return props.rightType !== '📃 텍스트' || props.countOfRightTextRows !== '1줄';
    },
  },
  rightTextColor: {
    title: '　 ↳ 색상',
    type: ControlType.Enum,
    options: textColorLabels as any,
    defaultValue: textColorLabels[2],
    hidden(props) {
      return props.rightType !== '📃 텍스트' || props.countOfRightTextRows !== '1줄';
    },
  },
  rightTopText: {
    title: '↳ 위쪽',
    type: ControlType.String,
    defaultValue: '동해물과 백두산이',
    hidden(props) {
      return props.rightType !== '📃 텍스트' || props.countOfRightTextRows === '1줄';
    },
  },
  rightTopTextColor: {
    title: '　 ↳ 색상',
    type: ControlType.Enum,
    options: textColorLabels as any,
    defaultValue: textColorLabels[2],
    hidden(props) {
      return props.rightType !== '📃 텍스트' || props.countOfRightTextRows === '1줄';
    },
  },
  rightBottomText: {
    title: '↳ 아래쪽',
    type: ControlType.String,
    defaultValue: '마르고 닳도록',
    hidden(props) {
      return props.rightType !== '📃 텍스트' || props.countOfRightTextRows === '1줄';
    },
  },
  rightBottomTextColor: {
    title: '　 ↳ 색상',
    type: ControlType.Enum,
    options: textColorLabels as any,
    defaultValue: textColorLabels[2],
    hidden(props) {
      return props.rightType !== '📃 텍스트' || props.countOfRightTextRows === '1줄';
    },
  },
  rightTextWithoutArrow: {
    title: '➡️ 화살표',
    type: ControlType.Boolean,
    enabledTitle: 'OFF',
    disabledTitle: 'ON',
    defaultValue: true,
    hidden(props) {
      return props.rightType !== '📃 텍스트';
    },
  },

  rightButtonText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '버튼',
    hidden(props) {
      return props.rightType !== '🖲 버튼';
    },
  },
  rightButtonSizeSmall: {
    title: '↳ 크기',
    type: ControlType.Boolean,
    enabledTitle: '작음',
    disabledTitle: '일반',
    hidden(props) {
      return props.rightType !== '🖲 버튼';
    },
  },
  rightButtonStyle: {
    title: '↳ 타입',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonStyleLables as any,
    defaultValue: buttonStyleLables[0],
    hidden(props) {
      return props.rightType !== '🖲 버튼';
    },
  },
  rightButtonType: {
    title: '↳ 색상',
    type: ControlType.Enum,
    options: buttonTypeLabels as any,
    defaultValue: buttonTypeLabels[0],
    hidden(props) {
      return props.rightType !== '🖲 버튼';
    },
  },
  rightButtonDisabled: {
    title: '↳ 상태',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonDisabledLables as any,
    defaultValue: buttonDisabledLables[0],
    hidden(props) {
      return props.rightType !== '🖲 버튼';
    },
  },
  onRightButtonClick: {
    type: ControlType.EventHandler,
  },

  rightIconName: {
    title: '↳ 아이콘 이름',
    type: ControlType.String,
    defaultValue: 'icn-heart-color',
    hidden(props) {
      return props.rightType !== '🔵 아이콘';
    },
  },

  rightCheckboxTypeCircle: {
    title: '↳ 타입',
    type: ControlType.Boolean,
    enabledTitle: '원형',
    disabledTitle: '일반',
    defaultValue: true,
    hidden(props) {
      return props.rightType !== '✅ 체크';
    },
  },
  rightCheckboxChecked: {
    title: '↳ 체크',
    type: ControlType.Boolean,
    enabledTitle: 'On',
    disabledTitle: 'Off',
    defaultValue: true,
    hidden(props) {
      return props.rightType !== '✅ 체크';
    },
  },
  rightCheckboxEnabled: {
    title: '↳ 비활성',
    type: ControlType.Boolean,
    enabledTitle: '아니오',
    disabledTitle: '네',
    defaultValue: true,
    hidden(props) {
      return props.rightType !== '✅ 체크';
    },
  },
  onRightCheckChange: {
    type: ControlType.EventHandler,
  },

  rightSwitchChecked: {
    title: '↳ 토글',
    type: ControlType.Boolean,
    enabledTitle: 'On',
    disabledTitle: 'Off',
    defaultValue: true,
    hidden(props) {
      return props.rightType !== '💊 스위치';
    },
  },
  rightSwitchEnabled: {
    title: '↳ 비활성',
    type: ControlType.Boolean,
    enabledTitle: '아니오',
    disabledTitle: '네',
    defaultValue: true,
    hidden(props) {
      return props.rightType !== '💊 스위치';
    },
  },
  onRightSwitchChange: {
    type: ControlType.EventHandler,
  },

  paddingSize: {
    title: '🔲 패딩',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: paddingSizeLabels as any,
    defaultValue: paddingSizeLabels[2],
  },

  onListClick: {
    type: ControlType.EventHandler,
  },
});

(ListRow as any).defaultProps = {
  width: 375,
  height: 70,
};

ListRow.displayName = makeComponentDisplayName('List', '리스트');
