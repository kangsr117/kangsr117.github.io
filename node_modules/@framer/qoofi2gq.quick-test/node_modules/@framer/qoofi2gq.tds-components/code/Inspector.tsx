import styled from '@emotion/styled';
import classnames from 'classnames';
import { addPropertyControls, ControlType } from 'framer';
import { debounce } from 'lodash';
import * as React from 'react';
import { useCallback, useContext, useEffect, useMemo, useState } from 'react';
import SyntaxHighlighter from 'react-syntax-highlighter';
import { colors } from '../@tossteam/colors';
import { default as Tab } from '../@tossteam/tds-web/react/components/Tab';
import { ChildrenPlaceholder } from '../src/components/ChildrenPlaceholder';
import { XRuler } from '../src/components/rulers/XRuler';
import { YRuler } from '../src/components/rulers/YRuler';
import '../src/styles/tds-framer.css';
import { copyTextToClipboard } from '../src/utils/copyTextToClipboard';
import { formatCode } from '../src/utils/formatCode';
import { formatObjectValue } from '../src/utils/formatReactNode';
import { makeDisplayName } from '../src/utils/makeDisplayName';

const summaryTabIndex = 0;
const codeTabIndex = 1;

interface InspectedComponent {
  name: string;
  id: string;
  summary?: { [key: string]: any };
  code: string;
}

export const InspectorContext = React.createContext<{
  inInspector: boolean;
  selectedComponent?: InspectedComponent;
  selectComponent?: (component: InspectedComponent) => void;
}>({
  inInspector: false,
});

interface Props {
  showComponentName?: boolean;
  children?: React.ReactNode;
}

const KEY_CODE = {
  c: 67,
  s: 83,
};

const INITIAL_RULER_DIMENSION = {
  top: '0px',
  right: 'auto',
  bottom: 'auto',
  left: '0px',
  distance: 0,
};

const SELECTED_NATIVE_DOM_BORDER_COLOR = 'red';
const NATIVE_DOM_HOVER_COLOR = 'orange';

export function Inspector({ showComponentName = true, children }: Props) {
  const [selectedComponent, setSelectedComponent] = useState<InspectedComponent>();
  const [isCopied, setIsCopied] = useState(false);
  const [hasErrorOnCopying, setHasErrorOnCopying] = useState(false);
  const [selectedIndex, setSelectedIndex] = useState(summaryTabIndex);

  const [selectedNativeDOM, setSelectedNativeDOM] = useState<HTMLElement>();
  const [widthRulerDimension, setWidthRulerDimension] = useState(INITIAL_RULER_DIMENSION);
  const [heightRulerDimension, setHeightRulerDimension] = useState(INITIAL_RULER_DIMENSION);
  const [xRulerDimension, setXRulerDimension] = useState(INITIAL_RULER_DIMENSION);
  const [yRulerDimension, setYRulerDimension] = useState(INITIAL_RULER_DIMENSION);

  const resetRuler = useCallback(() => {
    setXRulerDimension(INITIAL_RULER_DIMENSION);
    setYRulerDimension(INITIAL_RULER_DIMENSION);
  }, []);

  useEffect(() => {
    setIsCopied(false);
    setHasErrorOnCopying(false);
  }, [selectedComponent, selectedIndex]);

  const codeText = useMemo(() => {
    if (selectedComponent == null) {
      return '';
    }

    if (selectedIndex === summaryTabIndex) {
      const doesSummaryExist = selectedComponent?.summary != null;
      return doesSummaryExist
        ? formatCode(`const ${selectedComponent.name} = ${formatObjectValue(selectedComponent.summary ?? {})}`)
        : '아직 요약을 제공하지 않는 컴포넌트입니다';
    }

    return selectedComponent.code;
  }, [selectedComponent, selectedIndex]);

  useEffect(() => {
    const handleMouseOver = debounce((event: MouseEvent) => {
      const elem = event.target as HTMLElement;
      if (elem !== selectedNativeDOM) {
        elem.style.outline = `1px solid ${SELECTED_NATIVE_DOM_BORDER_COLOR}`;

        // Note(@joshuakimDwan)
        // TODO: 현재 부모 엘리먼트와 자식 엘리먼트 간의 간격을 잴 수 없는 상태. 부모와 자식 사이의 간격을 재는 경우를 분기 처리하기
        // TODO: 유틸로 분리 + 테스트 작성
        if (selectedNativeDOM != null) {
          // 두 엘리먼트의 위치를 비교해서 좌/우를 판단하고, 좌측 엘리먼트의 x좌표 + width와 우측 엘리먼트의 x좌표를 비교해서 X거리를 구한다.
          // Y거리도 같은 방식으로 구한다.
          const { x: aX, width: aWidth, y: aY, height: aHeight } = selectedNativeDOM.getBoundingClientRect();
          const { x: bX, width: bWidth, y: bY, height: bHeight } = elem.getBoundingClientRect();
          const leftX = aX <= bX ? aX : bX;
          const rightX = aX <= bX ? bX : aX;
          const leftWidth = aX <= bX ? aWidth : bWidth;
          const xDistance = rightX - (leftX + leftWidth);
          setXRulerDimension({
            distance: xDistance,
            top: `${aY + aHeight / 2}px`,
            right: 'auto',
            left: `${leftX + leftWidth}px`,
            bottom: 'auto',
          });

          const topY = aY <= bY ? aY : bY;
          const bottomY = aY <= bY ? bY : aY;
          const topHeight = aY <= bY ? aHeight : bHeight;
          const yDistance = bottomY - (topY + topHeight);
          setYRulerDimension({
            distance: yDistance,
            top: `${topY + topHeight}px`,
            right: 'auto',
            left: `${aX + aWidth / 2}px`,
            bottom: 'auto',
          });
        }
      }
    }, 50);
    const handleMouseOut = (event: MouseEvent) => {
      const elem = event.target as HTMLElement;
      if (elem !== selectedNativeDOM) {
        elem.style.outline = 'none';
      }

      resetRuler();
    };

    const handleClick = (event: MouseEvent) => {
      setSelectedNativeDOM(event.target as HTMLElement);
    };

    document.addEventListener('mouseover', handleMouseOver);
    document.addEventListener('mouseout', handleMouseOut);
    document.addEventListener('click', handleClick);

    return () => {
      document.removeEventListener('mouseover', handleMouseOver);
      document.removeEventListener('mouseout', handleMouseOut);
      document.removeEventListener('click', handleClick);
    };
  }, [resetRuler, selectedNativeDOM]);

  useEffect(() => {
    if (selectedNativeDOM == null) {
      return;
    }

    selectedNativeDOM.style.outline = `1px solid ${NATIVE_DOM_HOVER_COLOR}`;

    const rect = selectedNativeDOM.getBoundingClientRect();

    setWidthRulerDimension({
      distance: rect.width,
      top: `${rect.top + rect.height / 2 - 1}px`,
      right: 'auto',
      left: `${rect.left}px`,
      bottom: 'auto',
    });

    setHeightRulerDimension({
      distance: rect.height,
      top: `${rect.top}px`,
      right: 'auto',
      left: `${rect.left + rect.width / 2 - 1}px`,
      bottom: 'auto',
    });

    return () => {
      selectedNativeDOM.style.outline = 'none';
    };
  }, [selectedNativeDOM]);

  return (
    <Container
      onKeyDown={event => {
        if (event.altKey || event.metaKey || event.ctrlKey || event.shiftKey) {
          return;
        }

        if (event.keyCode === KEY_CODE.s) {
          setSelectedIndex(0);
        } else if (event.keyCode === KEY_CODE.c) {
          setSelectedIndex(1);
        }
      }}
      // hack to receive key events
      // https://stackoverflow.com/questions/148361/how-can-i-give-keyboard-focus-to-a-div-and-attach-keyboard-event-handlers-to-it
      tabIndex={0}
    >
      <PreviewArea
        className={classnames('framer-inspector', {
          'framer-inspector--hide-badge': !showComponentName,
        })}
      >
        <InspectorContext.Provider
          value={{ selectedComponent, selectComponent: setSelectedComponent, inInspector: true }}
        >
          {React.Children.count(children) > 0 ? children : <ChildrenPlaceholder style={{ width: 375 }} />}
        </InspectorContext.Provider>
        <XRuler distance={xRulerDimension.distance} dimension={xRulerDimension} />
        <YRuler distance={yRulerDimension.distance} dimension={yRulerDimension} />
        {selectedNativeDOM && (
          <>
            <XRuler
              color="green"
              labelOffset={2}
              distance={widthRulerDimension.distance}
              dimension={widthRulerDimension}
            />
            <YRuler
              color="purple"
              labelOffset={-20}
              distance={heightRulerDimension.distance}
              dimension={heightRulerDimension}
            />
          </>
        )}
      </PreviewArea>
      <CodeSnippetArea>
        <Tab onChange={setSelectedIndex}>
          {[
            <Tab.Item key="summary" selected={selectedIndex === summaryTabIndex}>
              요약 (S)
            </Tab.Item>,
            <Tab.Item key="code" selected={selectedIndex === codeTabIndex}>
              코드 (C)
            </Tab.Item>,
          ]}
        </Tab>
        <div style={{ position: 'relative', flex: 1, minHeight: 0 }}>
          <SyntaxHighlighter
            language="typescript"
            wrapLines
            wrapLongLines
            useInlineStyles={false}
            customStyle={{
              width: '100%',
              height: '100%',
            }}
          >
            {codeText}
          </SyntaxHighlighter>
          <CopyButton
            onClick={async () => {
              try {
                await copyTextToClipboard(codeText);
              } catch {
                setHasErrorOnCopying(true);
              }
              setIsCopied(true);
            }}
          >
            {hasErrorOnCopying ? '복사를 지원하지 않는 브라우저입니다' : isCopied ? '복사됨' : '복사'}
          </CopyButton>
        </div>
      </CodeSnippetArea>
    </Container>
  );
}

export const useInspectorContext = () => {
  return useContext(InspectorContext);
};

addPropertyControls(Inspector, {
  showComponentName: {
    title: '컴포넌트 이름',
    type: ControlType.Boolean,
    enabledTitle: '보이기',
    disabledTitle: '숨기기',
    defaultValue: true,
  },
  children: {
    title: '자식',
    type: ControlType.ComponentInstance,
  },
});

(Inspector as any).defaultProps = {
  width: 900,
  height: 896,
};

Inspector.displayName = makeDisplayName('tool')('Inspector', '인스펙터');

const Container = styled.div`
  position: relative;
  width: 100%;
  height: 100%;

  display: flex;
`;

const PreviewArea = styled.div`
  flex: none;
  overflow: scroll;
  & > div[data-framer-component-type='Frame'],
  & > div[data-framer-component-type='Stack'] {
    position: relative !important;
  }
`;

const CodeSnippetArea = styled.div`
  position: relative;
  margin-left: 8px;
  flex: 1;
  max-width: calc(100% - 375px - 8px);
  border-radius: 12px;

  display: flex;
  flex-direction: column;

  .hljs * {
    user-select: text;
  }
`;

const CopyButton = styled.button`
  position: absolute;
  top: 20px;
  right: 20px;
  border: none;
  background-color: ${colors.greyOpacity900};
  border-radius: 22px;
  font-size: 13px;
  color: ${colors.white};
  letter-spacing: 0px;
  line-height: 1.2;
  font-weight: 500;
  padding: 4px 8px 3px;
`;
