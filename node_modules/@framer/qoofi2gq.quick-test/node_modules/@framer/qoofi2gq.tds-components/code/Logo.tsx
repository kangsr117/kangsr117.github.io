import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { TDSComponent } from '../src/components/TDSComponent';
import { bankCodes, bankIconByBankCode, bankNames } from '../src/constants/bankIcon';
import { carIconIDs, carIcons } from '../src/constants/carIcon';
import { timelineIconByID, timelineIconIDs } from '../src/constants/timelineIcon';
import '../src/styles/tds-framer.css';
import { getBankIconName } from '../src/utils/getBankIconName';
import { getCarIconName } from '../src/utils/getCarIconName';
import { getTimelineIconImageURL } from '../src/utils/getTimelineIconImageURL';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import { Icon } from './Icon';

const types = ['bank', 'timeline', 'car', 'toss'] as const;
const bankIconTypes = ['normal', 'circle', 'square', 'horizontal'] as const;
const otherIconTypes = ['normal', 'circle'] as const;
const selectionTypes = ['랜덤', '선택', '🚧직접입력'] as const;
const tossLogoSelectionTypes = ['🚧선택', '🚧직접입력'] as const;

interface Props {
  type: typeof types[number];
  bankIconType: typeof bankIconTypes[number];
  otherIconType: typeof otherIconTypes[number];
  selectionType: typeof selectionTypes[number];
  tossLogoSelectionType: typeof tossLogoSelectionTypes[number];
  randomBankIconIndex: number;
  randomTimelineIconIndex: number;
  randomCarIconIndex: number;
  selectedBankCode: string;
  selectedTimelineIconID: string;
  selectedCarIconID: string;
  selectedTossIconName: string;
  enteredBankIconName: string;
  enteredTimelineIconName: string;
  enteredCarIconName: string;
  enteredTossIconName: string;
}

function getIconName({
  type,

  bankIconType,
  otherIconType,

  selectionType,
  tossLogoSelectionType,

  randomBankIconIndex,
  randomTimelineIconIndex,
  randomCarIconIndex,

  selectedBankCode,
  selectedTimelineIconID,
  selectedCarIconID,
  selectedTossIconName,

  enteredBankIconName,
  enteredTimelineIconName,
  enteredCarIconName,
  enteredTossIconName,
}: Props) {
  const bankImageID =
    selectionType === '🚧직접입력'
      ? enteredBankIconName
      : bankIconByBankCode[selectionType === '랜덤' ? bankCodes[randomBankIconIndex - 1] : selectedBankCode].imageID;
  const timelineImageID =
    selectionType === '🚧직접입력'
      ? enteredTimelineIconName
      : timelineIconByID[
          selectionType === '랜덤' ? timelineIconIDs[randomTimelineIconIndex - 1] : selectedTimelineIconID
        ].imageID;
  const carIconID =
    selectionType === '🚧직접입력'
      ? enteredCarIconName
      : selectionType === '랜덤'
      ? carIconIDs[randomCarIconIndex - 1]
      : selectedCarIconID;
  const tossIconName = tossLogoSelectionType === '🚧직접입력' ? enteredTossIconName : selectedTossIconName;

  switch (type) {
    case 'bank':
      return getBankIconName(bankIconType === 'circle' ? 'fill' : bankIconType, bankImageID);
    case 'timeline':
      return getTimelineIconImageURL(timelineImageID, otherIconType === 'circle');
    case 'car':
      return getCarIconName(otherIconType === 'circle' ? 'fill' : otherIconType, carIconID);
    case 'toss':
      return tossIconName;
  }
}

export function Logo(props: Props) {
  const { type, bankIconType, otherIconType } = props;
  const iconType = type === 'bank' ? bankIconType : otherIconType;
  const iconName = getIconName(props);

  if (type !== 'timeline') {
    return <Icon name={iconName} typeNormal={iconType !== 'circle'} fitToWidth />;
  }

  const component = (
    <TDSComponent
      name="Image"
      summary={{
        url: iconName,
        borderRadius: iconType === 'circle' ? '50%' : undefined,
      }}
    >
      <img src={iconName} style={{ width: '100%', height: 'auto' }} />
    </TDSComponent>
  );

  if (iconType === 'circle') {
    return (
      <div
        style={{
          position: 'relative',
          width: '100%',
          minWidth: 40,
          minHeight: 40,
          paddingTop: '100%',
        }}
      >
        <div
          style={{
            position: 'absolute',
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
            borderRadius: '50%',
            overflow: 'hidden',
          }}
        >
          {component}
        </div>
      </div>
    );
  }
  return component;
}

addPropertyControls(Logo, {
  type: {
    title: '로고 종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: types as any,
    optionTitles: ['은행', '일반', '자동차', '🚧토스'],
    defaultValue: types[0],
  },

  bankIconType: {
    title: '↳ 종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: bankIconTypes as any,
    optionTitles: ['일반', '원형', '카드형', '가로형'],
    defaultValue: bankIconTypes[0],
    hidden(props) {
      return props.type !== 'bank';
    },
  },
  otherIconType: {
    title: '↳ 종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: otherIconTypes as any,
    optionTitles: ['일반', '원형'],
    defaultValue: otherIconTypes[0],
    hidden(props) {
      return props.type === 'bank' || props.type === 'toss';
    },
  },

  selectionType: {
    title: '↳ 이미지',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: selectionTypes as any,
    defaultValue: selectionTypes[0],
    hidden(props) {
      return props.type === 'toss';
    },
  },
  tossLogoSelectionType: {
    title: '↳ 이미지',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: tossLogoSelectionTypes as any,
    defaultValue: tossLogoSelectionTypes[0],
    hidden(props) {
      return props.type !== 'toss';
    },
  },

  randomBankIconIndex: {
    title: '↳ 랜덤',
    type: ControlType.Number,
    min: 1,
    max: bankNames.length,
    defaultValue: 1,
    hidden(props) {
      return props.type !== 'bank' || props.selectionType !== '랜덤';
    },
  },
  randomTimelineIconIndex: {
    title: '↳ 랜덤',
    type: ControlType.Number,
    min: 1,
    max: timelineIconIDs.length,
    defaultValue: 1,
    hidden(props) {
      return props.type !== 'timeline' || props.selectionType !== '랜덤';
    },
  },
  randomCarIconIndex: {
    title: '↳ 랜덤',
    type: ControlType.Number,
    min: 1,
    max: carIconIDs.length,
    defaultValue: 1,
    hidden(props) {
      return props.type !== 'car' || props.selectionType !== '랜덤';
    },
  },
  selectedBankCode: {
    title: '↳ 선택',
    type: ControlType.Enum,
    options: bankCodes as any,
    optionTitles: bankCodes.map(bankCode => bankIconByBankCode[bankCode].name),
    defaultValue: bankCodes[0],
    hidden(props) {
      return props.type !== 'bank' || props.selectionType !== '선택';
    },
  },
  selectedTimelineIconID: {
    title: '↳ 선택',
    type: ControlType.Enum,
    options: timelineIconIDs as any,
    optionTitles: timelineIconIDs.map(id => timelineIconByID[id].name),
    defaultValue: timelineIconIDs[0],
    hidden(props) {
      return props.type !== 'timeline' || props.selectionType !== '선택';
    },
  },
  selectedCarIconID: {
    title: '↳ 선택',
    type: ControlType.Enum,
    options: carIconIDs as any,
    optionTitles: carIconIDs.map(id => carIcons[id].name),
    defaultValue: carIconIDs[0],
    hidden(props) {
      return props.type !== 'car' || props.selectionType !== '선택';
    },
  },
  selectedTossIconName: {
    title: '↳ 선택',
    type: ControlType.Enum,
    options: carIconIDs as any,
    optionTitles: carIconIDs.map(id => carIcons[id].name),
    defaultValue: carIconIDs[0],
    hidden(props) {
      return props.type !== 'toss' || props.selectionType !== '선택';
    },
  },

  enteredBankIconName: {
    title: '↳ 이름',
    type: ControlType.String,
    defaultValue: 'kb',
    hidden(props) {
      return props.type !== 'bank' || props.selectionType !== '🚧직접입력';
    },
  },
  enteredTimelineIconName: {
    title: '↳ 이름',
    type: ControlType.String,
    defaultValue: 'kb',
    hidden(props) {
      return props.type !== 'timeline' || props.selectionType !== '🚧직접입력';
    },
  },
  enteredCarIconName: {
    title: '↳ 이름',
    type: ControlType.String,
    defaultValue: 'kb',
    hidden(props) {
      return props.type !== 'timeline' || props.selectionType !== '🚧직접입력';
    },
  },
  enteredTossIconName: {
    title: '↳ 이름',
    type: ControlType.String,
    defaultValue: 'kb',
    hidden(props) {
      return props.type !== 'timeline' || props.selectionType !== '🚧직접입력';
    },
  },
});

(Logo as any).defaultProps = {
  width: 24,
  height: 24,
};

Logo.displayName = makeComponentDisplayName('Logo', '로고');
