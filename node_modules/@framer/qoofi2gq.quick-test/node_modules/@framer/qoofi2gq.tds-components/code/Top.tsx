import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { Top as TDSTop } from '../@tossteam/tds-web/react/components/NewTop/Top';
import convertNewLineToJSX from '../@tossteam/tds-web/react/utils/convertNewLineToJSX';
import { TDSComponent } from '../src/components/TDSComponent';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import { colors as canvasColors } from './canvas';

const textTypeLabels = [
  '🗑 없음',
  '📃 작은 설명  ・  top6',
  '📃 일반적인 설명  ・  top5',
  '🔈 작은 제목  ・  top4',
  '🔉 일반적인 제목  ・  top3',
  '🔊 큰 제목  ・  top2',
] as const;

type TextTypeLabel = typeof textTypeLabels[number];

interface Props {
  upper: TextTypeLabel;
  upperText: string;
  upperTextColor: string;
  lower: TextTypeLabel;
  lowerText: string;
  lowerTextColor: string;
}

const textTypeByControlLabel: {
  [key in TextTypeLabel]: JSX.Element;
} = {
  '🗑 없음': null,
  '📃 작은 설명  ・  top6': <TDSTop.Text6 />,
  '📃 일반적인 설명  ・  top5': <TDSTop.Text5 />,
  '🔈 작은 제목  ・  top4': <TDSTop.Text4 />,
  '🔉 일반적인 제목  ・  top3': <TDSTop.Text3 />,
  '🔊 큰 제목  ・  top2': <TDSTop.Text2 />,
};

const summaryNameByControlLabel: {
  [key in TextTypeLabel]: string;
} = {
  '🗑 없음': null,
  '📃 작은 설명  ・  top6': 'top6',
  '📃 일반적인 설명  ・  top5': 'top5',
  '🔈 작은 제목  ・  top4': 'top4',
  '🔉 일반적인 제목  ・  top3': 'top3',
  '🔊 큰 제목  ・  top2': 'top2',
};

export function Top({ upper, upperText, upperTextColor, lower, lowerText, lowerTextColor }: Props) {
  const upperComponent = textTypeByControlLabel[upper];
  const lowerComponent = textTypeByControlLabel[lower];

  return (
    <TDSComponent
      name="Top"
      summary={{
        upper: upperComponent ? summaryNameByControlLabel[upper] : undefined,
        upperText: upperComponent ? upperText : undefined,
        upperTextColor: upperComponent ? upperTextColor : undefined,
        lower: lowerComponent ? summaryNameByControlLabel[lower] : undefined,
        lowerText: lowerComponent ? lowerText : undefined,
        lowerTextColor: lowerComponent ? lowerTextColor : undefined,
      }}
    >
      <TDSTop
        upper={
          upperComponent &&
          React.cloneElement(upperComponent, { style: { color: upperTextColor } }, convertNewLineToJSX(upperText))
        }
        lower={
          lowerComponent &&
          React.cloneElement(lowerComponent, { style: { color: lowerTextColor } }, convertNewLineToJSX(lowerText))
        }
      />
    </TDSComponent>
  );
}

addPropertyControls(Top, {
  upper: {
    title: '위쪽',
    type: ControlType.Enum,
    options: textTypeLabels as any,
    defaultValue: '🔉 일반적인 제목  ・  top3',
  },
  upperText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '텍스트를 적어주세요',
    displayTextArea: true,
    hidden(props) {
      return props.upper === '🗑 없음';
    },
  },
  upperTextColor: {
    title: '↳ 컬러',
    type: ControlType.Color,
    defaultValue: canvasColors['Grey800 - 제목 텍스트'],
    hidden(props) {
      return props.upper === '🗑 없음';
    },
  },
  lower: {
    title: '아래쪽',
    type: ControlType.Enum,
    options: textTypeLabels as any,
    defaultValue: '🗑 없음',
  },
  lowerText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '텍스트를 적어주세요',
    displayTextArea: true,
    hidden(props) {
      return props.lower === '🗑 없음';
    },
  },
  lowerTextColor: {
    title: '↳ 컬러',
    type: ControlType.Color,
    defaultValue: canvasColors['Grey800 - 제목 텍스트'],
    hidden(props) {
      return props.lower === '🗑 없음';
    },
  },
});

(Top as any).defaultProps = {
  width: 375,
  height: 55,
};

Top.displayName = makeComponentDisplayName('Top', '탑');
