import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { default as TDSBubble, Props as TDSBubbleProps } from '../@tossteam/tds-web/react/components/Bubble/Bubble';
import TextButton from '../@tossteam/tds-web/react/components/TextButton/TextButton';
import convertNewLineToJSX from '../@tossteam/tds-web/react/utils/convertNewLineToJSX';
import { TDSComponent } from '../src/components/TDSComponent';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

export const sourceLabels = ['나', '상대방'] as const;
export const tailLabels = ['있음', '없음'] as const;
export const textButtonLabels = ['OFF', 'ON'] as const;

export type SourceLabel = typeof sourceLabels[number];
export type TailLabel = typeof tailLabels[number];
export type TextButtonLabel = typeof textButtonLabels[number];

const sourceLabel: {
  [key in SourceLabel]: TDSBubbleProps['background'];
} = {
  나: 'blue',
  상대방: 'grey',
};

const tailLabel: {
  [key in TailLabel]: TDSBubbleProps['withTail'];
} = {
  있음: true,
  없음: false,
};

interface Props {
  text?: string;
  source?: SourceLabel;
  withTail?: TailLabel;
  withTextButton?: TextButtonLabel;

  disableInspector?: boolean;

  onClick?: () => void;
}

export function Bubble({
  text = '',
  source = '나',
  withTail = '있음',
  withTextButton = 'OFF',

  disableInspector,
}: Props) {
  const displayTextButton = withTextButton === 'ON';

  return (
    <TDSComponent
      name="Bubble"
      summary={{
        background: sourceLabel[source],
        withTail: tailLabel[withTail],
      }}
      disabled={disableInspector}
    >
      <TDSBubble background={sourceLabel[source]} withTail={tailLabel[withTail]}>
        {displayTextButton ? (
          <TextButton type="primary" withArrow>
            {convertNewLineToJSX(text)}
          </TextButton>
        ) : (
          convertNewLineToJSX(text)
        )}
      </TDSBubble>
    </TDSComponent>
  );
}

addPropertyControls(Bubble, {
  source: {
    title: '말하는 사람',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: sourceLabels as any,
    defaultValue: sourceLabels[0],
  },
  text: {
    title: '텍스트',
    type: ControlType.String,
    defaultValue: '동해물과 백두산이 마르고닳도록 하느님이 보우하사우리나라 만세',
    displayTextArea: true,
  },
  withTail: {
    title: '꼬리',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: tailLabels as any,
    defaultValue: tailLabels[0],
  },
  withTextButton: {
    title: '텍스트버튼',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: textButtonLabels as any,
    defaultValue: textButtonLabels[0],
  },
});

(Bubble as any).defaultProps = {
  width: 200,
  height: 100,
};

Bubble.displayName = makeComponentDisplayName('Bubble', '말풍선');
