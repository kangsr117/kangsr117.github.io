import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { Props as TDSRadioProps, Radio as TDSRadio } from '../@tossteam/tds-web/react/components/Radio/Radio';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const disabledLabels = ['아니오', '네'] as const;

type DisabledLabel = typeof disabledLabels[number];

interface Props {
  selectedIndex: number;
  options: string[];
  disabled: DisabledLabel;
  tabContentPositionBottom: boolean;

  tabContent1: React.ReactNode;
  tabContent2: React.ReactNode;
  tabContent3: React.ReactNode;
  tabContent4: React.ReactNode;

  onChange?: () => void;
  onSegment1Tap?: () => void;
  onSegment2Tap?: () => void;
  onSegment3Tap?: () => void;
  onSegment4Tap?: () => void;
}

const disabledByControlLabel: {
  [key in DisabledLabel]: TDSRadioProps['disabled'];
} = {
  아니오: false,
  네: true,
};

export function Radio(props: Props) {
  const {
    selectedIndex,
    options,
    disabled,
    tabContentPositionBottom,

    tabContent1,
    tabContent2,
    tabContent3,
    tabContent4,

    onChange,
    onSegment1Tap,
    onSegment2Tap,
    onSegment3Tap,
    onSegment4Tap,
  } = useFilteringEventHandlersInInspector(props);

  const [value, setValue] = React.useState(selectedIndex - 1);
  const tabContents = [tabContent1, tabContent2, tabContent3, tabContent4];
  const tapEvent = [onSegment1Tap, onSegment2Tap, onSegment3Tap, onSegment4Tap];

  React.useEffect(() => {
    setValue(selectedIndex - 1);
  }, [selectedIndex]);

  const handleChange = ({ target: { value: newValue } }) => {
    const newIndex = Number(newValue);
    setValue(newIndex);
    onChange?.();
    tapEvent[newIndex]?.();
  };

  return (
    <div
      style={{
        display: 'flex',
        flexDirection: tabContentPositionBottom ? 'column-reverse' : 'column',
        height: '100%',
      }}
    >
      <div style={{ position: 'relative', flex: 1, overflow: 'scroll' }}>{tabContents[value]}</div>
      <div style={{ position: 'relative', padding: '0 24px' }}>
        <TDSComponent
          name="Radio"
          summary={{
            items: options,
          }}
        >
          <TDSRadio value={value} disabled={disabledByControlLabel[disabled]} onChange={handleChange}>
            {options.map((option, index) => (
              <TDSRadio.Option key={index} value={index}>
                {option}
              </TDSRadio.Option>
            ))}
          </TDSRadio>
        </TDSComponent>
      </div>
    </div>
  );
}

addPropertyControls(Radio, {
  selectedIndex: {
    title: '포커스',
    type: ControlType.Number,
    defaultValue: 1,
    displayStepper: true,
    min: 1,
    max: 4,
  },
  options: {
    title: 'Options',
    type: ControlType.Array,
    propertyControl: {
      type: ControlType.String,
    },
    maxCount: 4,
    defaultValue: ['하나', '둘'],
  },
  disabled: {
    title: '비활성',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: disabledLabels as any,
    defaultValue: '아니오',
  },
  tabContentPositionBottom: {
    title: '자식 위치',
    type: ControlType.Boolean,
    enabledTitle: '아래쪽',
    disabledTitle: '위쪽',
    defaultValue: true,
  },

  tabContent1: {
    title: '탭 1',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfOptionsLengthIsLessThan(1),
  },
  tabContent2: {
    title: '탭 2',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfOptionsLengthIsLessThan(2),
  },
  tabContent3: {
    title: '탭 3',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfOptionsLengthIsLessThan(3),
  },
  tabContent4: {
    title: '탭 4',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfOptionsLengthIsLessThan(4),
  },

  onChange: {
    type: ControlType.EventHandler,
  },
  onSegment1Tap: {
    type: ControlType.EventHandler,
  },
  onSegment2Tap: {
    type: ControlType.EventHandler,
  },
  onSegment3Tap: {
    type: ControlType.EventHandler,
  },
  onSegment4Tap: {
    type: ControlType.EventHandler,
  },
});

(Radio as any).defaultProps = {
  width: 375,
  height: 49,
};

Radio.displayName = makeComponentDisplayName('Radio', '라디오');

function hideControlIfOptionsLengthIsLessThan(length: number) {
  return (props: Partial<Props>) => {
    return props.options.length < length;
  };
}
