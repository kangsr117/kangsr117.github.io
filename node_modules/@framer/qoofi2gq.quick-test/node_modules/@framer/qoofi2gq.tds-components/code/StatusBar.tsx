import styled from '@emotion/styled';
import { format } from 'date-fns';
import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { useEffect, useState } from 'react';
import { colors } from '../@tossteam/colors';
import { default as TDSIcon } from '../@tossteam/tds-web/react/components/Icon/Icon';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

interface Props {
  iOS: boolean;
  slim: boolean;
  blackTheme: boolean;
}

export function StatusBar({ iOS, slim, blackTheme }: Props) {
  const [currentDate, setCurrentDate] = useState(new Date());

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentDate(new Date());
    }, 1000);

    return () => {
      clearInterval(interval);
    };
  }, []);

  if (!iOS) {
    const shapeColor = blackTheme ? colors.greyOpacity300 : colors.whiteOpacity300;
    return (
      <div
        style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'flex-end',
          height: 26,
          backgroundColor: blackTheme ? colors.greyOpacity100 : colors.whiteOpacity100,
        }}
      >
        <span
          style={{
            backgroundColor: shapeColor,
            width: 10,
            height: 10,
            borderRadius: '50%',
          }}
        />
        <span
          style={{
            backgroundColor: shapeColor,
            width: 10,
            height: 10,
            margin: '0 6px',
          }}
        />
        <span
          style={{
            borderLeft: '6.5px solid transparent',
            borderRight: '6.5px solid transparent',
            borderTop: `10px solid ${shapeColor}`,
            marginRight: 10,
          }}
        />
      </div>
    );
  }

  const timeString = slim ? format(currentDate, 'h:mm a') : format(currentDate, 'h:mm');
  const color = blackTheme ? 'black' : 'white';

  return (
    <Bar
      color={color}
      style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        height: slim ? 20 : 44,
        fontSize: slim ? 12 : 15,
        fontWeight: slim ? 'normal' : 600,
        paddingLeft: slim ? 6 : 20,
        paddingRight: slim ? 5 : 14,
        color,
      }}
    >
      <div style={{ display: 'flex', alignItems: 'center', flex: 1 }}>
        {slim ? (
          <>
            <TDSIcon name="icn-ios-system-statusbar-cellular" color={color} size={17} />
            <span style={{ margin: '1px 3px 0' }}>Toss</span>
            <TDSIcon name="icn-ios-system-statusbar-wifi" color={color} size={14} />
          </>
        ) : (
          <span style={{ width: 54, textAlign: 'center' }}>{timeString}</span>
        )}
      </div>
      {slim ? (
        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            marginTop: 1.5,
            flex: 1,
          }}
        >
          <span style={{ fontWeight: 600 }}>{timeString}</span>
        </div>
      ) : null}
      <div
        style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'flex-end',
          flex: 1,
        }}
      >
        {slim ? (
          <span style={{ marginTop: 1.5 }}>100%</span>
        ) : (
          <>
            <TDSIcon name="icn-ios-system-statusbar-cellular" color={color} size={17} />
            <span style={{ marginLeft: 5, display: 'flex', alignItems: 'center' }}>
              <TDSIcon name="icn-ios-system-statusbar-wifi" color={color} size={15} />
            </span>
          </>
        )}
        <span
          style={{
            marginLeft: slim ? 3 : 5,
            display: 'flex',
            alignItems: 'center',
          }}
        >
          <TDSIcon name="icn-ios-system-statusbar-battery" size={25} />
        </span>
      </div>
    </Bar>
  );
}

addPropertyControls(StatusBar, {
  iOS: {
    title: 'OS',
    type: ControlType.Boolean,
    enabledTitle: 'iOS',
    disabledTitle: 'Android',
    defaultValue: true,
  },
  slim: {
    title: '기종',
    type: ControlType.Boolean,
    enabledTitle: '기본',
    disabledTitle: '아이폰X',
    defaultValue: true,
    hidden(props) {
      return !props.iOS;
    },
  },
  blackTheme: {
    title: '테마',
    type: ControlType.Boolean,
    enabledTitle: '블랙 텍스트',
    disabledTitle: '화이트 텍스트',
    defaultValue: true,
  },
});

(StatusBar as any).defaultProps = {
  width: 375,
  height: 23,
};

StatusBar.displayName = makeComponentDisplayName('StatusBar', '스태터스바');

const Bar = styled.div<{ color: string }>`
  path {
    fill: ${({ color }) => color};
  }
`;
