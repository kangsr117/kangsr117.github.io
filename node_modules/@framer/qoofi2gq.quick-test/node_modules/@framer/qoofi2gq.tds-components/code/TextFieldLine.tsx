import { addPropertyControls, ControlType, PropertyControls } from 'framer';
import * as React from 'react';
import { default as TDSForm } from '../@tossteam/tds-web/react/components/Form/Form';
import {
  default as TDSTextFieldLine,
  Props as TDSTextFieldLineProps,
} from '../@tossteam/tds-web/react/components/TextFieldLine/TextFieldLine';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { isStaticRenderTarget } from '../src/utils/isStaticRenderTarget';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const typeLabels = [
  '📄 일반 텍스트',
  '😀 이름',
  '💰 금액',
  '🚧👤 주민번호 앞 6자리',
  '🚧👤 주민번호 뒤 7자리',
  '📱 전화번호',
  '🔐 비밀번호',
  '0️⃣ 숫자',
] as const;
const stateLabels = ['일반', '🚧활성', '에러', '비활성'] as const;
const keyboardTypeLabels = ['한글', '영문', '숫자'] as const;
const withClearButtonLabels = ['ON', 'OFF'] as const;
const withPasswordPreviewButtonLabels = ['ON', 'OFF'] as const;
const autoFocusLabels = ['ON', 'OFF'] as const;

type TypeLabel = typeof typeLabels[number];
type StateLabel = typeof stateLabels[number];
type KeyboardTypeLabel = typeof keyboardTypeLabels[number];
type WithClearButtonLabel = typeof withClearButtonLabels[number];
type WithPasswordPreviewButtonLabel = typeof withPasswordPreviewButtonLabels[number];
type AutoFocusLabel = typeof autoFocusLabels[number];

const defaultValueByType: {
  [key in TypeLabel]: { key: string; label: string };
} = {
  '📄 일반 텍스트': {
    key: 'plainText',
    label: '레이블',
  },
  '😀 이름': {
    key: 'name',
    label: '이름 입력',
  },
  '💰 금액': {
    key: 'price',
    label: '금액 입력',
  },
  '🚧👤 주민번호 앞 6자리': {
    key: 'nationalIDFirst',
    label: '주민등록번호',
  },
  '🚧👤 주민번호 뒤 7자리': {
    key: 'nationalIDLast',
    label: '주민등록번호',
  },
  '📱 전화번호': {
    key: 'phone',
    label: '휴대폰번호',
  },
  '🔐 비밀번호': {
    key: 'password',
    label: '비밀번호',
  },
  '0️⃣ 숫자': {
    key: 'number',
    label: '제목',
  },
};

const propertyControls = Object.entries(defaultValueByType).reduce<PropertyControls<Props, any>>(
  (acc, [type, defaultValue]) => ({
    ...acc,
    [`${defaultValue.key}Label`]: {
      title: '제목',
      type: ControlType.String,
      defaultValue: defaultValue.label,
      hidden(props) {
        return props.type !== type;
      },
    },
  }),
  {}
);

const propsByTypeControlLabel: {
  [key in TypeLabel]: Partial<TDSTextFieldLineProps>;
} = {
  '📄 일반 텍스트': { type: 'text' },
  '😀 이름': { type: 'name' },
  '💰 금액': { type: 'tel' },
  '🚧👤 주민번호 앞 6자리': { type: 'tel' },
  '🚧👤 주민번호 뒤 7자리': { type: 'numberPassword' },
  '📱 전화번호': { type: 'tel' },
  '🔐 비밀번호': { type: 'numberPassword' },
  '0️⃣ 숫자': { type: 'tel' },
};

const autoFocusByControlLabel: {
  [key in AutoFocusLabel]: TDSTextFieldLineProps['autoFocus'];
} = {
  ON: true,
  OFF: false,
};

interface Props {
  type: TypeLabel;
  inputValue: string;
  helpText: string;
  subText: string;
  suffix: string;
  state: StateLabel;
  keyboardType: KeyboardTypeLabel;
  withClearButton: WithClearButtonLabel;
  withPasswordPreviewButton: WithPasswordPreviewButtonLabel;
  autoFocus: AutoFocusLabel;

  onFocus: () => void;
  onChange: () => void;
  onSubmit: () => void;
}

export function TextFieldLine(props: Props) {
  const {
    type,
    inputValue,
    helpText,
    subText,
    suffix,
    state,
    keyboardType,
    withClearButton,
    withPasswordPreviewButton,
    autoFocus,

    onFocus,
    onChange,
    onSubmit,
    ...rest
  } = useFilteringEventHandlersInInspector(props);

  const [value, setValue] = React.useState(inputValue);

  React.useEffect(() => {
    setValue(inputValue);
  }, [inputValue]);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setValue(event.target.value);
    onChange?.();
  };

  return (
    <TDSForm>
      <TDSForm.Group help={helpText} hasError={state === '에러'}>
        <TDSComponent
          name="TextFieldLine"
          summary={{
            value: value ? value : undefined,
            label: rest[`${defaultValueByType[type].key}Label`],
            suffix: type === '💰 금액' ? suffix : undefined,
            subText: subText ? subText : undefined,
            autoFocus: autoFocusByControlLabel[autoFocus],
            error: state === '에러',
            disabled: state === '비활성',
          }}
        >
          <TDSTextFieldLine
            {...propsByTypeControlLabel[type]}
            label={rest[`${defaultValueByType[type].key}Label`]}
            value={value}
            suffix={type === '💰 금액' ? suffix : undefined}
            subText={subText}
            autoFocus={isStaticRenderTarget() ? false : autoFocusByControlLabel[autoFocus]}
            hasError={state === '에러'}
            disabled={state === '비활성'}
            onChange={handleChange}
            onFocus={onFocus}
            onKeyPress={e => {
              if (e.which === 13) {
                onSubmit();
              }
            }}
          />
        </TDSComponent>
      </TDSForm.Group>
    </TDSForm>
  );
}

addPropertyControls(TextFieldLine, {
  type: {
    title: '종류',
    type: ControlType.Enum,
    options: typeLabels as any,
    defaultValue: '📄 일반 텍스트',
  },
  ...propertyControls,
  inputValue: {
    title: '입력값',
    type: ControlType.String,
    defaultValue: '',
  },
  helpText: {
    title: '도움말',
    type: ControlType.String,
    defaultValue: '',
  },
  subText: {
    title: '서브텍스트',
    type: ControlType.String,
    defaultValue: '',
  },
  suffix: {
    title: '원 표시',
    type: ControlType.String,
    defaultValue: '원',
    hidden(props) {
      return props.type !== '💰 금액';
    },
  },
  state: {
    title: '상태',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: stateLabels as any,
    defaultValue: '일반',
  },
  withClearButton: {
    title: '🚧지우기버튼',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: withClearButtonLabels as any,
    defaultValue: 'ON',
    hidden(props) {
      return [
        '💰 금액',
        '👤 주민번호 앞 6자리',
        '👤 주민번호 뒤 7자리',
        '📱 전화번호',
        '🔐 비밀번호',
        '0️⃣ 숫자',
      ].includes(props.type);
    },
  },
  withPasswordPreviewButton: {
    title: '🚧비번 보기 버튼',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: withClearButtonLabels as any,
    defaultValue: 'ON',
    hidden(props) {
      return props.type !== '🔐 비밀번호';
    },
  },
  autoFocus: {
    title: '자동 포커스',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: autoFocusLabels as any,
    defaultValue: 'OFF',
  },

  onFocus: {
    type: ControlType.EventHandler,
  },
  onChange: {
    type: ControlType.EventHandler,
  },
  onSubmit: {
    type: ControlType.EventHandler,
  },
});

(TextFieldLine as any).defaultProps = {
  width: 375,
  height: 55,
};

TextFieldLine.displayName = makeComponentDisplayName('TextFieldMedium', '텍스트필드');
