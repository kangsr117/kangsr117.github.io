import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import {
  PostH1 as TDSPostH1,
  PostH2 as TDSPostH2,
  PostH3 as TDSPostH3,
  PostH4 as TDSPostH4,
  PostLi as TDSPostLi,
  PostLink as TDSPostLink,
  PostOl as TDSPostOl,
  PostParagraph as TDSPostParagraph,
  PostUl as TDSPostUl,
} from '../@tossteam/tds-web/react/components/Post';
import { TDSComponent } from '../src/components/TDSComponent';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const typeLabels = ['일반 텍스트', '넘버, 불릿'] as const;
const textTypeLabels = [
  '📃 작은 본문  ・  p small',
  '📃 일반적인 본문  ・  p',
  '🔈 작은 제목  ・  h4',
  '🔉 일반적인 제목  ・  h3',
  '🔊 큰 제목  ・  h2',
  '🔊 가장 큰 제목  ・  h1',
  '🔗 링크  ・  Link',
] as const;
const bulletTypeLabels = [
  '1️⃣ 일반적인 넘버링  ・  ol',
  '1️⃣ 작은 넘버링  ・  ol small',
  '⏺ 일반적인 불렛  ・  ul',
  '⏺ 작은 불렛  ・  ul small',
] as const;
const indentationLabels = ['없음', '1단계', '2단계'] as const;

type TypeLabel = typeof typeLabels[number];
type TextTypeLabel = typeof textTypeLabels[number];
type BulletTypeLabel = typeof bulletTypeLabels[number];
type IndentationLevelLabel = typeof indentationLabels[number];

const textComponentByControlLabel: Record<TextTypeLabel, JSX.Element> = {
  '📃 작은 본문  ・  p small': <TDSPostParagraph small />,
  '📃 일반적인 본문  ・  p': <TDSPostParagraph />,
  '🔈 작은 제목  ・  h4': <TDSPostH4 />,
  '🔉 일반적인 제목  ・  h3': <TDSPostH3 />,
  '🔊 큰 제목  ・  h2': <TDSPostH2 />,
  '🔊 가장 큰 제목  ・  h1': <TDSPostH1 />,
  '🔗 링크  ・  Link': <TDSPostLink href="" />,
};

const textComponentTypeNameByControlLabel: Record<TextTypeLabel, string> = {
  '📃 작은 본문  ・  p small': 'paragraph small',
  '📃 일반적인 본문  ・  p': 'paragraph',
  '🔈 작은 제목  ・  h4': 'h4',
  '🔉 일반적인 제목  ・  h3': 'h3',
  '🔊 큰 제목  ・  h2': 'h2',
  '🔊 가장 큰 제목  ・  h1': 'h1',
  '🔗 링크  ・  Link': 'link',
};

const bulletListComponentByControlLabel: Record<BulletTypeLabel, JSX.Element> = {
  '1️⃣ 일반적인 넘버링  ・  ol': <TDSPostOl />,
  '1️⃣ 작은 넘버링  ・  ol small': <TDSPostOl small />,
  '⏺ 일반적인 불렛  ・  ul': <TDSPostUl />,
  '⏺ 작은 불렛  ・  ul small': <TDSPostUl small />,
};

const bulletListComponentTypeNameByControlLabel: Record<BulletTypeLabel, string> = {
  '1️⃣ 일반적인 넘버링  ・  ol': 'ol',
  '1️⃣ 작은 넘버링  ・  ol small': 'ol small',
  '⏺ 일반적인 불렛  ・  ul': 'ul',
  '⏺ 작은 불렛  ・  ul small': 'ul small',
};

const indentationPaddingByControlLabel: Record<IndentationLevelLabel, string> = {
  없음: '0',
  '1단계': '24px',
  '2단계': '48px',
};

interface Props {
  text: string;
  type: TypeLabel;
  textType: TextTypeLabel;
  bulletType: BulletTypeLabel;
  bulletStartIndex: number;
  indentationLevel: IndentationLevelLabel;
}

function getTextComponent({ text, textType }: Pick<Props, 'text' | 'textType'>) {
  return React.cloneElement(
    textComponentByControlLabel[textType],
    { style: { whiteSpace: 'pre-wrap' } },
    text.split('\n').map((textToken, index, array) => (
      <React.Fragment key={index}>
        <span>{textToken}</span>
        {index < array.length - 1 && <br />}
      </React.Fragment>
    ))
  );
}

function getBulletListComponent({
  text,
  bulletType,
  bulletStartIndex,
  indentationLevel,
}: Pick<Props, 'text' | 'bulletType' | 'bulletStartIndex' | 'indentationLevel'>) {
  return React.cloneElement(
    bulletListComponentByControlLabel[bulletType],
    {
      style: {
        counterReset: `post-list ${bulletStartIndex - 1}`,
        paddingBottom: 8,
        marginLeft: indentationPaddingByControlLabel[indentationLevel],
      },
    },
    text.split('\n').map((token, index) => <TDSPostLi key={index}>{token ? token : ' '}</TDSPostLi>)
  );
}

export function Post(props: Props) {
  return (
    <TDSComponent
      name="Post"
      summary={{
        type:
          props.type === '일반 텍스트'
            ? textComponentTypeNameByControlLabel[props.textType]
            : bulletListComponentTypeNameByControlLabel[props.bulletType],
        text: props.text,
        indentation:
          props.indentationLevel !== '없음' ? indentationPaddingByControlLabel[props.indentationLevel] : undefined,
      }}
    >
      {props.type === '일반 텍스트' ? getTextComponent(props) : getBulletListComponent(props)}
    </TDSComponent>
  );
}

addPropertyControls(Post, {
  type: {
    title: '종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: typeLabels as any,
    defaultValue: typeLabels[0],
  },
  textType: {
    title: '↳ 유형',
    type: ControlType.Enum,
    options: textTypeLabels as any,
    defaultValue: textTypeLabels[4],
    hidden(props) {
      return props.type !== '일반 텍스트';
    },
  },
  bulletType: {
    title: '↳ 유형',
    type: ControlType.Enum,
    options: bulletTypeLabels as any,
    defaultValue: bulletTypeLabels[0],
    hidden(props) {
      return props.type !== '넘버, 불릿';
    },
  },
  text: {
    title: '↳ 텍스트',
    type: ControlType.String,
    displayTextArea: true,
    defaultValue: '동해물과\n백두산이\n마르고 닳도록',
  },
  bulletStartIndex: {
    title: '시작 숫자',
    type: ControlType.Number,
    displayStepper: true,
    min: 1,
    max: 15,
    defaultValue: 1,
    hidden(props) {
      return (
        props.type !== '넘버, 불릿' ||
        !(props.bulletType === '1️⃣ 일반적인 넘버링  ・  ol' || props.bulletType === '1️⃣ 작은 넘버링  ・  ol small')
      );
    },
  },
  indentationLevel: {
    title: '들여쓰기',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: indentationLabels as any,
    defaultValue: indentationLabels[0],
    hidden(props) {
      return props.type !== '넘버, 불릿';
    },
  },
});

(Post as any).defaultProps = {
  width: 375,
  height: 133,
};

Post.displayName = makeComponentDisplayName('Post', '포스트');
