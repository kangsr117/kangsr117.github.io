import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import {
  default as TDSAmountTop,
  Props as TDSAmountTopProps,
} from '../@tossteam/tds-web/react/components/AmountTop/AmountTop';
import { Style } from '../@tossteam/tds-web/react/components/Button/Button';
import { commaizeNumber } from '../@tossteam/tds-web/react/utils/commaize';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const rightButtonLables = ['없음', '있음'] as const;
const subtitleStyleLables = ['일반', '🚧 밑줄'] as const;
const priceInputTypeLabels = ['슬라이더', '직접입력'] as const;
const rightButtonStyleLables = ['Fill', 'Weak'] as const;

type RightButtonLabel = typeof rightButtonLables[number];
type SubtitleStyleLabel = typeof subtitleStyleLables[number];
type PriceInputTypeLabel = typeof priceInputTypeLabels[number];
type RightButtonStyleLabel = typeof rightButtonStyleLables[number];

const rightButtonStyleByControlLabel: {
  [key in RightButtonStyleLabel]: Style;
} = {
  Fill: 'fill',
  Weak: 'weak',
};

interface Props {
  subtitle: string;
  subtitleStyle: SubtitleStyleLabel;
  priceInputType: PriceInputTypeLabel;
  sliderPrice: number;
  customPrice: string;
  suffix: string;
  rightButton: RightButtonLabel;
  rightButtonText: string;
  rightButtonStyle: RightButtonStyleLabel;

  onSubtitleClick?: () => void;
  onRightButtonClick?: () => void;
}

export function AmountTop(props: Props) {
  const {
    priceInputType,
    sliderPrice,
    customPrice,
    suffix,
    subtitle,
    rightButton,
    rightButtonText,
    rightButtonStyle,
    onSubtitleClick,
    onRightButtonClick,
  } = useFilteringEventHandlersInInspector(props);

  const componentProps: TDSAmountTopProps = {
    title: `${commaizeNumber(priceInputType === '슬라이더' ? sliderPrice : customPrice)} ${suffix}`,
    subtitle,
    rightButton:
      rightButton === '있음'
        ? {
            text: rightButtonText,
            style: rightButtonStyleByControlLabel[rightButtonStyle],
            onClick: onRightButtonClick,
          }
        : undefined,
  };

  return (
    <TDSComponent
      name="AmountTop"
      summary={{
        title: componentProps.title,
        subtitle,
        button: componentProps.rightButton,
      }}
    >
      <TDSAmountTop {...componentProps} />
    </TDSComponent>
  );
}

addPropertyControls(AmountTop, {
  subtitle: {
    title: '✏️ 보조 텍스트',
    type: ControlType.String,
    defaultValue: '텍스트를 적어주세요',
  },
  subtitleStyle: {
    title: '↳ 종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: subtitleStyleLables as any,
    defaultValue: '일반',
  },
  priceInputType: {
    title: '💰 금액',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: priceInputTypeLabels as any,
    defaultValue: priceInputTypeLabels[0],
  },
  sliderPrice: {
    title: '↳ 금액 조절',
    type: ControlType.Number,
    min: 0,
    max: 3000000,
    defaultValue: 30000,
    hidden(props) {
      return props.priceInputType !== '슬라이더';
    },
  },
  customPrice: {
    title: '↳ 직접 입력',
    type: ControlType.String,
    defaultValue: '30000',
    hidden(props) {
      return props.priceInputType !== '직접입력';
    },
  },
  suffix: {
    title: '↳ 단위',
    type: ControlType.String,
    defaultValue: '원',
  },
  rightButton: {
    title: '➡️ 우측 버튼',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: rightButtonLables as any,
    defaultValue: '있음',
  },
  rightButtonText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '송금',
    hidden(props) {
      return props.rightButton === '없음';
    },
  },
  rightButtonStyle: {
    title: '↳ 종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: rightButtonStyleLables as any,
    defaultValue: '있음',
    hidden(props) {
      return props.rightButton === '없음';
    },
  },
  onSubtitleClick: {
    type: ControlType.EventHandler,
  },
  onRightButtonClick: {
    type: ControlType.EventHandler,
  },
});

(AmountTop as any).defaultProps = {
  width: 375,
  height: 174,
};

AmountTop.displayName = makeComponentDisplayName('AmountTop', '어마운트탑');
