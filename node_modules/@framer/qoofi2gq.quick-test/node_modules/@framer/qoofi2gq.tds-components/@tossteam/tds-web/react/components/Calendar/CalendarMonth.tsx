import { format, isSameDay, isToday } from "date-fns";
import * as React from "react";
import { ComponentProps, useCallback, useMemo } from "react";
import getCalendarMonthWeeks from "../../utils/getCalendarMonthWeeks";
import Top03 from "../Top/Top03";
import CalendarDay from "./CalendarDay";
import CalendarWeek from "./CalendarWeek";
import CalendarModifier from "./models/CalendarModifier";
import CalendarModifierSet from "./models/CalendarModifierSet";

type CalendarDayProps = ComponentProps<typeof CalendarDay>;

export interface Props {
  month: Date;
  focusedDay?: Date;
  dayAriaLabelFormat?: string;
  onDayClick?: CalendarDayProps["onDayClick"];
  modifiers?: CalendarModifierSet;
}

function CalendarMonth({
  month,
  focusedDay,
  dayAriaLabelFormat,
  onDayClick,
  modifiers = {},
}: Props) {
  const weeks = useMemo(() => getCalendarMonthWeeks(month), [month]);
  const monthTitle = useMemo(() => format(month, "yyyy.MM"), [month]);

  const getTabIndexForDay = useCallback(
    (date: Date) => {
      return focusedDay !== undefined && isSameDay(focusedDay, date) ? 0 : -1;
    },
    [focusedDay]
  );

  return (
    <div className="calendar-month">
      <table role="presentation" className="calendar-month__table">
        <thead>
          <tr>
            <td>
              <Top03 title={monthTitle} />
            </td>
          </tr>
        </thead>
        <tbody>
          {weeks.map((week, i) => (
            <CalendarWeek key={i}>
              {week.map(({ day, isOutsideDay }, dayOfWeek) => (
                <CalendarDay
                  key={dayOfWeek}
                  day={day}
                  shouldDisplayDot={isToday(day)}
                  isEmptyCell={isOutsideDay}
                  ariaLabelFormat={dayAriaLabelFormat}
                  tabIndex={getTabIndexForDay(day)}
                  onDayClick={onDayClick}
                  {...modifiersToProps(modifiers, {
                    date: day,
                    isOutsideDay,
                    thisMonth: month,
                  })}
                />
              ))}
            </CalendarWeek>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default React.memo(CalendarMonth);

type DayPropsToModify =
  | "isSelectedStart"
  | "isSelectedEnd"
  | "isInSelectedRange"
  | "isDisabled"
  | "isSelected";
type ModifierToProps = Extract<CalendarModifier, DayPropsToModify>;

const modifierPropNameMap: Record<CalendarModifier, keyof ModifierToProps> = {
  "in-selected-range": "isInSelectedRange",
  "selected-start": "isSelectedStart",
  "selected-end": "isSelectedEnd",
  disabled: "isDisabled",
  selected: "isSelected",
};

function modifiersToProps(
  modifierSet: CalendarModifierSet,
  params: { date: Date; thisMonth: Date; isOutsideDay: boolean }
): Pick<CalendarDayProps, DayPropsToModify> {
  const props: any = {};
  const modifiers = Object.keys(modifierSet) as CalendarModifier[];

  for (const modifier of modifiers) {
    const fn = modifierSet[modifier];
    props[modifierPropNameMap[modifier]] =
      fn !== undefined ? fn(params) : undefined;
  }

  return props;
}
