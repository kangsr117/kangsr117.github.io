import classNames from 'classnames';
import * as React from 'react';

import Without from '../../types/Without';
import generateID from '../../utils/generateID';
import { Icon } from '../Icon';

export interface Props {
  /**
   * 컴포넌트의 root element(`li`)에 추가되는 className입니다.
   */
  className?: string;
  /**
   * @default false
   */
  initialOpened?: boolean;
  /**
   * Props로 열림/닫힘을 제어하기 위해 사용됩니다.
   */
  isOpened?: boolean;
  onOpen?: () => void;
  onClose?: () => void;
  /**
   * 패널의 헤더 영역에 보일 타이틀 입니다.
   */
  title: React.ReactNode;
  /**
   * 타이틀 옆에 "Q"를 표시할지 여부입니다.
   * @default false
   */
  showQ?: boolean;
  /**
   * `li` element의 html 기본 attributes를 지정합니다.
   */
  liAttributes?: Without<React.LiHTMLAttributes<HTMLLIElement>, keyof Props>;
  headerId?: string;
  contentId?: string;
}

interface State {
  isOpened: boolean;
  headerUniqueId?: string;
  contentUniqueId?: string;
}

/***
 * TODO(@seokju-na):
 *  ListRow 인터페이스 변경 이후에 BoardRow의 최상단 컨테이너 컴포넌트를
 *  ListRow로 변경해야 합니다.
 *  변경되는 인터페이스는 다음 링크를 참조해 주시길 바랍니다.
 *    https://tossteam.slack.com/archives/C83Q0T5U1/p1551691289042100
 */
export default class BoardRow extends React.PureComponent<Props, State> {
  public static defaultProps: Partial<Props> = {
    initialOpened: false,
    showQ: false,
  };

  public state: State = {
    isOpened: Boolean(this.props.initialOpened),
    headerUniqueId: undefined,
    contentUniqueId: undefined,
  };

  public componentDidMount(): void {
    this.setState({
      headerUniqueId: generateID('board-row-header-'),
      contentUniqueId: generateID('board-row-content-'),
    });
  }

  public render() {
    const { className, title, children, showQ, liAttributes } = this.props;

    return (
      <li
        className={classNames('board-row', { 'board-row--expanded': this.isExpanded }, className)}
        {...liAttributes}
      >
        <div
          id={this.headerId}
          role="button"
          tabIndex={0}
          aria-controls={this.contentId}
          aria-expanded={this.isExpanded}
          onClick={this.handleHeaderClick}
          className="board-row__header has-hairline-after has-hairline-after--padding24"
        >
          <div className={classNames('board-row__title', 'typography-t5')}>
            {Boolean(showQ) ? <span className="board-row__q typography-st8">Q</span> : null}
            {title}
          </div>
          <Icon
            className="board-row__indicator"
            name={this.isExpanded ? 'arrow-downwards' : 'arrow-rightwards'}
          />
        </div>
        {/*
         Region Landmark Role 사용을 위해 "section" 태그를 이용하였습니다.
         참조: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Region_role#Prefer_HTML
         */}
        <section
          id={this.contentId}
          aria-labelledby={this.headerId}
          className={classNames('board-row__content', 'typography-t5')}
        >
          {children}
        </section>
      </li>
    );
  }

  private get headerId(): string {
    if (this.props.headerId !== undefined) {
      return this.props.headerId;
    }

    return this.state.headerUniqueId!;
  }

  private get contentId(): string {
    if (this.props.contentId !== undefined) {
      return this.props.contentId;
    }

    return this.state.contentUniqueId!;
  }

  private get isExpanded(): boolean {
    if (this.props.isOpened !== undefined) {
      return this.props.isOpened;
    }

    return this.state.isOpened;
  }

  private handleHeaderClick = () => {
    const { onOpen, onClose } = this.props;
    const newOpenedState = !this.state.isOpened;

    this.setState({ isOpened: newOpenedState });

    if (onOpen !== undefined && newOpenedState) {
      onOpen();
    } else if (onClose !== undefined && !newOpenedState) {
      onClose();
    }
  };
}
