import { boolean } from "@storybook/addon-knobs";
import { storiesOf } from "@storybook/react";
import * as React from "react";
import { cloneElement, ReactElement, useEffect, useState } from "react";
import { useDialog } from "src/react";
import { Button } from "../../Button";
import Dialog from "../Dialog";
import Readme from "../README.md";

storiesOf("Dialog", module)
  .addParameters({ readme: { sidebar: Readme } })
  .add("Basic", () => {
    return (
      <WithButton>
        <Dialog open={false}>
          <Dialog.Title>연회비 정보</Dialog.Title>
          <Dialog.Text>
            대부분의 커스텀 다이얼로그는
            <br />
            베이직형을 권장합니다
          </Dialog.Text>
        </Dialog>
      </WithButton>
    );
  })
  .add("With image", () => {
    return (
      <WithButton>
        <Dialog
          open={false}
          textAlign="center"
          buttons={
            <>
              <Dialog.Button style="weak">취소</Dialog.Button>
              <Dialog.Button>확인</Dialog.Button>
            </>
          }
        >
          <Dialog.Image
            src="https://static.toss.im/assets/apt-market-price/loan-consult.png"
            alt=""
            aria-hidden="true"
          />
          <Dialog.Title>연회비 정보</Dialog.Title>
          <Dialog.Text>
            대부분의 커스텀 다이얼로그는
            <br />
            베이직형을 권장합니다
          </Dialog.Text>
        </Dialog>
      </WithButton>
    );
  })
  .add("With Icon", () => {
    return (
      <WithButton>
        <Dialog
          open={false}
          textAlign="center"
          buttons={
            <>
              <Dialog.Button style="weak">취소</Dialog.Button>
              <Dialog.Button>확인</Dialog.Button>
            </>
          }
        >
          <Dialog.Icon name="success-color" />
          <Dialog.Title>신청이 완료되었습니다</Dialog.Title>
          <Dialog.Text>최대한 빠른시간 안에 연락드리겠습니다.</Dialog.Text>
        </Dialog>
      </WithButton>
    );
  })
  .add('useDialog - "closeOnDestroy" 옵션', () => {
    const open = boolean("마운트/언마운트", false);
    const closeOnDestroy = boolean('"closeOnDestroy" 옵션', true);

    return (
      <>
        Knobs 참조
        {open ? <CloseOnDestroy closeOnDestroy={closeOnDestroy} /> : null}
      </>
    );
  });

function WithButton({ children }: { children: ReactElement }) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <>
      <Button
        onClick={() => {
          setIsOpen(true);
        }}
      >
        다이얼로그 열기
      </Button>
      {cloneElement(children, {
        open: isOpen,
        onClose: () => {
          setIsOpen(false);
        },
      })}
    </>
  );
}

function CloseOnDestroy({ closeOnDestroy }: { closeOnDestroy: boolean }) {
  const { openAlert } = useDialog({ closeOnDestroy });

  useEffect(() => {
    openAlert({
      title: "Hello",
      description: "World",
    });
  }, [openAlert]);

  return <></>;
}
