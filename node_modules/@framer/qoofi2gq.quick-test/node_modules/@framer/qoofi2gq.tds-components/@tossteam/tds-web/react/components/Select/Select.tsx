import classnames from "classnames";
import * as React from "react";
import { forwardRef, useContext, useEffect, useState } from "react";
import { Context as FormGroupContext } from "../Form/FormGroup";
import { Icon } from "../Icon";
import ResizedMask from "../ResizedMask";

interface ExtraProps {
  /**
   * 에러 상태를 표시합니다.
   */
  hasError?: boolean;

  /**
   * @deprecated since version 7.0.2
   *
   * `hasError` 를 사용해주세요.
   */
  error?: boolean;

  leftIcon?: string;

  // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682
  // NOTE: 하위호환성을 위해 추가합니다.
  onChange?: (e: React.ChangeEvent<HTMLSelectElement>) => void;
}

type SelectElementProps = React.HTMLProps<HTMLSelectElement>;

// Note: SelectElementProps의 키와 겹칠 경우 Union Type이 되는 것을 막기 위해 Omit합니다.
export type Props = Omit<SelectElementProps, keyof ExtraProps> & ExtraProps;

const Select = forwardRef<HTMLSelectElement, Props>(
  (
    {
      className,
      children,
      autoFocus,
      disabled,
      name,
      error,
      hasError = error,
      placeholder,
      value,
      leftIcon,
      onChange,
      ...selectAttrs
    },
    ref
  ) => {
    const formGroupContext = useContext(FormGroupContext);
    const [innerValue, setInnerValue] = useState(value);

    useEffect(() => {
      setInnerValue(value);
    }, [value]);

    return (
      <ResizedMask radius={14}>
        <div
          className={classnames(
            "text-field",
            "select",
            { "form-control": formGroupContext.isInForm },
            { "text-field--disabled": disabled },
            { "text-field--error": hasError ?? formGroupContext.hasError },
            { "select--has-left-icon": leftIcon != null },
            "font-size--16",
            className
          )}
        >
          {leftIcon !== undefined ? (
            <Icon className="select__left-icon" name={leftIcon} size={24} />
          ) : null}
          <select
            className={classnames("select__body", "font-size--16", {
              "select__body--is-showing-placeholder":
                innerValue === undefined && placeholder !== undefined,
            })}
            placeholder={placeholder}
            ref={ref}
            autoFocus={autoFocus}
            disabled={disabled}
            name={name}
            value={innerValue === undefined ? "" : value}
            onChange={(event) => {
              onChange?.(event);
              setInnerValue(event.target.value);
            }}
            {...selectAttrs}
          >
            {placeholder !== undefined ? (
              <option value="" hidden={true}>
                {placeholder}
              </option>
            ) : null}
            {children}
          </select>
          <Icon className="select__arrow" name="arrow-downwards" size={24} />
          <span className="select__bottom-line" />
        </div>
      </ResizedMask>
    );
  }
);

export default Select;
