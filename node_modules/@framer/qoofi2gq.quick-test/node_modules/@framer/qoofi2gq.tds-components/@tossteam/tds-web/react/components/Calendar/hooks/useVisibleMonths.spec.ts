import { act, renderHook } from '@testing-library/react-hooks';
import { isSameMonth } from 'date-fns';

import useVisibleMonths from './useVisibleMonths';

describe('Calendar.hooks.useVisibleMonths', () => {
  function expectMonths(months: Date[], expectation: Array<[number, number]>) {
    expect(months.length).toEqual(expectation.length);

    for (let i = 0; i < months.length; i += 1) {
      const [year, month] = expectation[i];
      expect(isSameMonth(months[i], new Date(year, month))).toBe(true);
    }
  }

  test('initialMonth: 2019.7, maxDate: 2019.9, pageSize: 5 => 2,3,4,5,6,7,8,9 달력만 불러옵니다.', () => {
    const { result } = renderHook(() =>
      useVisibleMonths(new Date(2019, 6), { pageSize: 5, maxMonth: new Date(2019, 8) })
    );

    const [months] = result.current;

    expectMonths(months, [
      [2019, 1],
      [2019, 2],
      [2019, 3],
      [2019, 4],
      [2019, 5],
      [2019, 6],
      [2019, 7],
      [2019, 8],
    ]);
  });

  test('initialMonth: 2019.11, pageSize: 3 => 2019.8,9,10,11,12, 2020.1,2 달력을 불러옵니다.', () => {
    const { result } = renderHook(() => useVisibleMonths(new Date(2019, 10), { pageSize: 3 }));

    const [months] = result.current;

    expectMonths(months, [
      [2019, 7],
      [2019, 8],
      [2019, 9],
      [2019, 10],
      [2019, 11],
      [2020, 0],
      [2020, 1],
    ]);
  });

  test('이전 달력을 더 불러올 수 있다 (1)', () => {
    const { result } = renderHook(() =>
      useVisibleMonths(new Date(2019, 3), {
        pageSize: 2,
        minMonth: new Date(2019, 0),
      })
    );

    const [prevMonths] = result.current;
    expectMonths(prevMonths, [
      [2019, 1],
      [2019, 2],
      [2019, 3],
      [2019, 4],
      [2019, 5],
    ]);

    act(() => {
      const [, addPrevMonths] = result.current;
      addPrevMonths();
    });

    const [nextMonths] = result.current;
    expectMonths(nextMonths, [
      [2019, 0],
      [2019, 1],
      [2019, 2],
      [2019, 3],
      [2019, 4],
      [2019, 5],
    ]);
  });

  test('다음 달력을 더 불러올 수 있다', () => {
    const { result } = renderHook(() =>
      useVisibleMonths(new Date(2019, 3), {
        pageSize: 2,
        maxMonth: new Date(2019, 6),
      })
    );

    const [prevMonths] = result.current;
    expectMonths(prevMonths, [
      [2019, 1],
      [2019, 2],
      [2019, 3],
      [2019, 4],
      [2019, 5],
    ]);

    act(() => {
      const [, , addNextMonths] = result.current;
      addNextMonths();
    });

    const [nextMonths] = result.current;
    expectMonths(nextMonths, [
      [2019, 1],
      [2019, 2],
      [2019, 3],
      [2019, 4],
      [2019, 5],
      [2019, 6],
    ]);
  });
});
