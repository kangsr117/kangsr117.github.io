import { useEffect, useMemo, useRef } from 'react';

import generateID from './generateID';

interface KeyframeSet {
  offset: string | number;
  css: { [key: string]: string };
}

interface KeyframesAnimationOptions {
  /** @default 1000 */
  duration?: number;
  /** @default linear */
  easing?: string;
  /** @default Number.POSITIVE_INFINITY */
  iteration?: number;
  delay?: number;
}

export function useKeyframesAnimation<T extends HTMLElement = HTMLElement>(
  keyframeSets: KeyframeSet[],
  options: KeyframesAnimationOptions = {}
) {
  const {
    duration = 1000,
    easing = 'linear',
    iteration = Number.POSITIVE_INFINITY,
    delay,
  } = options;

  const styleId = useMemo(() => generateID('keyframe-style-'), []);
  const animationName = useMemo(() => generateID('animation-'), []);
  const ref = useRef<T>(null);

  useEffect(() => {
    if (ref.current == null) {
      return;
    }

    const style = document.createElement('style');
    style.id = styleId;
    style.innerHTML = parseKeyframeSetToCss(animationName, keyframeSets);

    document.body?.appendChild?.(style);

    const elem = ref.current;
    elem.style.animationName = animationName;
    elem.style.animationDuration = `${duration}ms`;
    elem.style.animationDelay = delay ? `${delay}ms` : '';
    elem.style.animationIterationCount =
      iteration === Number.POSITIVE_INFINITY ? 'infinite' : `${iteration}`;
    elem.style.animationTimingFunction = easing;

    return () => {
      style.parentNode?.removeChild(style);

      if (elem) {
        elem.style.animationName = '';
        elem.style.animationDuration = '';
        elem.style.animationDelay = '';
        elem.style.animationIterationCount = '';
        elem.style.animationTimingFunction = '';
      }
    };
  }, [styleId, animationName, keyframeSets, iteration, delay, duration, easing]);

  return ref;
}

const parseKeyframeSetToCss = (animationName: string, keyframeSets: KeyframeSet[]) => `
  @keyframes ${animationName} {
    ${keyframeSets
      .map(
        ({ offset, css }) => `
      ${typeof offset === 'number' ? `${offset * 100}%` : offset} {
        ${Object.keys(css)
          .map(x => `${x}: ${css[x]}`)
          .join(';')}
      }
    `
      )
      .join('\n')}.
  }
`;
