import classnames from "classnames";
import * as React from "react";
import Without from "../../types/Without";
import delay from "../../utils/delay";
import { Icon } from "../Icon";
import { Typography } from "../Text";
import ListRowIcon from "./ListRowIcon";
import ListRowImage from "./ListRowImage";
import ListRowLeftText from "./ListRowLeftText";
import ListRowTexts from "./ListRowTexts";

const ListRowTypography = {
  Large: Typography.T4 as typeof Typography["T4"],
  Medium: Typography.T5 as typeof Typography["T5"],
  Adjust: Typography.T6 as typeof Typography["T6"],
  Small: Typography.T7 as typeof Typography["T7"],
};

interface BaseProps {
  /**
   * 컴포넌트의 root element(`li`)에 추가되는 className입니다.
   */
  className?: string;
  /**
   * 상단 구분선을 설정합니다.
   */
  border?: "indented" | "none";
  disabled?: boolean;
  disabledStyle?: "type1" | "type2";
  verticalPadding?: "extraSmall" | "small" | "medium" | "large";
  left?: React.ReactNode;
  leftAlignment?: "top" | "center";
  contents?: React.ReactNode;
  right?: React.ReactNode;
  withArrow?: boolean;
  onClick?: (event: React.MouseEvent<HTMLLIElement>) => void;

  /**
   * `li` element의 html 기본 attributes를 지정합니다.
   */
  liAttributes?: Without<
    React.LiHTMLAttributes<HTMLLIElement>,
    keyof BaseProps
  >;
}

export type Props<
  Element extends keyof JSX.IntrinsicElements = "li"
> = BaseProps & {
  as?: Element;
} & Omit<JSX.IntrinsicElements[Element], keyof BaseProps>;

interface State {
  flickering: "active" | "leave" | "none";
}

export default class ListRow extends React.PureComponent<Props, State> {
  public static Icon = ListRowIcon;
  public static Image = ListRowImage;
  public static Texts = ListRowTexts;
  public static LeftText = ListRowLeftText;

  public static Typography = ListRowTypography;

  public state: State = {
    flickering: "none",
  };

  public render() {
    const {
      as: Component = "li",
      className,
      border,
      disabled,
      disabledStyle,
      verticalPadding,
      left,
      leftAlignment = "center",
      right,
      contents,
      withArrow = false,
      onClick,
      liAttributes,
      onTouchStart,
      ...restProps
    } = this.props;
    const { flickering } = this.state;

    return (
      <Component
        className={classnames(
          "list-row",
          {
            [`list-row--vertical-padding-${verticalPadding}`]:
              verticalPadding !== undefined,
            [`list-row--disabled-style-${disabledStyle}`]: disabledStyle,
            [`list-row--disabled`]: disabled,
            [`list-row--has-action`]: onClick !== undefined,
            [`list-row--flickering-${flickering}`]: flickering !== "none",
            [`has-hairline-before has-hairline-before--padding24`]:
              border === "indented",
          },
          className
        )}
        onClick={onClick}
        {...liAttributes}
        {...restProps}
        onTouchStart={onTouchStart ?? liAttributes?.onTouchStart ?? noop}
      >
        <div
          className={classnames("list-row__left", {
            "list-row__left--align-top": leftAlignment === "top",
          })}
        >
          {left}
        </div>

        <div className="list-row__content-and-right-container">
          <div className="list-row__content">{contents}</div>
          <div className="list-row__right">{right}</div>
        </div>

        {withArrow ? (
          <Icon className="list-row__arrow__icon" name="arrow-rightwards" />
        ) : null}

        {disabled ? <div className="list-row__disabled-1" /> : null}
        {disabled ? <div className="list-row__disabled-2" /> : null}
        {flickering !== "none" ? (
          <div className="list-row__flickering" />
        ) : null}
      </Component>
    );
  }

  public async flicker() {
    if (this.state.flickering !== "none") {
      return;
    }

    this.setState({ flickering: "active" });
    await delay(400);
    this.setState({ flickering: "leave" });
    await delay(600 + 100);
    this.setState({ flickering: "none" });
  }
}

function noop() {}
