import classnames from "classnames";
import * as React from "react";
import {
  ChangeEvent,
  forwardRef,
  ReactNode,
  Ref,
  useCallback,
  useEffect,
  useState,
} from "react";
import generateID from "../../utils/generateID";
import CheckboxIcon from "./CheckboxIcon";

type CheckboxType =
  | "circle-big-primary"
  | "circle-big-secondary"
  | "circle-small-primary"
  | "circle-small-secondary"
  | "primary"
  | "secondary";

type LegacyCheckboxType = "big" | "medium" | "select" | "small";

type EtcCheckboxType = "star";

export interface Props {
  id?: string;
  name?: string;
  /** @default 'circle-big-primary' */
  type?: CheckboxType | LegacyCheckboxType | EtcCheckboxType;
  /** @default 'checkbox' */
  inputType?: "checkbox" | "radio";
  /** @deprecated */
  label?: ReactNode;
  children?: ReactNode;
  disabled?: boolean;
  checked?: boolean;
  defaultChecked?: boolean;
  value?: string;
  className?: string;
  onAnimationDone?(): void;
  onChange?(event: ChangeEvent<HTMLInputElement>, checked: boolean): void;
}

const isLegacyCheckboxType = (type: Props["type"]) =>
  type === "big" || type === "medium" || type === "select" || type === "small";

const ControlledCheckbox = forwardRef<HTMLInputElement, Props>(
  (
    {
      name,
      id = generateID("checkbox-"),
      inputType = "checkbox",
      label,
      children,
      checked = false,
      value,
      disabled,
      type = "circle-big-primary",
      className,
      onAnimationDone,
      onChange,
    },
    ref
  ) => {
    const [checkIconVariant, circleSize] = type.split("-").reverse() as [
      "primary" | "secondary",
      "big" | "small" | undefined
    ];

    const handleInputChange = useCallback(
      (event: ChangeEvent<HTMLInputElement>) => {
        onChange?.(event, event.target.checked);
      },
      [onChange]
    );

    useEffect(() => {
      if (isLegacyCheckboxType(type)) {
        // eslint-disable-next-line no-console
        console.warn(
          `[Checkbox] "${type}"은 레거시 입니다. 다른 type을 이용해주세요.`
        );
      }
    }, [type]);

    return (
      <div
        className={classnames("checkbox", "font-size--17", className, {
          [`checkbox--type-${type}`]: type,
          "checkbox--with-label": children ?? label,
        })}
      >
        <input
          ref={ref}
          className="checkbox__input"
          type={inputType}
          id={id}
          name={name}
          disabled={disabled}
          onChange={handleInputChange}
          checked={checked}
          value={value}
        />
        <label className="checkbox__label" htmlFor={id}>
          <CheckboxIcon
            checked={checked}
            type={checkIconVariant}
            circleSize={circleSize}
            onRest={onAnimationDone}
          />
          {children ?? label}
        </label>
      </div>
    );
  }
);

const UncontrolledCheckbox = forwardRef(
  (props: Props, ref: Ref<HTMLInputElement>) => {
    const [isChecked, setIsChecked] = useState(props.defaultChecked);

    return (
      <ControlledCheckbox
        ref={ref}
        {...props}
        checked={isChecked}
        onChange={(event) => {
          setIsChecked(event.target.checked);
          props.onChange?.(event, event.target.checked);
        }}
      />
    );
  }
);

export const Checkbox = forwardRef(
  (props: Props, ref: Ref<HTMLInputElement>) => {
    if (props.checked !== undefined) {
      return <ControlledCheckbox ref={ref} {...props} />;
    } else {
      return <UncontrolledCheckbox ref={ref} {...props} />;
    }
  }
);
