import * as React from 'react';
import { Children, cloneElement, ReactElement, useEffect, useRef, useState } from 'react';
import useResizeObserver from '../../hooks/useResizeObserver';

interface Rect {
  width: number;
  height: number;
}

interface Props {
  children: ReactElement;
  radius: number;
  onResize?: (rect: Rect) => void;
}

function ResizedMask({ children, radius, onResize }: Props) {
  // const id = useRef(generateID("resized-mask-"));
  const child = Children.only(children);
  const ref = useRef<HTMLDivElement | null>(null);
  const [rect, setRect] = useState<Rect | undefined>(undefined);

  useResizeObserver(ref, ({ clientWidth, clientHeight }) => {
    if (rect === undefined || rect.height !== clientHeight || rect.width !== clientWidth) {
      setRect({
        width: clientWidth,
        height: clientHeight,
      });
    }
  });

  useEffect(() => {
    if (rect === undefined) {
      return;
    }

    onResize?.(rect);
  }, [rect, onResize]);

  return (
    <>
      {cloneElement(child, {
        ref,
        style: {
          borderRadius: radius,
          // clipPath: radius > 0 ? `url(#${id.current})` : "none",
          ...child.props.style,
        },
      })}
      {/* {rect !== undefined && radius > 0 ? (
        <PortalConsumer>
          <BezierMask
            id={id.current}
            width={rect.width}
            height={rect.height}
            radius={radius}
          />
        </PortalConsumer>
      ) : null} */}
    </>
  );
}

export default ResizedMask;
