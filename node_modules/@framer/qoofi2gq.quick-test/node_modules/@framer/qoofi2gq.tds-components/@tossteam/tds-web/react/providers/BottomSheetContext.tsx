import * as React from "react";
import {
  Children,
  cloneElement,
  ComponentProps,
  createContext,
  ReactElement,
  ReactNode,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useReducer,
} from "react";
import BottomCTA from "../components/BottomCTA";
import BottomSheet from "../components/BottomSheet";
import { Button } from "../components/Button";
import { Top06 } from "../components/Top";

type BottomSheetOptions = Omit<ComponentProps<typeof BottomSheet>, "open">;

type OneButtonOptions = BottomSheetOptions & {
  button?: string | ReactElement;
};

type TwoButtonOptions = BottomSheetOptions & {
  leftButton?: string | ReactElement;
  rightButton?: string | ReactElement;
};

type TwoButtonSheetAction = "rightButtonClick" | "leftButtonClick" | "cancel";

interface BottomSheetContextOptions {
  open: (options: BottomSheetOptions) => void;
  openOneButtonSheet: (options: OneButtonOptions) => Promise<boolean>;
  openTwoButtonSheet: (
    options: TwoButtonOptions
  ) => Promise<TwoButtonSheetAction>;
  close: () => void;
}

const BottomSheetContext = createContext<BottomSheetContextOptions | undefined>(
  undefined
);

export function BottomSheetProvider({
  children: providerChildren,
}: {
  children: ReactNode;
}) {
  const [{ type, options }, dispatch] = useReducer(bottomSheetReducer, {
    type: "CLOSED",
  });

  const close = useCallback(() => {
    dispatch({ type: "CLOSE_BOTTOM_SHEET" });
  }, []);

  const open = useCallback((options: BottomSheetOptions) => {
    dispatch({
      type: "OPEN_BOTTOM_SHEET",
      options,
    });
  }, []);

  const openOneButtonSheet = useCallback(
    async ({ button = "확인", ...options }: OneButtonOptions) => {
      const result = await new Promise<boolean>((resolve) => {
        open({
          ...options,
          onClose: () => {
            resolve(false);
          },
          children: (
            <>
              <BottomSheetContent>{options.children}</BottomSheetContent>
              {typeof button === "string" ? (
                <BottomCTA.TypeA onClick={() => resolve(true)}>
                  {button}
                </BottomCTA.TypeA>
              ) : (
                <CaptureClick onClick={() => resolve(true)}>
                  {button}
                </CaptureClick>
              )}
            </>
          ),
        });
      });

      close();

      return result;
    },
    [close, open]
  );

  const openTwoButtonSheet = useCallback(
    async ({
      rightButton = "확인",
      leftButton = "취소",
      ...options
    }: TwoButtonOptions) => {
      const result = await new Promise<TwoButtonSheetAction>((resolve) => {
        open({
          ...options,
          onClose: () => {
            resolve("cancel");
          },
          children: (
            <>
              <BottomSheetContent>{options.children}</BottomSheetContent>
              <BottomCTA.TypeB
                leftButton={
                  typeof leftButton === "string" ? (
                    <Button
                      style="weak"
                      onClick={() => resolve("leftButtonClick")}
                    >
                      {leftButton}
                    </Button>
                  ) : (
                    <CaptureClick onClick={() => resolve("leftButtonClick")}>
                      {leftButton}
                    </CaptureClick>
                  )
                }
                rightButton={
                  typeof rightButton === "string" ? (
                    <Button onClick={() => resolve("rightButtonClick")}>
                      {rightButton}
                    </Button>
                  ) : (
                    <CaptureClick onClick={() => resolve("rightButtonClick")}>
                      {rightButton}
                    </CaptureClick>
                  )
                }
              />
            </>
          ),
        });
      });

      close();

      return result;
    },
    [close, open]
  );

  const handleBottomSheetExit = useCallback(() => {
    dispatch({
      type: "BOTTOM_SHEET_EXITED",
    });
  }, []);

  const controls = useMemo(() => {
    return { close, open, openTwoButtonSheet, openOneButtonSheet };
  }, [close, open, openOneButtonSheet, openTwoButtonSheet]);

  const { header, children } = options ?? {};

  return (
    <BottomSheetContext.Provider value={controls}>
      {providerChildren}
      <BottomSheet
        open={type === "OPEN"}
        header={header}
        onExited={handleBottomSheetExit}
        {...options}
      >
        {children}
      </BottomSheet>
    </BottomSheetContext.Provider>
  );
}

type BottomSheetState =
  | { type: "OPEN"; options: BottomSheetOptions }
  | { type: "CLOSING"; options: BottomSheetOptions }
  | { type: "CLOSED"; options?: undefined };
type BottomSheetAction =
  | { type: "OPEN_BOTTOM_SHEET"; options: BottomSheetOptions }
  | { type: "CLOSE_BOTTOM_SHEET" }
  | { type: "BOTTOM_SHEET_EXITED" };

function bottomSheetReducer(
  state: BottomSheetState,
  action: BottomSheetAction
): BottomSheetState {
  switch (state.type) {
    case "CLOSED": {
      switch (action.type) {
        case "OPEN_BOTTOM_SHEET":
          return {
            type: "OPEN",
            options: action.options,
          };
        default:
          return state;
      }
    }
    case "OPEN": {
      switch (action.type) {
        case "OPEN_BOTTOM_SHEET":
          return {
            type: "OPEN",
            options: action.options,
          };
        case "CLOSE_BOTTOM_SHEET":
          return {
            type: "CLOSING",
            options: state.options,
          };
        default:
          return state;
      }
    }
    case "CLOSING": {
      switch (action.type) {
        case "OPEN_BOTTOM_SHEET":
          return {
            type: "OPEN",
            options: action.options,
          };
        case "BOTTOM_SHEET_EXITED":
          return { type: "CLOSED" };
        default:
          return state;
      }
    }
  }
}

interface UseBottomSheetOptions {
  /** @default true */
  closeOnDestroy?: boolean;
}

export function useBottomSheet(options: UseBottomSheetOptions = {}) {
  const { closeOnDestroy = true } = options;
  const controls = useContext(BottomSheetContext);

  useEffect(
    () => () => {
      if (closeOnDestroy) {
        controls?.close();
      }
    },
    [closeOnDestroy, controls]
  );

  if (controls == null) {
    throw new Error("useBottomSheet는 BottomSheetContext 안에서 사용해주세요");
  }

  return controls;
}

function BottomSheetContent({ children }: { children: ReactNode }) {
  if (typeof children === "string") {
    return <Top06 topPadding={0}>{children}</Top06>;
  } else {
    return <>{children}</>;
  }
}

function CaptureClick({
  children,
  onClick,
}: {
  children: ReactElement;
  onClick: () => void;
}) {
  const child = Children.only(children);

  return cloneElement(child, {
    onClick: (...args: any[]) => {
      onClick();

      if (child.props && typeof child.props.onClick === "function") {
        child.props.onClick(...args);
      }
    },
  });
}
