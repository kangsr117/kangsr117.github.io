import { renderHook } from '@testing-library/react-hooks';

import normalizeCalendarDay from '../../../utils/normalizeCalendarDay';
import useRangePickModifiers from './useRangePickModifiers';

const month = (year: number, month: number) => new Date(year, month, 1);

describe('Calendar.hooks.useRangePickModifiers', () => {
  test('시작날짜인 경우 "selected-start" 변경값이 참이다.', () => {
    const startDate = new Date(2019, 6, 16);
    const { result } = renderHook(() => useRangePickModifiers(startDate, undefined));

    expect(result.current['selected-start']({ date: startDate })).toBe(true);
  });

  test('끝날짜인 경우 "selected-end" 변경값이 참이다.', () => {
    const endDate = new Date(2019, 6, 20);
    const { result } = renderHook(() => useRangePickModifiers(undefined, endDate));

    expect(result.current['selected-end']({ date: endDate })).toBe(true);
  });

  describe('시작날짜와 끝날짜 모두 있을때', () => {
    describe('캘린더 밖의 날짜인 경우', () => {
      test('1. 시작날짜와 끝날짜의 월이 같은 경우 "in-selected-range" 변경값은 항상 거짓이다.', () => {
        const startDate = new Date(2019, 6, 10);
        const endDate = new Date(2019, 6, 20);
        const month = new Date(2019, 6, 1);
        const { result } = renderHook(() => useRangePickModifiers(startDate, endDate));

        const modifier = result.current['in-selected-range'];

        const outsideDay1 = new Date(2019, 5, 31);
        const outsideDay2 = new Date(2019, 7, 1);

        expect(modifier({ date: outsideDay1, thisMonth: month, isOutsideDay: true })).toBe(false);
        expect(modifier({ date: outsideDay2, thisMonth: month, isOutsideDay: true })).toBe(false);
      });

      // 참고 이미지:
      // https://user-images.githubusercontent.com/13250888/62208853-f798c880-b3d2-11e9-8998-bda37e7fbe3e.png
      test(
        '1 외에.' +
          '밖의 날짜가 시작날짜와 동일한 월에 있는 경우, 시작날짜보다 이후의 날짜이면 "in-selected-range" 변경값이 참이다. ' +
          '또는, 밖의 날짜가 끝날자와 동일한 월에 있는 경우, 끝날짜보다 이전의 날짜이면 "in-selected-range" 변경값이 참이다. ' +
          '또는, 밖의 날짜가 시작날짜보다 이후, 끝날짜보다 이전의 월에 있는 경우 "in-selected-range" 변경값이 참이다.',
        () => {
          const startDate = new Date(2019, 6, 31);
          const endDate = new Date(2019, 9, 5);
          const { result } = renderHook(() => useRangePickModifiers(startDate, endDate));

          const modifier = result.current['in-selected-range'];

          // 7월 달력에 있는 6월 30일
          expect(
            modifier({
              date: new Date(2019, 5, 30),
              thisMonth: month(2019, 6),
              isOutsideDay: true,
            })
          ).toBe(false);

          // 7월 달력에 있는 8월 1일
          expect(
            modifier({
              date: new Date(2019, 7, 1),
              thisMonth: month(2019, 6),
              isOutsideDay: true,
            })
          ).toBe(true);

          // 8월 달력에 있는 7월 29일
          expect(
            modifier({
              date: new Date(2019, 6, 29),
              thisMonth: month(2019, 7),
              isOutsideDay: true,
            })
          ).toBe(true);

          // 9월 달력에 있는 10월 2일
          expect(
            modifier({
              date: new Date(2019, 9, 2),
              thisMonth: month(2019, 8),
              isOutsideDay: true,
            })
          ).toBe(true);

          // 10월 달력에 있는 11월 1일
          expect(
            modifier({
              date: new Date(2019, 10, 1),
              thisMonth: month(2019, 9),
              isOutsideDay: true,
            })
          ).toBe(false);
        }
      );

      test('1외에 다른 년도의 월은 선택되면 안된다.', () => {
        const startDate = new Date(2019, 11, 24);
        const endDate = new Date(2020, 1, 24);
        const { result } = renderHook(() => useRangePickModifiers(startDate, endDate));

        const modifier = result.current['in-selected-range'];

        // 2020년의 12월 달력에 있는 11월 30일
        expect(
          modifier({
            date: new Date(2020, 10, 30),
            thisMonth: month(2020, 11),
            isOutsideDay: true,
          })
        ).toBe(false);

        // 2020년 12월 달력에 있는 2021년 1월 1일
        expect(
          modifier({
            date: new Date(2021, 0, 1),
            thisMonth: month(2020, 11),
            isOutsideDay: true,
          })
        ).toBe(false);

        // 2021년 1월 달력에 있는 2020년 12월 31일
        expect(
          modifier({
            date: new Date(2020, 11, 31),
            thisMonth: month(2021, 0),
            isOutsideDay: true,
          })
        ).toBe(false);
      });

      test('2019년 10월 5일부터 11월 4일까지 선택하였을 때, 9월 캘린더에 있는 10월 5일이 선택범위 포함되면 안된다.', () => {
        const startDate = new Date(2019, 9, 5);
        const endDate = new Date(2019, 10, 4);
        const { result } = renderHook(() => useRangePickModifiers(startDate, endDate));

        const modifier = result.current['in-selected-range'];

        expect(
          modifier({
            date: new Date(2019, 9, 5),
            thisMonth: month(2019, 8),
            isOutsideDay: true,
          })
        ).toBe(false);
      });

      test('2019년 10월 5일부터 11월 4일까지 선택하였을 때, 11월 캘린더에 있는 10월 30일은 선택범위에 포함되어야 한다.', () => {
        const startDate = new Date(2019, 9, 5);
        const endDate = new Date(2019, 10, 4);
        const { result } = renderHook(() => useRangePickModifiers(startDate, endDate));

        const modifier = result.current['in-selected-range'];

        expect(
          modifier({
            date: new Date(2019, 9, 30),
            thisMonth: month(2019, 10),
            isOutsideDay: true,
          })
        ).toBe(true);
      });

      test('2019년 9월 27일부터 10월 27일까지 선택하였을 때, 11월 캘린더에 있는 10월 27일 선택범위에 포함되면 안된다.', () => {
        const startDate = new Date(2019, 8, 27);
        const endDate = new Date(2019, 9, 27);
        const { result } = renderHook(() => useRangePickModifiers(startDate, endDate));

        const modifier = result.current['in-selected-range'];

        expect(
          modifier({
            date: new Date(2019, 9, 27),
            thisMonth: month(2019, 10),
            isOutsideDay: true,
          })
        ).toBe(false);
      });

      test('2019년 8월 1일부터 2020년 8월 8일까지 선택하였을 때, 2020년 8월 캘린더에 있는 7월 31일은 선택범위에 포함되어야 한다.', () => {
        const startDate = new Date(2019, 7, 1);
        const endDate = new Date(2020, 7, 8);
        const { result } = renderHook(() => useRangePickModifiers(startDate, endDate));

        const modifier = result.current['in-selected-range'];

        expect(
          modifier({
            date: new Date(2020, 6, 31),
            thisMonth: month(2020, 7),
            isOutsideDay: true,
          })
        ).toBe(true);
      });
    });

    test('캘린더 안의 날짜인 경우, 시작날짜와 끝날짜 포함하여 범위 안의 날짜는 "in-selected-range" 변경값이 참이다.', () => {
      const startDate = normalizeCalendarDay(new Date(2019, 6, 3));
      const endDate = normalizeCalendarDay(new Date(2019, 7, 15));
      const { result } = renderHook(() => useRangePickModifiers(startDate, endDate));

      const modifier = result.current['in-selected-range'];

      // 시작날짜
      expect(modifier({ date: startDate })).toBe(true);
      // 끝날짜
      expect(modifier({ date: endDate })).toBe(true);
      // 범위안의 날짜
      expect(
        modifier({
          date: normalizeCalendarDay(new Date(2019, 6, 25)),
        })
      ).toBe(true);
      // 범위밖의 날짜
      expect(
        modifier({
          date: normalizeCalendarDay(new Date(2019, 6, 1)),
        })
      ).toBe(false);
    });
  });
});
