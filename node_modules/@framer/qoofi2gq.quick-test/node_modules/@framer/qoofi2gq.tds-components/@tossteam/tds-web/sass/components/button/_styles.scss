@import '../../common/mixins/interactions';

$button-transition-duration: 0.1s;
$button-transition: color $button-transition-duration ease-in-out,
  background-color $button-transition-duration ease-in-out,
  border-color $button-transition-duration ease-in-out,
  box-shadow $button-transition-duration ease-in-out;

//
// Base Styles
//
.button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  position: relative;
  font-weight: 600;
  -webkit-font-smoothing: antialiased;
  white-space: nowrap;
  user-select: none;
  border: 0 solid transparent;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  -webkit-appearance: none;
  transition: $button-transition;
  overflow: hidden;
  transform: translateZ(0);
  padding: 0;

  &:hover,
  &:focus {
    text-decoration: none;
  }

  &:focus {
    outline: none;
  }

  &:not(:disabled):not(.disabled) {
    cursor: pointer;
  }

  &:not(:disabled):not(.disabled):active {
    background-image: none;
  }

  &::after {
    content: ' ';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: transparent;
    transition: background-color $button-transition-duration ease-in-out;
  }

  color: $white;

  @include hover-active('&:not(:disabled):not(.disabled)') {
    &::after {
      background-color: $greyOpacity400;
    }
  }

  &.button--style-fill {
    &:disabled,
    &.disabled {
      opacity: 0.26;
    }

    @include hover-active('&:not(:disabled):not(.disabled)') {
      &::after {
        background-color: rgba(0, 0, 0, 0.26);
      }
    }
  }

  &.button--style-weak {
    &:disabled,
    &.disabled {
      .button__content {
        opacity: 0.38;
      }
    }

    @include hover-active('&:not(:disabled):not(.disabled)') {
      &::after {
        @include tdsVariable(background-color, tButtonPressedAfterBackground);
      }
    }
  }

  background-color: $blue500;

  &.button--style-weak {
    color: $blue700;
    @include tdsVariable(background-color, tPrimaryWeakButtonBackground);
    @include hover-active('&:not(:disabled):not(.disabled)') {
      @include tdsVariable(background-color, tPrimaryWeakButtonPressedBackground);
    }
  }
}

.button--type-danger {
  background-color: $red500;

  &.button--style-weak {
    color: $red500;
    @include tdsVariable(background-color, tDangerWeakButtonBackground);
    @include hover-active('&:not(:disabled):not(.disabled)') {
      @include tdsVariable(background-color, tDangerWeakButtonPressedBackground);
    }
  }
}

.button--type-dark {
  @include tdsVariable(background-color, tDarkFillButtonBackground);

  &.button--style-weak {
    @include adaptive(color, grey700);
    @include tdsVariable(background-color, tDarkWeakButtonBackground);
    @include hover-active('&:not(:disabled):not(.disabled)') {
      @include tdsVariable(background-color, tDarkWeakButtonPressedBackground);
    }
  }
}

.button--type-light {
  color: $blue900;
  background-color: $white;

  &.button--style-weak {
    color: $white;
    @include tdsVariable(background-color, tLightWeakButtonBackground);
    @include hover-active('&:not(:disabled):not(.disabled)') {
      @include tdsVariable(background-color, tLightWeakButtonPressedBackground);
    }
  }
}

.button--wrap {
  white-space: normal;
}

a.button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
}

a.button.disabled,
fieldset:disabled a.button {
  pointer-events: none;
}

.button__content {
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
}

//
// Button Sizes
//

@mixin button-size(
  $sizeName,
  $minWidth,
  $height,
  $maxHeight,
  $padding,
  $loaderSize,
  $loaderSpacing,
  $fallbackBorderRadius
) {
  .button--size-#{$sizeName} {
    border-radius: $fallbackBorderRadius;

    .button__content {
      min-width: $minWidth;
      height: $height;
      max-height: $maxHeight;
      padding: $padding;
    }

    .button__loader {
      $negativeLoaderMargin: #{strip-unit($loaderSize) / -2}px;
      margin: $negativeLoaderMargin $loaderSpacing $negativeLoaderMargin 0;

      .loader__animation {
        stroke: currentColor;
        width: $loaderSize;
        height: $loaderSize;
      }
    }

    &.button--wrap {
      > .button__content {
        height: auto;
      }
    }

    &:not(.button--wrap) {
      & > .button__content {
        padding-top: 0;
        padding-bottom: 0;
      }
    }
  }
}

@include button-size(
  $sizeName: 'big',
  $minWidth: 96px,
  $height: 56px,
  $maxHeight: 56px,
  $padding: 15px 16px,
  $loaderSize: 26px,
  $loaderSpacing: 8px,
  $fallbackBorderRadius: 12px
);

.button--size-big.button--display-block {
  & > .button__content {
    max-height: 108px;
  }

  &.button--android > .button__content {
    max-height: 98px;
  }
}

@include button-size(
  $sizeName: 'large',
  $minWidth: 80px,
  $height: calc(1em + 31px),
  $maxHeight: 56px,
  $padding: 12px 16px,
  $loaderSize: 24px,
  $loaderSpacing: 8px,
  $fallbackBorderRadius: 10px
);

.button--size-large.button--display-block > .button__content {
  max-height: 108px;
}

.button--size-large.button--android {
  & > .button__content {
    height: 48px;
  }

  &.button--display-block > .button__content {
    max-height: 86px;
  }
}

@include button-size(
  $sizeName: 'medium',
  $minWidth: 64px,
  $height: calc(1em + 23px),
  $maxHeight: 52px,
  $padding: 8px 16px,
  $loaderSize: 24px,
  $loaderSpacing: 8px,
  $fallbackBorderRadius: 7px
);

.button--size-medium.button--android > .button__content {
  max-height: 44px;
}

@include button-size(
  $sizeName: 'tiny',
  $minWidth: 48px,
  $height: calc(1em + 18px),
  $maxHeight: 48px,
  $padding: 6px 10px,
  $loaderSize: 20px,
  $loaderSpacing: 4px,
  $fallbackBorderRadius: 3px
);

.button--size-tiny.button--android > .button__content {
  max-height: 38px;
}

//
// Button Displays
//

.button--display-block {
  display: flex;
  width: 100%;
}

.button--display-full {
  display: flex;
  width: 100%;

  border-radius: 0;
  &.button--is-loading {
    display: flex;
  }
}
