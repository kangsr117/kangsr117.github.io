import { action } from '@storybook/addon-actions';
import { number } from '@storybook/addon-knobs';
import { storiesOf } from '@storybook/react';
import { colors } from '@tossteam/colors';
import * as React from 'react';
import { ReactNode, RefObject, useCallback, useEffect, useRef, useState } from 'react';
import { animationFrameScheduler, fromEvent } from 'rxjs';
import { map, observeOn, startWith } from 'rxjs/operators';
import { InfiniteScroll } from '../';


function useScrollDispatching(ref: RefObject<HTMLElement>, onScroll: (scrollTop: number) => void) {
  useEffect(() => {
    if (ref.current === null) {
      return;
    }

    const element = ref.current;
    const subscription = fromEvent(element, 'scroll')
      .pipe(
        observeOn(animationFrameScheduler),
        map(() => element.scrollTop),
        startWith(element.scrollTop)
      )
      .subscribe(yOffset => {
        onScroll(yOffset);
      });

    return () => {
      subscription.unsubscribe();
    };
  }, [ref, onScroll]);
}

const boxColors = [colors.blue50, colors.red50, colors.yellow50, colors.green50, colors.grey50];

function ColorBox({
  color,
  height,
  children,
}: {
  color: string;
  height: number;
  children: ReactNode;
}) {
  return <div style={{ backgroundColor: color, height: `${height}px` }}>{children}</div>;
}

let key = 0;
const makeBoxes = (count: number) =>
  Array(count)
    .fill(undefined)
    .map(() => `box-${key++}`);

function InfiniteScrollExample() {
  const threshold = number('threshold', 0);
  const [boxes, setBoxes] = useState(makeBoxes(6));
  const addMoreBoxes = useCallback(() => {
    action('scrolled')();
    setBoxes(b => b.concat(makeBoxes(6)));
  }, []);

  const [scrollYOffset, setScrollYOffset] = useState<number>();
  const ref = useRef<HTMLDivElement>(null);

  useScrollDispatching(ref, yOffset => {
    setScrollYOffset(yOffset);
  });

  return (
    <InfiniteScroll ref={ref} threshold={threshold} onScroll={addMoreBoxes}>
      <div style={{ position: 'fixed', left: 0, top: 0 }}>
        scrollYOffset: {scrollYOffset === undefined ? '-' : `${scrollYOffset}px`}
      </div>
      {boxes.map((key, index) => (
        <ColorBox key={key} color={boxColors[index % boxColors.length]} height={200}>
          {index}
        </ColorBox>
      ))}
    </InfiniteScroll>
  );
}

storiesOf('InfiniteScroll', module).add('ðŸ““example - full', () => <InfiniteScrollExample />);
