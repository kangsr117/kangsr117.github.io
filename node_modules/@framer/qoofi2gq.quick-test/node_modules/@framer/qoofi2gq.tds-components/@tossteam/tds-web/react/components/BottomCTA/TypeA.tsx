import cx from "classnames";
import * as React from "react";
import {
  ComponentProps,
  ReactNode,
  useContext,
  useMemo,
  useState,
} from "react";
import { PortalConsumer } from "../../providers/PortalContext";
import isSafeAreaExists from "../../utils/isSafeAreaExists";
import { Button } from "../Button";
import { ContainerContext } from "../Container";
import useBottomCTAStyle from "./hooks/useFixedStyle";

type ButtonProps = ComponentProps<typeof Button>;

export interface Props extends Omit<ButtonProps, "display" | "size" | "type"> {
  children?: ReactNode;
  type?: ButtonProps["type"];
  hasSafeAreaPadding?: boolean;
  takeSpace?: boolean;
  fixed?: boolean;
  /**
   * @description 'none'으로 주면 background를 제거할 수 있습니다.
   * @default 'default'
   */
  background?: "default" | "none";
  topAccessory?: ReactNode;
  bottomAccessory?: ReactNode;
}

function TypeA({
  className,
  type,
  hasSafeAreaPadding = true,
  fixed = false,
  takeSpace = fixed,
  background = "default",
  topAccessory,
  bottomAccessory,
  ...props
}: Props) {
  const [spaceHeight, setSpaceHeight] = useState(0);
  const enableSafeArea = useMemo(() => {
    return hasSafeAreaPadding && isSafeAreaExists();
  }, [hasSafeAreaPadding]);
  const isInContainer = useContext(ContainerContext);

  const { isBlock, style } = useBottomCTAStyle({ isElementFixed: fixed });

  const content = (
    <div
      className={cx("bottom-cta", className, {
        "bottom-cta--fixed": fixed,
        "bottom-cta--in-container": fixed && isInContainer,
        "bottom-cta--block": isBlock,
      })}
      style={style}
      ref={(element) => {
        if (element && takeSpace) {
          setSpaceHeight(element.clientHeight);
        }
      }}
    >
      {background !== "none" ? <div className="bottom-cta__gradient" /> : null}
      <div
        className={cx(
          "bottom-cta__container",
          `bottom-cta__container--background-${background}`,
          {
            "bottom-cta__container--safe-area": enableSafeArea,
          }
        )}
      >
        {topAccessory !== undefined ? (
          <div className="bottom-cta__top-accessory typography-t6">
            {topAccessory}
          </div>
        ) : null}
        <Button
          {...props}
          display={isBlock ? "full" : "block"}
          size="big"
          type={type}
        />
        {bottomAccessory !== undefined ? (
          <div className="bottom-cta__bottom-accessory typography-t6">
            {bottomAccessory}
          </div>
        ) : null}
      </div>
      <div className="inset-checker" id="inset-checker" />
    </div>
  );

  return (
    <>
      <div className="bottom-cta__spacer" style={{ height: spaceHeight }} />
      {fixed ? <PortalConsumer>{content}</PortalConsumer> : content}
    </>
  );
}

export default TypeA;
