import classNames from "classnames";
import { format } from "date-fns";
import * as React from "react";
import { ComponentProps, useCallback } from "react";
import InfiniteScroll from "../InfiniteScroll/InfiniteScroll";
import CalendarDay from "./CalendarDay";
import CalendarMonth from "./CalendarMonth";
import CalendarMonthHead from "./CalendarMonthHead";
import useVisibleMonths from "./hooks/useVisibleMonths";
import CalendarModifierSet from "./models/CalendarModifierSet";

type CalendarDayProps = ComponentProps<typeof CalendarDay>;

export interface Props {
  initialMonth: Date;
  maxVisibleMonth?: Date;
  monthPageSize: number;
  onDayClick: CalendarDayProps["onDayClick"];
  dayAriaLabelFormat?: string;
  modifiers?: CalendarModifierSet;
  className?: string;
  scrollThreshold: number;
}

export default function CalendarMonthList({
  initialMonth,
  maxVisibleMonth,
  monthPageSize,
  onDayClick,
  dayAriaLabelFormat,
  modifiers,
  className,
  scrollThreshold,
}: Props) {
  /**
   * TODO(@seokju-na): 이전 달력을 불러올 때 아래와 같은 사항을 고려해야 하는데 시간이 걸려 스킵합니다.
   * - 1. 이전 달력을 불러왔을 때 위로 스크롤 방지
   * - 2. 처음 초기화 시에 이전 달력도 불러오는데, 스크롤 위치를 initialMonth 달력에 맞춰야함
   */
  const [months, , addNextMonths] = useVisibleMonths(initialMonth, {
    pageSize: monthPageSize,
    minMonth: initialMonth, // 추후에 'minVisibleMonth'로 대체해야 합니다.
    maxMonth: maxVisibleMonth,
  });

  const handleScroll = useCallback(
    (direction) => {
      if (direction === "bottom") {
        addNextMonths();
      }
    },
    [addNextMonths]
  );

  return (
    <div className={classNames("calendar-month-list", className)}>
      <CalendarMonthHead />
      <InfiniteScroll
        onScroll={handleScroll}
        threshold={scrollThreshold}
        className="calendar-month-list__scrollable"
      >
        {months.map((month) => (
          <CalendarMonth
            key={getMonthKey(month)}
            month={month}
            onDayClick={onDayClick}
            modifiers={modifiers}
            dayAriaLabelFormat={dayAriaLabelFormat}
          />
        ))}
      </InfiniteScroll>
    </div>
  );
}

function getMonthKey(month: Date) {
  return format(month, "yyyy-MM");
}
