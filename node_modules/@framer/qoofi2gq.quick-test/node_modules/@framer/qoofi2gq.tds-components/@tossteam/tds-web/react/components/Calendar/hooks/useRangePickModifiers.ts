import {
  differenceInCalendarMonths,
  isAfter,
  isBefore,
  isSameDay,
  isWithinInterval,
} from 'date-fns';
import { useCallback, useMemo } from 'react';

import normalizeCalendarDay from '../../../utils/normalizeCalendarDay';
import { CalendarModifierSetOf } from '../models/CalendarModifierSet';

type ModifierSet = CalendarModifierSetOf<'in-selected-range' | 'selected-start' | 'selected-end'>;

function isWithinRangeInCalendar(
  startDate: Date,
  endDate: Date,
  {
    date,
    calendarMonth,
    isOutsideDay,
  }: {
    date: Date;
    calendarMonth: Date;
    isOutsideDay: boolean;
  }
) {
  const start = normalizeCalendarDay(startDate);
  const end = normalizeCalendarDay(endDate);
  const d = normalizeCalendarDay(date);

  if (!isOutsideDay) {
    return isWithinInterval(d, { start, end });
  }

  const diffWithStart = differenceInCalendarMonths(start, calendarMonth);
  const diffWithEnd = differenceInCalendarMonths(end, calendarMonth);

  // 시작날짜와 끝날짜가 같은 달력에 있는 경우 항상 바깥날짜는 선택범위에 포함되지 않습니다.
  if (diffWithStart === 0 && diffWithEnd === 0) {
    return false;
  }

  if (diffWithStart === 0) {
    return isAfter(d, start);
  } else if (diffWithEnd === 0) {
    return isBefore(d, end);
  } else if (diffWithStart < 0 && diffWithEnd > 0) {
    return true;
  }

  return false;
}

export default function useRangePickModifiers(
  startDate: Date | undefined,
  endDate: Date | undefined
) {
  const isStartDate = useCallback(
    ({ date, isOutsideDay }) => {
      if (startDate !== undefined) {
        return !isOutsideDay && isSameDay(date, normalizeCalendarDay(startDate));
      }
      return false;
    },
    [startDate]
  );

  const isEndDate = useCallback(
    ({ date, isOutsideDay }) => {
      if (endDate !== undefined) {
        return !isOutsideDay && isSameDay(date, normalizeCalendarDay(endDate));
      }
      return false;
    },
    [endDate]
  );

  const isInSelectedRange = useCallback(
    ({ date, thisMonth, isOutsideDay }) => {
      if (startDate !== undefined && endDate !== undefined) {
        return isWithinRangeInCalendar(startDate, endDate, {
          date,
          calendarMonth: thisMonth,
          isOutsideDay,
        });
      }

      return false;
    },
    [startDate, endDate]
  );

  return useMemo(
    (): ModifierSet => ({
      'in-selected-range': isInSelectedRange,
      'selected-start': isStartDate,
      'selected-end': isEndDate,
    }),
    [isStartDate, isEndDate, isInSelectedRange]
  );
}
