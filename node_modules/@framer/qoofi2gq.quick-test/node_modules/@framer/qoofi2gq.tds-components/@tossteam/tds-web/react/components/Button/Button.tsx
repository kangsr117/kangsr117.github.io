import cx from "classnames";
import * as React from "react";
import generateID from "../../utils/generateID";
import { Context as FormGroupContext } from "../Form/FormGroup";
import Loader from "../Loader";
export type Type = "primary" | "danger" | "light" | "dark";
export type Style = "fill" | "outline" | "weak" | "flat";
type Display = "inline" | "block" | "full";
type Size = "big" | "large" | "medium" | "tiny";

const fontSizeMap: Record<Size, number> = {
  big: 17,
  large: 17,
  medium: 15,
  tiny: 13,
};

const radiusMap: Record<Size, number> = {
  big: 16,
  large: 12,
  medium: 8,
  tiny: 6,
};

export interface BaseProps {
  type?: Type;
  style?: Style;
  display?: Display;
  size?: Size;
  disabled?: boolean;
  loading?: boolean;
  onClick?: React.MouseEventHandler<HTMLElement>; // "as" prop 지원으로 이벤트 핸들러가 제대로 타이핑 되지 않는 문제가 있어 우선 이와 같이 처리합니다.
  htmlStyle?: React.CSSProperties;
  htmlType?: React.ButtonHTMLAttributes<HTMLButtonElement>["type"];
}

export type Props<
  Element extends keyof JSX.IntrinsicElements = "button"
> = BaseProps & {
  as?: Element;
} & Omit<JSX.IntrinsicElements[Element], keyof BaseProps | "as">;

export function Button<T extends keyof JSX.IntrinsicElements = "button">(
  props: Props<T>
) {
  const {
    as: Component = "button",
    type = "primary",
    style = "fill",
    display = "inline",
    size = "big",
    disabled = false,
    loading,
    className,
    onTouchStart = noop,
    children,
    htmlStyle,
    htmlType,
    ...rest
  } = props as Props;

  const buttonId = React.useRef(generateID("button"));
  const maskId = `${buttonId.current}-mask`;
  const { isInForm } = React.useContext(FormGroupContext);
  const [rect, setRect] = React.useState<
    { width: number; height: number } | undefined
  >(undefined);

  const [hasLineBreak, setHasLineBreak] = React.useState(false);

  const buttonStyle = React.useMemo(() => {
    if (display === "full") {
      return htmlStyle;
    }

    return {
      ...htmlStyle,
      clipPath: `url(#${maskId})`,
    };
  }, [display, htmlStyle, maskId]);

  return (
    <Component
      id={buttonId.current}
      className={cx(
        "button",
        `font-size--${fontSizeMap[size]}`,
        { "form-control": isInForm },
        {
          "button--wrap":
            hasLineBreak &&
            display === "block" &&
            (size === "big" || size === "large"),
          [`button--type-${type}`]: type,
          [`button--style-${style}`]: style,
          [`button--size-${size}`]: size,
          [`button--display-${display}`]: display,
          [`button--is-loading`]: loading,
        },
        { disabled: disabled || loading },
        className
      )}
      onTouchStart={onTouchStart}
      disabled={disabled || loading}
      type={htmlType}
      style={buttonStyle}
      {...rest}
    >
      <span className="button__content">
        {loading ? <Loader className="button__loader" /> : null}
        {children}
      </span>
      {/* {rect !== undefined && display !== "full" ? (
        <BezierMask
          id={maskId}
          width={rect.width}
          height={rect.height}
          radius={radiusMap[size]}
        />
      ) : null} */}
    </Component>
  );
}

export default Button;

// touchStart에 아무 이벤트도 바인딩 되어있지 않으면 active 상태가 아이폰에서 제대로 나오지 않는 문제로 인해 디폴트 핸들러를 추가합니다.
function noop() {}
