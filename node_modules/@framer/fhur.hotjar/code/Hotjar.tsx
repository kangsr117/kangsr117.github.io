import * as React from "react";
import { useEffect } from "react";
import { Frame, addPropertyControls, RenderTarget, ControlType } from "framer";

declare global {
  interface Window {
    hj?: { q?: any[] } & ((...args: any[]) => void);
    _hjSettings?: { hjid: number; hjsv: number };
  }
}

const SCRIPT_NODE_ID: string = "data-hotjar-tracking-script";

const useInjectHotjar = (trackingId?: number) => {
  useEffect(() => {
    // Skip if no tracking ID
    if (!trackingId || RenderTarget.current() !== RenderTarget.preview) {
      console.log(
        "Not injecting Hotjar script due to render target:",
        RenderTarget.current()
      );
      return;
    }

    // Set the window.hj global
    // This is HotJar's magic global variable
    window.hj =
      window.hj ||
      function() {
        (window.hj.q = window.hj.q || []).push(arguments);
      };

    // Set the _hjSettings global
    // You might think that this can be inlined in the below script's source, but it seems that HotJar relies on this global's prescence.
    window._hjSettings = window._hjSettings || { hjid: trackingId, hjsv: 6 };

    // Add the tracking script ONLY if it hasn't already been added
    if (document.querySelectorAll(`[${SCRIPT_NODE_ID}]`).length === 0) {
      const script = document.createElement("script");
      script.setAttribute(SCRIPT_NODE_ID, "true");
      script.async = true;
      script.src = `https://static.hotjar.com/c/hotjar-${window._hjSettings.hjid}.js?sv=${window._hjSettings.hjsv}`;

      const head = document.head;
      head.appendChild(script);
    }
  }, [trackingId]);
};

const ComponentInstructions: React.SFC = ({ children }) => {
  return (
    <div
      style={{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexDirection: "column",
        width: "100%",
        height: "100%",
        fontSize: 16,
        fontWeight: 500,
        textAlign: "left",
        color: "#bb88ff",
        backgroundColor: "#2f2546",
        border: "1px solid #8855ff",
        padding: 32,
        overflow: "hidden"
      }}
    >
      {children}
    </div>
  );
};

const icon = (
  <svg
    style={{
      width: "100%",
      height: "100%",
      maxWidth: "50px",
      maxHeight: "50px"
    }}
    height="512px"
    version="1.1"
    viewBox="0 0 512 512"
    width="512px"
    xmlSpace="preserve"
    xmlnsXlink="http://www.w3.org/1999/xlink"
  >
    <path
      d="M433.024 175.779C363.747 52.896 160.55 26.001 160.55 26.001s93.762 102.388-26.06 183.35c-75.77 51.1-105.726 117.503-73.266 190.028 24.854 55.552 77.439 78.184 134.104 86.62-27.079-51.1-6.12-113.516-3.802-120.192 52.956 80.128 153.025 0 102.759-87.086 65.847 14.284 75.678 128.541 25.133 199.858 74.658-23.462 124.366-82.448 137.999-135.031 14.374-54.996 3.43-118.616-24.393-167.769z"
      style={{ fill: "#E02B37" }}
    />
  </svg>
);

type Props = {
  width?: number;
  height?: number;
  siteId?: string;
  showInstructions: boolean;
};

export const Hotjar: React.SFC<Props> = props => {
  useInjectHotjar(parseInt(props.siteId));

  if (RenderTarget.current() === RenderTarget.canvas) {
    if (props.showInstructions) {
      return (
        <ComponentInstructions>
          <h2>Instructions</h2>
          <ol style={{ lineHeight: 2 }}>
            <li>Drop this component on your prototype's first screen.</li>
            <li>
              Find your Hotjar Site ID and paste it on this component's
              properties panel.
            </li>
            <li>
              Optionally hide these instructions and/or resize the hotjar
              tracker.
            </li>
            <li>
              ⚠️Hotjar will only record during Live Preview. It may take a few
              minutes for the recordings to show up on Hotjar's site.
            </li>
          </ol>
        </ComponentInstructions>
      );
    }
    return icon;
  }

  return <Frame visible={false} />;
};

Hotjar.defaultProps = {
  width: 400,
  height: 600
};

addPropertyControls(Hotjar, {
  siteId: {
    type: ControlType.String,
    title: "Site ID"
  },
  showInstructions: {
    type: ControlType.Boolean,
    title: "Show Instructions",
    defaultValue: true
  }
});
