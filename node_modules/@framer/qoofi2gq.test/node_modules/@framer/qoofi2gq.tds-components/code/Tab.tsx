import styled from '@emotion/styled';
import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { default as TDSTab, Props as TDSTabProps } from '../@tossteam/tds-web/react/components/Tab/Tab';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const fluidLabels = ['On', 'Off'] as const;

type FluidLabel = typeof fluidLabels[number];

interface Props {
  selectedIndexWithoutFluid: number;
  selectedIndexWithFluid: number;
  optionsWithoutFluid: string[];
  optionsWithFluid: string[];
  fluid: FluidLabel;
  tabContent1: React.ReactNode;
  tabContent2: React.ReactNode;
  tabContent3: React.ReactNode;
  tabContent4: React.ReactNode;
  tabContent5: React.ReactNode;
  tabContent6: React.ReactNode;
  onChange?: () => void;
  on1Tap?: () => void;
  on2Tap?: () => void;
  on3Tap?: () => void;
  on4Tap?: () => void;
  on5Tap?: () => void;
  on6Tap?: () => void;
}

const fluidByControlLabel: {
  [key in FluidLabel]: TDSTabProps['fluid'];
} = {
  On: true,
  Off: false,
};

export function Tab(props: Props) {
  const {
    selectedIndexWithoutFluid,
    selectedIndexWithFluid,
    optionsWithoutFluid,
    optionsWithFluid,
    fluid,
    tabContent1,
    tabContent2,
    tabContent3,
    tabContent4,
    tabContent5,
    tabContent6,
    onChange,
    on1Tap,
    on2Tap,
    on3Tap,
    on4Tap,
    on5Tap,
    on6Tap,
  } = useFilteringEventHandlersInInspector(props);

  const isFluid = fluidByControlLabel[fluid];
  const selectedIndex = isFluid ? selectedIndexWithFluid : selectedIndexWithoutFluid;
  const options = isFluid ? optionsWithFluid : optionsWithoutFluid;

  const [value, setValue] = React.useState(selectedIndex);
  const tapEvents = [on1Tap, on2Tap, on3Tap, on4Tap, on5Tap, on6Tap];
  const tabContents = [tabContent1, tabContent2, tabContent3, tabContent4, tabContent5, tabContent6];

  React.useEffect(() => {
    setValue(selectedIndex - 1);
  }, [isFluid, selectedIndexWithoutFluid, selectedIndexWithFluid]);

  const handleChange = (index: number) => {
    setValue(index);
    onChange?.();
    tapEvents[index]?.();
  };

  return (
    <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>
      <TDSComponent
        name="Tab"
        summary={{
          fluid: isFluid,
          items: options,
        }}
      >
        <TDSTab fluid={isFluid} onChange={handleChange}>
          {options?.map((option, index) => (
            <TDSTab.Item key={`${isFluid}-${index}`} selected={index === value}>
              {option}
            </TDSTab.Item>
          ))}
        </TDSTab>
      </TDSComponent>
      <ChildrenContainer>{tabContents[value]}</ChildrenContainer>
    </div>
  );
}

addPropertyControls(Tab, {
  selectedIndexWithoutFluid: {
    title: '포커스',
    type: ControlType.Number,
    defaultValue: 1,
    displayStepper: true,
    min: 1,
    max: 4,
    hidden(props) {
      return props.fluid === 'On';
    },
  },
  selectedIndexWithFluid: {
    title: '포커스',
    type: ControlType.Number,
    defaultValue: 1,
    displayStepper: true,
    min: 1,
    max: 6,
    hidden(props) {
      return props.fluid === 'Off';
    },
  },
  optionsWithoutFluid: {
    title: 'Options',
    type: ControlType.Array,
    propertyControl: {
      type: ControlType.String,
    },
    maxCount: 4,
    hidden(props) {
      return props.fluid === 'On';
    },
  },
  optionsWithFluid: {
    title: 'Options',
    type: ControlType.Array,
    propertyControl: {
      type: ControlType.String,
    },
    maxCount: 6,
    hidden(props) {
      return props.fluid === 'Off';
    },
  },
  fluid: {
    title: '탭 스크롤',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: fluidLabels as any,
    defaultValue: 'Off',
  },
  tabContent1: {
    title: '탭 1',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfOptionsLengthIsLessThan(1),
  },
  tabContent2: {
    title: '탭 2',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfOptionsLengthIsLessThan(2),
  },
  tabContent3: {
    title: '탭 3',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfOptionsLengthIsLessThan(3),
  },
  tabContent4: {
    title: '탭 4',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfOptionsLengthIsLessThan(4),
  },
  tabContent5: {
    title: '탭 5',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfOptionsLengthIsLessThan(5),
  },
  tabContent6: {
    title: '탭 6',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfOptionsLengthIsLessThan(6),
  },
  onChange: {
    type: ControlType.EventHandler,
  },
  on1Tap: {
    type: ControlType.EventHandler,
  },
  on2Tap: {
    type: ControlType.EventHandler,
  },
  on3Tap: {
    type: ControlType.EventHandler,
  },
  on4Tap: {
    type: ControlType.EventHandler,
  },
  on5Tap: {
    type: ControlType.EventHandler,
  },
  on6Tap: {
    type: ControlType.EventHandler,
  },
});

(Tab as any).defaultProps = {
  width: 375,
  height: 53,
};

Tab.displayName = makeComponentDisplayName('Tab', '탭');

function hideControlIfOptionsLengthIsLessThan(length: number) {
  return (props: Partial<Props>) => {
    const options = props.fluid === 'On' ? props.optionsWithFluid : props.optionsWithoutFluid;

    return options == null || options.length < length;
  };
}

const ChildrenContainer = styled.div`
  position: relative;
  & > div[data-framer-component-type='Frame'],
  & > div[data-framer-component-type='Stack'] {
    width: 100% !important;
  }
`;
