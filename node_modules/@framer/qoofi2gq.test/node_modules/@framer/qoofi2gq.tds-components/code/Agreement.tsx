import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { ComponentProps, useEffect } from 'react';
import { default as TDSAgreement } from '../@tossteam/tds-web/react/components/NewAgreement';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import { useUncontrolled } from '../src/hooks/useUncontrolled';
import '../src/styles/tds-framer.css';
import { isStaticRenderTarget } from '../src/utils/isStaticRenderTarget';
import { makeDeprecatedComponentDisplayName } from '../src/utils/makeDisplayName';

const typeLabels = ['Big', 'Medium', 'Small'] as const;

type TypeLabel = typeof typeLabels[number];

const componentByTypeLabel: Record<TypeLabel, JSX.Element> = {
  Big: <TDSAgreement.RowBig />,
  Medium: <TDSAgreement.RowMedium />,
  Small: <TDSAgreement.RowSmall />,
};

const componentTypeNameByTypeLabel: Record<TypeLabel, string> = {
  Big: 'AgreementRowBig',
  Medium: 'AgreementRowMedium',
  Small: 'AgreementRowSmall',
};

const childComponentByTypeLabel: Record<TypeLabel, JSX.Element | null> = {
  Big: <TDSAgreement.RowMedium />,
  Medium: <TDSAgreement.RowSmall />,
  Small: null,
};

const childrenComponentTypeNameByTypeLabel: Record<TypeLabel, string | undefined> = {
  Big: 'AgreementRowMedium',
  Medium: 'AgreementRowSmall',
  Small: undefined,
};

interface Props {
  type: TypeLabel;
  text: string;
  withCheckbox: boolean;
  checked: boolean;
  withArrow: boolean;
  withBorder: boolean;
  withUnderline: boolean;
  divider1: string;
  numberOfNestedRows: number;
  nestedRowsCollapsed: boolean;
  nestedRowsWithCheckbox: boolean;
  nestedRow1Text: string;
  nestedRow1Checked: boolean;
  nestedRow1WithArrow: boolean;
  nestedRow2Text: string;
  nestedRow2Checked: boolean;
  nestedRow2WithArrow: boolean;
  nestedRow3Text: string;
  nestedRow3Checked: boolean;
  nestedRow3WithArrow: boolean;
  nestedRow4Text: string;
  nestedRow4Checked: boolean;
  nestedRow4WithArrow: boolean;
  nestedRow5Text: string;
  nestedRow5Checked: boolean;
  nestedRow5WithArrow: boolean;

  onAllChecked?: () => void;
  onNotAllChecked?: () => void;
}

export function Agreement(props: Props) {
  const {
    type,
    text,
    withCheckbox,
    checked,
    withArrow,
    withBorder,
    withUnderline,
    numberOfNestedRows,
    nestedRowsCollapsed,
    nestedRowsWithCheckbox,
    nestedRow1Text,
    nestedRow1Checked,
    nestedRow1WithArrow,
    nestedRow2Text,
    nestedRow2Checked,
    nestedRow2WithArrow,
    nestedRow3Text,
    nestedRow3Checked,
    nestedRow3WithArrow,
    nestedRow4Text,
    nestedRow4Checked,
    nestedRow4WithArrow,
    nestedRow5Text,
    nestedRow5Checked,
    nestedRow5WithArrow,

    onAllChecked,
    onNotAllChecked,
  } = useFilteringEventHandlersInInspector(props);

  // TODO: refactor agreement checkbox logis into a hook function
  const { value: row1CheckedValue, handleChange: handleRow1CheckedValueChange } = useUncontrolled(
    checked || nestedRow1Checked,
    [checked, nestedRow1Checked]
  );
  const { value: row2CheckedValue, handleChange: handleRow2CheckedValueChange } = useUncontrolled(
    checked || nestedRow2Checked,
    [checked, nestedRow2Checked]
  );
  const { value: row3CheckedValue, handleChange: handleRow3CheckedValueChange } = useUncontrolled(
    checked || nestedRow3Checked,
    [checked, nestedRow3Checked]
  );
  const { value: row4CheckedValue, handleChange: handleRow4CheckedValueChange } = useUncontrolled(
    checked || nestedRow4Checked,
    [checked, nestedRow4Checked]
  );
  const { value: row5CheckedValue, handleChange: handleRow5CheckedValueChange } = useUncontrolled(
    checked || nestedRow5Checked,
    [checked, nestedRow5Checked]
  );
  const nestedRows = [
    {
      text: nestedRow1Text,
      withArrow: nestedRow1WithArrow,
      checked: row1CheckedValue,
      onChange: handleRow1CheckedValueChange,
    },
    {
      text: nestedRow2Text,
      withArrow: nestedRow2WithArrow,
      checked: row2CheckedValue,
      onChange: handleRow2CheckedValueChange,
    },
    {
      text: nestedRow3Text,
      withArrow: nestedRow3WithArrow,
      checked: row3CheckedValue,
      onChange: handleRow3CheckedValueChange,
    },
    {
      text: nestedRow4Text,
      withArrow: nestedRow4WithArrow,
      checked: row4CheckedValue,
      onChange: handleRow4CheckedValueChange,
    },
    {
      text: nestedRow5Text,
      withArrow: nestedRow5WithArrow,
      checked: row5CheckedValue,
      onChange: handleRow5CheckedValueChange,
    },
  ].slice(0, numberOfNestedRows);

  const isAllChecked = nestedRows.every(({ checked }) => checked);

  const { value: checkedValue, handleChange: handleCheckedChange } = useUncontrolled(isAllChecked);

  useEffect(() => {
    if (isStaticRenderTarget()) {
      return;
    }

    if (checkedValue !== isAllChecked) {
      handleCheckedChange(isAllChecked);
      if (isAllChecked) {
        onAllChecked?.();
      } else {
        onNotAllChecked?.();
      }
    }
  }, [row1CheckedValue, row2CheckedValue, row3CheckedValue, row4CheckedValue, row5CheckedValue]);

  const component = componentByTypeLabel[type];
  const childComponent = childComponentByTypeLabel[type];

  const componentProps: ComponentProps<typeof TDSAgreement> = {
    ...component.props,
    checked: checkedValue,
    onCheckedChange: (_, newValue) => {
      if (nestedRows.length === 0) {
        handleCheckedChange(newValue);
        return;
      }
      nestedRows.forEach(({ onChange }) => onChange(newValue));
    },
    collapsed: !nestedRowsCollapsed,
    withBorder: type === 'Big' && withBorder,
    withCheckbox: type !== 'Small' && withCheckbox,
    withArrow: type !== 'Small' && withArrow,
    underline: withUnderline,
  };
  const childrenNode = [
    text,
    type !== 'Small' && nestedRows.length > 0 ? (
      <TDSAgreement>
        {nestedRows.map(({ text, withArrow, checked, onChange }) =>
          React.cloneElement(
            childComponent,
            {
              checked,
              onCheckedChange: (_, newValue) => onChange(newValue),
              withArrow: type === 'Big' && withArrow,
              withCheckbox: type === 'Big' && nestedRowsWithCheckbox,
            },
            text
          )
        )}
      </TDSAgreement>
    ) : null,
  ];

  return (
    <TDSComponent
      name={component.type.name}
      summary={{
        type: componentTypeNameByTypeLabel[type],
        text,
        checked: type !== 'Small' && withCheckbox ? checked : undefined,
        checkbox: type !== 'Small' ? withCheckbox : undefined,
        border: type === 'Big' ? withBorder : undefined,
        underline: type === 'Small' ? withUnderline : undefined,
        subAgreements:
          type !== 'Small' && nestedRows.length > 0
            ? nestedRows.map(({ text, withArrow, checked }) => ({
                type: childrenComponentTypeNameByTypeLabel[type],
                text,
                arrow: type === 'Big' ? withArrow : undefined,
                checked: type === 'Big' && nestedRowsWithCheckbox ? checked : undefined,
              }))
            : undefined,
      }}
    >
      <TDSAgreement>{React.cloneElement(component, componentProps, childrenNode)}</TDSAgreement>
    </TDSComponent>
  );
}

addPropertyControls(Agreement, {
  type: {
    title: '종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: typeLabels as any,
    defaultValue: typeLabels[0],
  },
  text: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '토스증권 필수 약관 전체 동의',
  },
  withCheckbox: {
    title: '↳ 체크박스',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type === 'Small';
    },
  },
  checked: {
    title: '　 ↳ 체크',
    type: ControlType.Boolean,
    enabledTitle: 'ON',
    disabledTitle: 'OFF',
    defaultValue: false,
    hidden(props) {
      return props.type === 'Small' || !props.withCheckbox;
    },
  },
  withArrow: {
    title: '↳ 화살표',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type === 'Small';
    },
  },
  withBorder: {
    title: '↳ 보더',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big';
    },
  },
  withUnderline: {
    title: '↳ 밑줄',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: false,
    hidden(props) {
      return props.type !== 'Small';
    },
  },
  divider1: {
    title: '——————',
    type: ControlType.Enum,
    options: ['————————————'],
    hidden(props) {
      return props.type === 'Small';
    },
  },
  numberOfNestedRows: {
    title: '약관 개수',
    type: ControlType.Number,
    displayStepper: true,
    min: 0,
    max: 5,
    defaultValue: 3,
    hidden(props) {
      return props.type === 'Small';
    },
  },
  nestedRowsCollapsed: {
    title: '↳ 접기',
    type: ControlType.Boolean,
    enabledTitle: '펼침',
    disabledTitle: '접음',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big' || props.numberOfNestedRows === 0;
    },
  },
  nestedRowsWithCheckbox: {
    title: '↳ 체크박스',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big' || props.numberOfNestedRows === 0;
    },
  },
  nestedRow1Text: {
    title: '↳ 약관 1',
    type: ControlType.String,
    defaultValue: '종합 계좌 약관',
    hidden(props) {
      return props.type === 'Small' || props.numberOfNestedRows < 1;
    },
  },
  nestedRow1Checked: {
    title: '　 ↳ 체크',
    type: ControlType.Boolean,
    enabledTitle: 'ON',
    disabledTitle: 'OFF',
    defaultValue: false,
    hidden(props) {
      return props.type !== 'Big' || !props.nestedRowsWithCheckbox || props.numberOfNestedRows < 1;
    },
  },
  nestedRow1WithArrow: {
    title: '　 ↳ 화살표',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big' || props.numberOfNestedRows < 1;
    },
  },
  nestedRow2Text: {
    title: '↳ 약관 2',
    type: ControlType.String,
    defaultValue: '전자금융거래 이용약관',
    hidden(props) {
      return props.type === 'Small' || props.numberOfNestedRows < 2;
    },
  },
  nestedRow2Checked: {
    title: '　 ↳ 체크',
    type: ControlType.Boolean,
    enabledTitle: 'ON',
    disabledTitle: 'OFF',
    defaultValue: false,
    hidden(props) {
      return props.type !== 'Big' || !props.nestedRowsWithCheckbox || props.numberOfNestedRows < 2;
    },
  },
  nestedRow2WithArrow: {
    title: '　 ↳ 화살표',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big' || props.numberOfNestedRows < 2;
    },
  },
  nestedRow3Text: {
    title: '↳ 약관 3',
    type: ControlType.String,
    defaultValue: '제휴사 신용정보 조회 동의 (선택)',
    hidden(props) {
      return props.type === 'Small' || props.numberOfNestedRows < 3;
    },
  },
  nestedRow3Checked: {
    title: '　 ↳ 체크',
    type: ControlType.Boolean,
    enabledTitle: 'ON',
    disabledTitle: 'OFF',
    defaultValue: false,
    hidden(props) {
      return props.type !== 'Big' || !props.nestedRowsWithCheckbox || props.numberOfNestedRows < 3;
    },
  },
  nestedRow3WithArrow: {
    title: '　 ↳ 화살표',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big' || props.numberOfNestedRows < 3;
    },
  },
  nestedRow4Text: {
    title: '↳ 약관 4',
    type: ControlType.String,
    defaultValue: '토스뱅크 대출 상품설명서 동의 (선택)',
    hidden(props) {
      return props.type === 'Small' || props.numberOfNestedRows < 4;
    },
  },
  nestedRow4Checked: {
    title: '　 ↳ 체크',
    type: ControlType.Boolean,
    enabledTitle: 'ON',
    disabledTitle: 'OFF',
    defaultValue: false,
    hidden(props) {
      return props.type !== 'Big' || !props.nestedRowsWithCheckbox || props.numberOfNestedRows < 4;
    },
  },
  nestedRow4WithArrow: {
    title: '　 ↳ 화살표',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big' || props.numberOfNestedRows < 4;
    },
  },
  nestedRow5Text: {
    title: '↳ 약관 5',
    type: ControlType.String,
    defaultValue: '개인정보 및 금융정보 제공 동의 (선택)',
    hidden(props) {
      return props.type === 'Small' || props.numberOfNestedRows < 5;
    },
  },
  nestedRow5Checked: {
    title: '　 ↳ 체크',
    type: ControlType.Boolean,
    enabledTitle: 'ON',
    disabledTitle: 'OFF',
    defaultValue: false,
    hidden(props) {
      return props.type !== 'Big' || !props.nestedRowsWithCheckbox || props.numberOfNestedRows < 5;
    },
  },
  nestedRow5WithArrow: {
    title: '　 ↳ 화살표',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big' || props.numberOfNestedRows < 5;
    },
  },

  onAllChecked: {
    type: ControlType.EventHandler,
  },
  onNotAllChecked: {
    type: ControlType.EventHandler,
  },
});

(Agreement as any).defaultProps = {
  width: 375,
  height: 195,
};

Agreement.displayName = makeDeprecatedComponentDisplayName('Agreement(Deprecated)', '약관(폐기예정)');
