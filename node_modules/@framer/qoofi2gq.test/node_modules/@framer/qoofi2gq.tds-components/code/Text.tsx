import { TextAlignProperty } from 'csstype';
import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { FontWeightValue, Text as TDSText, TypographyValue } from '../@tossteam/tds-web/react/components/Text/Text';
import { commaizeNumber } from '../@tossteam/tds-web/react/utils/commaize';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import { colors as canvasColors } from './canvas';

const typeLabels = ['일반 텍스트', '₩'] as const;
const sizeLabels = [
  '안 읽어도 됨　　13 ・ t7',
  '작은 본문　　　 15 ・ t6',
  '일반 본문　　　 17 ・ t5 ',
  '조금 큰 본문　　19 ・ st8',
  '————————————',
  '작은 제목　　　 20 ・ t4',
  '일반 제목　　　 22 ・ t3',
  '조금 큰 제목　　24 ・ st5',
  '큰 제목　　　　 26 ・ t2',
  '매우 큰 제목　　30 ・ t1',
] as const;
const styleLabels = ['Regular', 'Medium', 'SemiB', 'Bold'] as const;
const priceInputTypeLabels = ['슬라이더', '직접입력'] as const;
const textAlignLabels = ['왼쪽', '중앙', '오른쪽'] as const;

type TypeLabel = typeof typeLabels[number];
type SizeLabel = typeof sizeLabels[number];
type StyleLabel = typeof styleLabels[number];
type PriceInputTypeLabel = typeof priceInputTypeLabels[number];
type TextAlignLabel = typeof textAlignLabels[number];

const typographyBySizeLabel: { [key in SizeLabel]: TypographyValue } = {
  '안 읽어도 됨　　13 ・ t7': 't7',
  '작은 본문　　　 15 ・ t6': 't6',
  '일반 본문　　　 17 ・ t5 ': 't5',
  '조금 큰 본문　　19 ・ st8': 'st8',
  '————————————': 't4',
  '작은 제목　　　 20 ・ t4': 't4',
  '일반 제목　　　 22 ・ t3': 't3',
  '조금 큰 제목　　24 ・ st5': 'st5',
  '큰 제목　　　　 26 ・ t2': 't2',
  '매우 큰 제목　　30 ・ t1': 't1',
};

const typographyNameBySizeLabel: { [key in SizeLabel]: string } = {
  '안 읽어도 됨　　13 ・ t7': 'Typography7',
  '작은 본문　　　 15 ・ t6': 'Typography6',
  '일반 본문　　　 17 ・ t5 ': 'Typography5',
  '조금 큰 본문　　19 ・ st8': 'sub Typography8',
  '————————————': 't4',
  '작은 제목　　　 20 ・ t4': 'Typography4',
  '일반 제목　　　 22 ・ t3': 'Typography3',
  '조금 큰 제목　　24 ・ st5': 'sub Typography5',
  '큰 제목　　　　 26 ・ t2': 'Typography2',
  '매우 큰 제목　　30 ・ t1': 'Typography1',
};

const styleByLabel: { [key in StyleLabel]: FontWeightValue } = {
  Regular: 'regular',
  Medium: 'medium',
  SemiB: 'semibold',
  Bold: 'bold',
};

const textAlignByLabel: { [key in TextAlignLabel]: TextAlignProperty } = {
  왼쪽: 'left',
  중앙: 'center',
  오른쪽: 'right',
};

interface Props {
  fixedWidth: boolean;
  type: TypeLabel;
  style: StyleLabel;
  size: SizeLabel;
  text: string;
  priceInputType: PriceInputTypeLabel;
  sliderPrice: number;
  customPrice: string;
  color: string;
  textAlign: TextAlignLabel;

  onClick?: () => void;
}

export function Text(props: Props) {
  const {
    fixedWidth,
    type,
    style,
    size,
    text,
    priceInputType,
    sliderPrice,
    customPrice,
    color,
    textAlign,
    onClick,
  } = useFilteringEventHandlersInInspector(props);

  return (
    <TDSComponent
      name="Text"
      summary={{
        typography: typographyNameBySizeLabel[size],
        fontWeight: styleByLabel[style],
        color,
        textAlign: textAlignByLabel[textAlign],
      }}
    >
      <TDSText
        typography={typographyBySizeLabel[size]}
        fontWeight={styleByLabel[style]}
        color={color}
        stringToJSX
        style={{
          width: fixedWidth ? '100%' : undefined,
          textAlign: textAlignByLabel[textAlign],
        }}
        onClick={onClick}
      >
        {type === '일반 텍스트'
          ? text
          : `${commaizeNumber(priceInputType === '슬라이더' ? sliderPrice : customPrice)} 원`}
      </TDSText>
    </TDSComponent>
  );
}

addPropertyControls(Text, {
  fixedWidth: {
    title: '너비',
    type: ControlType.Boolean,
    enabledTitle: 'Fixed',
    disabledTitle: 'Auto',
    defaultValue: true,
  },
  type: {
    title: '종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: typeLabels as any,
    defaultValue: typeLabels[0],
  },
  style: {
    title: '스타일',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: styleLabels as any,
    defaultValue: styleLabels[0],
  },
  size: {
    title: '크기',
    type: ControlType.Enum,
    options: sizeLabels as any,
    defaultValue: sizeLabels[2],
  },
  text: {
    title: '텍스트',
    type: ControlType.String,
    defaultValue: '텍스트를 입력하세요',
    displayTextArea: true,
    hidden(props) {
      return props.type !== '일반 텍스트';
    },
  },
  priceInputType: {
    title: '💰 금액',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: priceInputTypeLabels as any,
    defaultValue: priceInputTypeLabels[0],
    hidden(props) {
      return props.type !== '₩';
    },
  },
  sliderPrice: {
    title: '↳ 금액 조절',
    type: ControlType.Number,
    min: 0,
    max: 3000000,
    defaultValue: 30000,
    hidden(props) {
      return props.type !== '₩' || props.priceInputType !== '슬라이더';
    },
  },
  customPrice: {
    title: '↳ 직접 입력',
    type: ControlType.String,
    defaultValue: '30000',
    hidden(props) {
      return props.type !== '₩' || props.priceInputType !== '직접입력';
    },
  },
  color: {
    title: '컬러',
    type: ControlType.Color,
    defaultValue: canvasColors['Grey700 - 일반적인 텍스트'],
  },
  textAlign: {
    title: '정렬',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: textAlignLabels as any,
    defaultValue: textAlignLabels[0],
  },
  onClick: {
    type: ControlType.EventHandler,
  },
});

(Text as any).defaultProps = {
  width: 175,
  height: 25,
};

Text.displayName = makeComponentDisplayName('Text', '텍스트');
