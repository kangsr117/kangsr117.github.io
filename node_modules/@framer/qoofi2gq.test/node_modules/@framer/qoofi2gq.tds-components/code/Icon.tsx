import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { useRef } from 'react';
import { default as TDSIcon } from '../@tossteam/tds-web/react/components/Icon/Icon';
import { TDSComponent } from '../src/components/TDSComponent';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import { colors as canvasColors } from './canvas';

interface Props {
  typeNormal: boolean;
  name: string;
  color?: string;
  fitToWidth?: boolean;
}

export function Icon({ typeNormal, name, color, fitToWidth = false }: Props) {
  const ref = useRef<HTMLSpanElement>(null);

  if (typeNormal) {
    return (
      <TDSComponent
        name="Icon"
        summary={{
          name,
          color,
        }}
      >
        <TDSIcon
          name={name}
          color={color}
          size="100%"
          style={fitToWidth ? { width: '100%', height: 'auto' } : undefined}
        />
      </TDSComponent>
    );
  }

  return (
    <div
      style={{
        position: 'relative',
        width: '100%',
        minWidth: 40,
        minHeight: 40,
        paddingTop: '100%',
      }}
    >
      <div
        style={{
          position: 'absolute',
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          borderRadius: '50%',
          overflow: 'hidden',
        }}
      >
        <TDSComponent
          name="Icon"
          summary={{
            type: 'circle',
            name,
          }}
        >
          <TDSIcon ref={ref} name={name} size="100%" />
        </TDSComponent>
      </div>
    </div>
  );
}

addPropertyControls(Icon, {
  typeNormal: {
    title: '종류',
    type: ControlType.Boolean,
    enabledTitle: '일반',
    disabledTitle: '원형',
    defaultValue: true,
  },
  name: {
    title: '이름',
    type: ControlType.String,
    defaultValue: 'icn-arrow-rightwards-line',
  },
  color: {
    title: '컬러',
    type: ControlType.Color,
    defaultValue: canvasColors['Grey600 - 가벼운 텍스트, 그레이 아이콘'],
    hidden(props) {
      return !props.typeNormal || !isColorable(props.name ?? '');
    },
  },
});

(Icon as any).defaultProps = {
  width: 24,
  height: 24,
};

Icon.displayName = makeComponentDisplayName('Icon', '아이콘');

function isColorable(iconName: string): boolean {
  if (iconName.startsWith('icn-')) {
    return iconName.endsWith('line');
  }
  if (iconName.startsWith('icon-')) {
    return iconName.endsWith('mono');
  }

  return false;
}
