import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { useCallback, useState } from 'react';
import { Button as TDSButton, Props as TDSButtonProps } from '../@tossteam/tds-web/react/components/Button/Button';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import { useLoading } from '../src/hooks/useLoading';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

export const sizeLabels = ['Big', 'Large', 'Medium', 'Tiny'] as const;
export const styleLabels = ['Fill', 'Weak'] as const;
export const typeLabels = ['🔵 블루', '⚫️ 다크', '🔴 레드', '⚪️ 라이트'] as const;
export const disabledLabels = ['활성', '비활성'] as const;
export const loadingLabels = ['없음', '3초', '영원히'] as const;
export const widthLabels = ['Auto', 'Fixed'] as const;

export type SizeLabel = typeof sizeLabels[number];
export type StyleLabel = typeof styleLabels[number];
export type TypeLabel = typeof typeLabels[number];
export type DisabledLabel = typeof disabledLabels[number];
export type LoadingLabel = typeof loadingLabels[number];
export type WidthLabel = typeof widthLabels[number];

const sizeByControlLabel: {
  [key in SizeLabel]: TDSButtonProps['size'];
} = {
  Big: 'big',
  Large: 'large',
  Medium: 'medium',
  Tiny: 'tiny',
};

export const typeByControlLabel: {
  [key in TypeLabel]: TDSButtonProps['type'];
} = {
  '🔵 블루': 'primary',
  '⚫️ 다크': 'dark',
  '🔴 레드': 'danger',
  '⚪️ 라이트': 'light',
};

const disabledByControlLabel: {
  [key in DisabledLabel]: TDSButtonProps['disabled'];
} = {
  활성: false,
  비활성: true,
};

export const styleByControlLabel: {
  [key in StyleLabel]: TDSButtonProps['style'];
} = {
  Fill: 'fill',
  Weak: 'weak',
};

interface Props {
  text: string;
  size?: SizeLabel;
  style?: StyleLabel;
  type?: TypeLabel;
  disabled?: DisabledLabel;
  loading?: LoadingLabel;
  fixedWidth?: WidthLabel;

  disableInspector?: boolean;

  onClick?: () => void;
}

export function Button(props: Props) {
  const {
    text,
    style = 'Fill',
    type = '🔵 블루',
    size = 'Big',
    disabled = '활성',
    loading = '없음',
    fixedWidth = 'Auto',

    disableInspector,

    onClick,
  } = useFilteringEventHandlersInInspector(props);

  const [shouldLoading, setShouldLoading] = useState(false);
  const isLoadingEnabled = loading !== '없음';
  const useFullWidth = fixedWidth === 'Fixed';

  const handleClick = useCallback(() => {
    if (isLoadingEnabled) {
      setShouldLoading(true);
      return;
    }

    onClick?.();
  }, []);

  const handleLoadingFinish = useCallback(() => {
    onClick?.();
    setShouldLoading(false);
  }, [onClick]);

  const isLoading = useLoading({
    enabled: shouldLoading,
    duration: loading === '3초' ? 3000 : 0,
    onFinish: handleLoadingFinish,
  });

  return (
    <TDSComponent
      name="Button"
      summary={{
        size: sizeByControlLabel[size],
        style: styleByControlLabel[style],
        type: typeByControlLabel[type],
        disabled: disabledByControlLabel[disabled],
      }}
      disabled={disableInspector}
    >
      <TDSButton
        htmlStyle={
          useFullWidth
            ? {
                width: '100%',
              }
            : {}
        }
        size={sizeByControlLabel[size]}
        style={styleByControlLabel[style]}
        type={typeByControlLabel[type]}
        disabled={disabledByControlLabel[disabled]}
        loading={isLoading}
        onClick={handleClick}
      >
        {text}
      </TDSButton>
    </TDSComponent>
  );
}

addPropertyControls(Button, {
  text: {
    title: '텍스트',
    type: ControlType.String,
    defaultValue: '버튼',
  },
  size: {
    title: '크기',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: sizeLabels as any,
    defaultValue: sizeLabels[0],
  },
  style: {
    title: '타입',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: styleLabels as any,
    defaultValue: styleLabels[0],
  },
  type: {
    title: '색상',
    type: ControlType.Enum,
    options: typeLabels as any,
    defaultValue: typeLabels[0],
  },
  fixedWidth: {
    title: '버튼 길이',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: widthLabels as any,
    defaultValue: widthLabels[0],
  },
  disabled: {
    title: '상태',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: disabledLabels as any,
    defaultValue: disabledLabels[0],
  },
  loading: {
    title: '로딩',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: loadingLabels as any,
    defaultValue: loadingLabels[0],
  },
  onClick: {
    type: ControlType.EventHandler,
  },
});

(Button as any).defaultProps = {
  width: 96,
  height: 56,
};

Button.displayName = makeComponentDisplayName('Button', '버튼');
