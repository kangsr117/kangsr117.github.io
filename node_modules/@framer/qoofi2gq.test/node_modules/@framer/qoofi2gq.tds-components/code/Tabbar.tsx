import styled from '@emotion/styled';
import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { colors } from '../@tossteam/colors';
import { default as TDSIcon } from '../@tossteam/tds-web/react/components/Icon/Icon';
import { default as Txt } from '../@tossteam/tds-web/react/components/Text';
import { IPhoneSafeAreaContainer } from '../src/components/iPhoneSafeAreaContainer';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const numberOfItemsLabels = [3, 4, 5] as const;
const tabIconLabels = [
  '홈',
  '조회',
  '내소비',
  '송금',
  '개설',
  '전체',
  '주식',
  '추천',
  '발견',
  '맞춤',
  '채팅',
  '고객정보',
] as const;
const iPhoneSafeAreaLabels = ['ON', 'OFF'] as const;

type TabIconLabel = typeof tabIconLabels[number];
type IPhoneSafeAreaLabel = typeof iPhoneSafeAreaLabels[number];

const tabIconNameByControlLabel: Record<TabIconLabel, string> = {
  홈: 'icon-tab-home',
  조회: 'icon-tab-inquiry',
  내소비: 'icon-tab-timeline',
  송금: 'icon-tab-transfer',
  개설: 'icon-tab-open',
  전체: 'icon-tab-service-label-a',
  주식: 'icon-tab-invest-label-a',
  추천: 'icon-tab-recommend',
  발견: 'icon-tab-discover',
  맞춤: 'icon-tab-benefit',
  채팅: 'icon-tab-chat',
  고객정보: 'icon-tab-customer',
};

interface Props {
  numberOfItems: number;
  selectedIndex: number;
  item1Icon: string;
  item1Text: string;
  item2Icon: string;
  item2Text: string;
  item3Icon: string;
  item3Text: string;
  item4Icon: string;
  item4Text: string;
  item5Icon: string;
  item5Text: string;
  iPhoneSafeArea: IPhoneSafeAreaLabel;

  tabContent1: React.ReactNode;
  tabContent2: React.ReactNode;
  tabContent3: React.ReactNode;
  tabContent4: React.ReactNode;
  tabContent5: React.ReactNode;
  tabContent6: React.ReactNode;

  onTabSelect: () => void;
  onTab1Select: () => void;
  onTab2Select: () => void;
  onTab3Select: () => void;
  onTab4Select: () => void;
  onTab5Select: () => void;
}

export function Tabbar(props: Props) {
  const {
    numberOfItems,
    selectedIndex,
    item1Icon,
    item1Text,
    item2Icon,
    item2Text,
    item3Icon,
    item3Text,
    item4Icon,
    item4Text,
    item5Icon,
    item5Text,
    iPhoneSafeArea,

    tabContent1,
    tabContent2,
    tabContent3,
    tabContent4,
    tabContent5,
    tabContent6,

    onTabSelect,
    onTab1Select,
    onTab2Select,
    onTab3Select,
    onTab4Select,
    onTab5Select,
  } = useFilteringEventHandlersInInspector(props);

  const items: Array<{ icon: string; text: string }> = [
    { icon: item1Icon, text: item1Text },
    { icon: item2Icon, text: item2Text },
    { icon: item3Icon, text: item3Text },
    { icon: item4Icon, text: item4Text },
    { icon: item5Icon, text: item5Text },
  ].slice(0, numberOfItems);
  const tabContents = [tabContent1, tabContent2, tabContent3, tabContent4, tabContent5, tabContent6];
  const selectEvents = [onTab1Select, onTab2Select, onTab3Select, onTab4Select, onTab5Select];

  const [currentIndex, setCurrentIndex] = React.useState(selectedIndex - 1);

  React.useEffect(() => {
    setCurrentIndex(selectedIndex - 1);
  }, [selectedIndex]);

  const handleChange = (newIndex: number) => {
    setCurrentIndex(newIndex);
    selectEvents[newIndex]?.();
    onTabSelect?.();
  };

  return (
    <IPhoneSafeAreaContainer iPhoneX={iPhoneSafeArea === 'ON'} safeAreaBackgroundColor="white">
      <div
        style={{
          display: 'flex',
          flexDirection: 'column-reverse',
          height: '100%',
          backgroundColor: 'white',
        }}
      >
        <div
          style={{
            display: 'flex',
            height: 49,
            width: '100%',
            borderTop: `1px solid ${colors.grey200}`,
            flex: 'none',
          }}
        >
          {items.map((item, index) => {
            const isActive = currentIndex === index;
            return (
              <div
                key={index}
                style={{
                  display: 'flex',
                  flexDirection: 'column',
                  alignItems: 'center',
                  justifyContent: 'center',
                  flex: 1,
                }}
                onClick={() => handleChange(index)}
              >
                <TDSIcon name={`${tabIconNameByControlLabel[item.icon]}${isActive ? '-active' : ''}`} size={24} />
                <Txt
                  color={isActive ? colors.blue700 : colors.grey800}
                  fontWeight="regular"
                  style={{ marginTop: 4, fontSize: 10, height: 13 }}
                >
                  {item.text}
                </Txt>
              </div>
            );
          })}
        </div>
        <ChildrenContainer>{tabContents[currentIndex]}</ChildrenContainer>
      </div>
    </IPhoneSafeAreaContainer>
  );
}

addPropertyControls(Tabbar, {
  numberOfItems: {
    title: '탭 개수',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: numberOfItemsLabels as any,
    defaultValue: numberOfItemsLabels[1],
  },
  selectedIndex: {
    title: '포커스',
    type: ControlType.Number,
    displayStepper: true,
    min: 1,
    max: 5,
    defaultValue: 1,
  },
  item1Text: {
    title: '1탭',
    type: ControlType.String,
    defaultValue: '홈',
  },
  item1Icon: {
    title: '↳ 아이콘',
    type: ControlType.Enum,
    options: tabIconLabels as any,
    defaultValue: tabIconLabels[0],
  },
  item2Text: {
    title: '2탭',
    type: ControlType.String,
    defaultValue: '내소비',
  },
  item2Icon: {
    title: '↳ 아이콘',
    type: ControlType.Enum,
    options: tabIconLabels as any,
    defaultValue: tabIconLabels[2],
  },
  item3Text: {
    title: '3탭',
    type: ControlType.String,
    defaultValue: '추천',
  },
  item3Icon: {
    title: '↳ 아이콘',
    type: ControlType.Enum,
    options: tabIconLabels as any,
    defaultValue: tabIconLabels[7],
  },
  item4Text: {
    title: '4탭',
    type: ControlType.String,
    defaultValue: '주식',
    hidden(props) {
      return props.numberOfItems < 4;
    },
  },
  item4Icon: {
    title: '↳ 아이콘',
    type: ControlType.Enum,
    options: tabIconLabels as any,
    defaultValue: tabIconLabels[6],
    hidden(props) {
      return props.numberOfItems < 4;
    },
  },
  item5Text: {
    title: '5탭',
    type: ControlType.String,
    defaultValue: '전체',
    hidden(props) {
      return props.numberOfItems < 4;
    },
  },
  item5Icon: {
    title: '↳ 아이콘',
    type: ControlType.Enum,
    options: tabIconLabels as any,
    defaultValue: tabIconLabels[5],
    hidden(props) {
      return props.numberOfItems < 4;
    },
  },
  iPhoneSafeArea: {
    title: '아이폰 X',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: iPhoneSafeAreaLabels as any,
    defaultValue: iPhoneSafeAreaLabels[1],
  },
  tabContent1: {
    title: '탭 1',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfNumberOfTabsIsLessThan(1),
  },
  tabContent2: {
    title: '탭 2',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfNumberOfTabsIsLessThan(2),
  },
  tabContent3: {
    title: '탭 3',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfNumberOfTabsIsLessThan(3),
  },
  tabContent4: {
    title: '탭 4',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfNumberOfTabsIsLessThan(4),
  },
  tabContent5: {
    title: '탭 5',
    type: ControlType.ComponentInstance,
    hidden: hideControlIfNumberOfTabsIsLessThan(5),
  },
  onTabSelect: {
    type: ControlType.EventHandler,
  },
  onTab1Select: {
    type: ControlType.EventHandler,
  },
  onTab2Select: {
    type: ControlType.EventHandler,
  },
  onTab3Select: {
    type: ControlType.EventHandler,
  },
  onTab4Select: {
    type: ControlType.EventHandler,
  },
  onTab5Select: {
    type: ControlType.EventHandler,
  },
});

(Tabbar as any).defaultProps = {
  width: 375,
  height: 667,
};

Tabbar.displayName = makeComponentDisplayName('Tabbar', '하단탭바');

function hideControlIfNumberOfTabsIsLessThan(length: number) {
  return (props: Partial<Props>) => {
    return props.numberOfItems < length;
  };
}

const ChildrenContainer = styled.div`
  position: relative;
  flex: 1;
  & > div[data-framer-component-type='Frame'],
  & > div[data-framer-component-type='Stack'] {
    width: 100% !important;
  }
`;
