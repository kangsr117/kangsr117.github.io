import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { useEffect, useState } from 'react';
import ReactLottie from 'react-lottie';
import { TDSComponent } from '../src/components/TDSComponent';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

enum State {
  Play,
  Pause,
  Stop,
}

const stateLabels = ['▶️', '⏸', '⏹'] as const;

type StateLabel = typeof stateLabels[number];

const stateByStateLabel: Record<StateLabel, State> = {
  '▶️': State.Play,
  '⏸': State.Pause,
  '⏹': State.Stop,
};

interface Props {
  lottieURL: string;
  lottieFilePath: string;
  loop: boolean;
  stateLabel: StateLabel;
  speed: number;
}

async function loadLottieData(jsonURL: string) {
  let response: Response;

  try {
    response = await fetch(jsonURL, {
      method: 'GET',
      credentials: 'omit',
      redirect: 'follow',
    });
  } catch (error) {
    throw new Error('로띠를 불러오는데 실패했습니다. 로띠 주소를 다시 확인해주세요.');
  }

  if (!response.ok) {
    throw new Error('로띠를 불러오는데 실패했습니다. 로띠 주소를 다시 확인해주세요.');
  }

  try {
    return await response.json();
  } catch (error) {
    throw new Error('유효한 로띠 JSON 형식이 아닙니다. 로띠를 확인해주세요.');
  }
}

export function Lottie({ lottieURL, lottieFilePath, loop, stateLabel, speed }: Props) {
  const [animationData, setAnimationData] = useState<string>();
  const [errorMessage, setErrorMessage] = useState<string>();

  useEffect(() => {
    loadLottieData(lottieFilePath ? lottieFilePath : lottieURL)
      .then(setAnimationData)
      .catch((error: Error) => setErrorMessage(error.message));
    return () => {
      setErrorMessage(undefined);
    };
  }, [lottieURL, lottieFilePath]);

  if (errorMessage !== undefined) {
    return <p>{errorMessage}</p>;
  }

  const state = stateByStateLabel[stateLabel];
  return (
    <TDSComponent
      name="Lottie"
      summary={{
        lottieURL: lottieFilePath ? lottieFilePath : lottieURL,
        loop,
        state,
        speed,
      }}
    >
      <ReactLottie
        // NOTE: re-render component when loop is updated to apply the new loop option.
        key={`${loop}`}
        height="auto"
        options={{
          animationData,
          rendererSettings: { preserveAspectRatio: 'xMidYMid meet' },
          loop,
          autoplay: true,
        }}
        isPaused={state === State.Pause}
        isStopped={state === State.Stop}
        speed={speed}
      />
    </TDSComponent>
  );
}

addPropertyControls(Lottie, {
  lottieURL: {
    title: '로띠주소',
    type: ControlType.String,
    defaultValue: 'https://static.toss.im/lotties/emoji/emoji-red-heart.json',
  },
  lottieFilePath: {
    title: '업로드',
    type: ControlType.File,
    allowedFileTypes: ['json'],
  },
  loop: {
    title: '반복',
    type: ControlType.Boolean,
    enabledTitle: 'ON',
    disabledTitle: 'OFF',
    defaultValue: true,
  },
  stateLabel: {
    title: '상태',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: stateLabels as any,
    defaultValue: stateLabels[0],
  },
  speed: {
    title: '속도',
    type: ControlType.Number,
    displayStepper: true,
    defaultValue: 1,
  },
});

(Lottie as any).defaultProps = {
  width: 200,
  height: 200,
};

Lottie.displayName = makeComponentDisplayName('Lottie', '로띠');
