import styled from '@emotion/styled';
import { addPropertyControls, ControlType, useIsInCurrentNavigationTarget, useNavigation } from 'framer';
import * as React from 'react';
import { ReactNode, useEffect, useState } from 'react';
import { colors } from '../@tossteam/colors';
import { default as TDSBottomSheet } from '../@tossteam/tds-web/react/components/BottomSheet';
import { default as TDSAgreement } from '../@tossteam/tds-web/react/components/NewAgreement';
import { default as Txt } from '../@tossteam/tds-web/react/components/Text';
import convertNewLineToJSX from '../@tossteam/tds-web/react/utils/convertNewLineToJSX';
import { ChildrenPlaceholder } from '../src/components/ChildrenPlaceholder';
import { IPhoneSafeAreaContainer } from '../src/components/iPhoneSafeAreaContainer';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { isStaticRenderTarget } from '../src/utils/isStaticRenderTarget';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import {
  Button,
  styleByControlLabel as buttonStyleByControlLabel,
  StyleLabel as ButtonStyleLabel,
  styleLabels as buttonStyleLabels,
  typeByControlLabel as buttonTypeByControlLabel,
  TypeLabel as ButtonTypeLabel,
  typeLabels as buttonTypeLabels,
} from './Button';

const typeLabels = ['커스텀', '글', '셀렉터', '약관'] as const;
const headerTypeLabels = ['없음', '타이틀', '타이틀 + 설명'] as const;

type TypeLabel = typeof typeLabels[number];
type HeaderTypeLabel = typeof headerTypeLabels[number];

interface Props {
  type: TypeLabel;
  headerType: HeaderTypeLabel;
  title: string;
  description: string;

  bodyText: string;

  selectorOptions: string;
  selectorSelectedIndex: number;

  agreementItems: string;

  showCTA: boolean;
  showCTAOptions: boolean;
  onlyOneButton: boolean;
  buttonText: string;
  rightButtonText: string;
  rightButtonType: ButtonTypeLabel;
  rightButtonStyle: ButtonStyleLabel;
  rightButtonEnabled: boolean;
  leftButtonText: string;
  leftButtonType: ButtonTypeLabel;
  leftButtonStyle: ButtonStyleLabel;
  leftButtonEnabled: boolean;

  iPhoneSafeAreaPadding: boolean;
  showDimmer: boolean;

  content: ReactNode;

  onDimmerClick?: () => void;
  onCTA_ButtonClick: () => void;
  onCTA_RightButtonClick: () => void;
  onCTA_LeftButtonClick: () => void;
}

function getHeaderComponent({ headerType, title, description }: Props) {
  return (
    <>
      {headerType !== '없음' && (
        <TDSBottomSheet.Header hasCloseButton={false}>{convertNewLineToJSX(title)}</TDSBottomSheet.Header>
      )}
      {headerType === '타이틀 + 설명' && (
        <TDSBottomSheet.HeaderDescription>{convertNewLineToJSX(description)}</TDSBottomSheet.HeaderDescription>
      )}
    </>
  );
}

function getContentComponent({
  type,
  headerType,

  bodyText,

  selectorOptions,
  selectorSelectedIndex,

  agreementItems,

  showCTA,
  content,
}: Props) {
  const [value, setValue] = React.useState(selectorSelectedIndex - 1);
  React.useEffect(() => {
    setValue(selectorSelectedIndex - 1);
  }, [selectorSelectedIndex]);

  switch (type) {
    case '커스텀':
      return (
        <Content>
          {React.Children.count(content) > 0 ? (
            content
          ) : (
            <BottomSheetContentPlaceholder bigRadius={headerType === '없음' || !showCTA} />
          )}
        </Content>
      );
    case '글':
      const topMargin = headerType === '없음' ? 24 : 0;
      const bottomMargin = !showCTA ? 30 : 0;
      return (
        <Txt
          typography="t5"
          color={colors.grey700}
          style={{
            margin: `${topMargin}px 24px ${bottomMargin}px 24px`,
            whiteSpace: 'pre-wrap',
          }}
        >
          {bodyText}
        </Txt>
      );
    case '셀렉터':
      return (
        <TDSBottomSheet.Select
          value={String(value)}
          onChange={e => setValue(Number(e.target.value))}
          options={selectorOptions.split('\n').map((name, index) => ({ name, value: String(index) }))}
        />
      );
    case '약관':
      return (
        <TDSAgreement>
          {agreementItems.split('\n').map(item => (
            <TDSAgreement.RowSmall>{item}</TDSAgreement.RowSmall>
          ))}
        </TDSAgreement>
      );
    default:
      return null;
  }
}

function getCTAComponent({
  showCTA,
  onlyOneButton,
  buttonText,
  rightButtonText,
  rightButtonType,
  rightButtonStyle,
  rightButtonEnabled,
  leftButtonText,
  leftButtonType,
  leftButtonStyle,
  leftButtonEnabled,

  onCTA_ButtonClick,
  onCTA_RightButtonClick,
  onCTA_LeftButtonClick,
}: Props) {
  if (!showCTA) {
    return null;
  }

  return onlyOneButton ? (
    <TDSBottomSheet.CTA
      type={buttonTypeByControlLabel[rightButtonType]}
      style={buttonStyleByControlLabel[rightButtonStyle]}
      disabled={!rightButtonEnabled}
      onClick={onCTA_ButtonClick}
      hasSafeAreaPadding
    >
      {buttonText}
    </TDSBottomSheet.CTA>
  ) : (
    <TDSBottomSheet.CTA.TypeB
      leftButton={
        <Button
          text={leftButtonText}
          type={leftButtonType}
          style={leftButtonStyle}
          disabled={leftButtonEnabled ? '활성' : '비활성'}
          onClick={onCTA_LeftButtonClick}
          disableInspector
        />
      }
      rightButton={
        <Button
          text={rightButtonText}
          type={rightButtonType}
          style={rightButtonStyle}
          disabled={rightButtonEnabled ? '활성' : '비활성'}
          onClick={onCTA_RightButtonClick}
          disableInspector
        />
      }
    />
  );
}

export function BottomSheet(originalProps: Props) {
  const props = useFilteringEventHandlersInInspector(originalProps);
  const {
    headerType,
    title,
    description,
    showCTA,
    onlyOneButton,
    rightButtonText,
    rightButtonType,
    rightButtonStyle,
    rightButtonEnabled,
    leftButtonText,
    leftButtonType,
    leftButtonStyle,
    leftButtonEnabled,
    showDimmer,
    onDimmerClick,
  } = props;

  const navigation = useNavigation();
  const isInCurrentNavigationTarget = useIsInCurrentNavigationTarget();

  const withoutAnimation = isStaticRenderTarget() || !props.showDimmer;
  const [open, setOpen] = useState(withoutAnimation);
  const [shouldGoBackOnExited, setShouldGoBackOnExited] = useState(false);
  useEffect(() => {
    if (withoutAnimation) {
      return;
    }

    const timeoutHandler = setTimeout(() => {
      setOpen(true);
      if (onDimmerClick === undefined) {
        setShouldGoBackOnExited(true);
      }
    }, 100);

    return () => {
      setShouldGoBackOnExited(false);
      clearTimeout(timeoutHandler);
    };
  }, [isInCurrentNavigationTarget]);

  return (
    <IPhoneSafeAreaContainer
      iPhoneX={props.iPhoneSafeAreaPadding}
      safeAreaHeight={props.showCTA ? 16 : undefined}
      safeAreaBackgroundColor="white"
    >
      <Container hideDimmer={!showDimmer} removeHeaderPadding={headerType === '없음'}>
        <TDSBottomSheet
          header={getHeaderComponent(props)}
          open={open}
          onClose={() => (onDimmerClick ?? setOpen)(false)}
          onExited={() => {
            if (shouldGoBackOnExited) {
              navigation.goBack();
              setShouldGoBackOnExited(false);
            }
          }}
          withoutAnimation={withoutAnimation}
        >
          <TDSComponent
            name="BottomSheet"
            summary={{
              title: headerType !== '없음' ? title : undefined,
              description: headerType === '타이틀 + 설명' ? description : undefined,
              leftButton:
                showCTA && !onlyOneButton
                  ? {
                      type: buttonTypeByControlLabel[leftButtonType],
                      style: buttonStyleByControlLabel[leftButtonStyle],
                      disabled: !leftButtonEnabled,
                      text: leftButtonText,
                    }
                  : undefined,
              [onlyOneButton ? 'button' : 'rightButton']: showCTA
                ? {
                    type: buttonTypeByControlLabel[rightButtonType],
                    style: buttonStyleByControlLabel[rightButtonStyle],
                    disabled: !rightButtonEnabled,
                    text: rightButtonText,
                  }
                : undefined,
            }}
          >
            <>
              {getContentComponent(props)}
              {getCTAComponent(props)}
            </>
          </TDSComponent>
        </TDSBottomSheet>
      </Container>
    </IPhoneSafeAreaContainer>
  );
}

addPropertyControls(BottomSheet, {
  type: {
    title: '🔢 종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: typeLabels as any,
    defaultValue: typeLabels[0],
  },
  headerType: {
    title: '🧢 헤더',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: headerTypeLabels as any,
    defaultValue: headerTypeLabels[1],
  },
  title: {
    title: '　 ↳ 타이틀',
    type: ControlType.String,
    displayTextArea: true,
    defaultValue: '바텀시트 타이틀',
    hidden(props) {
      return props.headerType === '없음';
    },
  },
  description: {
    title: '　 ↳ 설명',
    type: ControlType.String,
    displayTextArea: true,
    defaultValue: '바텀시트 설명',
    hidden(props) {
      return props.headerType !== '타이틀 + 설명';
    },
  },

  bodyText: {
    title: '📃 본문',
    type: ControlType.String,
    displayTextArea: true,
    defaultValue:
      '동해물과 백두산이 마르고 닳도록 하느님이 보우하사 우리나라 만세 무궁화 삼천리 화려강산 대한사람 대한으로 길이 보전하세 동해물과 백두산이 마르고 닳도록 하느님이 보우하사 우리나라 만세 무궁화 삼천리 화려강산 대한사람 대한으로 길이 보전하세',
    hidden(props) {
      return props.type !== '글';
    },
  },

  selectorOptions: {
    title: '✅ 셀렉터 옵션',
    type: ControlType.String,
    displayTextArea: true,
    defaultValue: '동해물과 백두산이\n마르고 닳도록\n하느님이 보우하사',
    hidden(props) {
      return props.type !== '셀렉터';
    },
  },
  selectorSelectedIndex: {
    title: '　 ↳ 포커스',
    type: ControlType.Number,
    displayStepper: true,
    defaultValue: 1,
    min: 1,
    max: 10,
    hidden(props) {
      return props.type !== '셀렉터';
    },
  },

  agreementItems: {
    title: '✅ 약관 옵션',
    type: ControlType.String,
    displayTextArea: true,
    defaultValue: '제3자 정보제공 동의서\n개인(신용)정보 제3자 제공\n사이버환전 이용안내 및 유의사항',
    hidden(props) {
      return props.type !== '약관';
    },
  },

  showCTA: {
    title: '🅿️ 하단CTA',
    type: ControlType.Boolean,
    enabledTitle: 'ON',
    disabledTitle: 'OFF',
    defaultValue: true,
  },
  showCTAOptions: {
    title: '　 ↳  버튼옵션',
    type: ControlType.Boolean,
    enabledTitle: '보기',
    disabledTitle: '가리기',
    defaultValue: false,
    hidden(props) {
      return !props.showCTA;
    },
  },
  onlyOneButton: {
    title: '🕹 버튼 개수',
    type: ControlType.Boolean,
    enabledTitle: '1개',
    disabledTitle: '2개',
    defaultValue: true,
    hidden(props) {
      return !props.showCTAOptions;
    },
  },
  buttonText: {
    title: '↳ 버튼 텍스트',
    type: ControlType.String,
    defaultValue: '확인',
    hidden(props) {
      return !props.showCTAOptions || !props.onlyOneButton;
    },
  },
  rightButtonText: {
    title: '↳ 오른쪽 텍스트',
    type: ControlType.String,
    defaultValue: '하기',
    hidden(props) {
      return !props.showCTAOptions || props.onlyOneButton;
    },
  },
  rightButtonStyle: {
    title: '　　↳ 타입',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonStyleLabels as any,
    defaultValue: buttonStyleLabels[0],
    hidden(props) {
      return !props.showCTAOptions;
    },
  },
  rightButtonType: {
    title: '　　↳ 색상',
    type: ControlType.Enum,
    options: buttonTypeLabels as any,
    defaultValue: buttonTypeLabels[0],
    hidden(props) {
      return !props.showCTAOptions;
    },
  },
  rightButtonEnabled: {
    title: '　　↳ 상태',
    type: ControlType.Boolean,
    enabledTitle: '활성',
    disabledTitle: '비활성',
    defaultValue: true,
    hidden(props) {
      return !props.showCTAOptions;
    },
  },
  leftButtonText: {
    title: '↳ 왼쪽 텍스트',
    type: ControlType.String,
    defaultValue: '안하기',
    hidden(props) {
      return !props.showCTAOptions || props.onlyOneButton;
    },
  },
  leftButtonStyle: {
    title: '　　↳ 타입',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonStyleLabels as any,
    defaultValue: buttonStyleLabels[1],
    hidden(props) {
      return !props.showCTAOptions || props.onlyOneButton;
    },
  },
  leftButtonType: {
    title: '　　↳ 색상',
    type: ControlType.Enum,
    options: buttonTypeLabels as any,
    defaultValue: buttonTypeLabels[1],
    hidden(props) {
      return !props.showCTAOptions || props.onlyOneButton;
    },
  },
  leftButtonEnabled: {
    title: '　　↳ 상태',
    type: ControlType.Boolean,
    enabledTitle: '활성',
    disabledTitle: '비활성',
    defaultValue: true,
    hidden(props) {
      return !props.showCTAOptions || props.onlyOneButton;
    },
  },
  iPhoneSafeAreaPadding: {
    title: '📱 아이폰X',
    type: ControlType.Boolean,
    enabledTitle: 'ON',
    disabledTitle: 'OFF',
    defaultValue: false,
  },
  showDimmer: {
    title: '🌚 Dimmer 배경 ',
    type: ControlType.Boolean,
    enabledTitle: '켜기',
    disabledTitle: '끄기',
    defaultValue: true,
  },

  content: {
    title: '자식 컨텐츠',
    type: ControlType.ComponentInstance,
    hidden(props) {
      return props.type !== '커스텀';
    },
  },

  onDimmerClick: {
    type: ControlType.EventHandler,
  },
  onCTA_ButtonClick: {
    title: 'CTA Button Click',
    type: ControlType.EventHandler,
  },
  onCTA_RightButtonClick: {
    type: ControlType.EventHandler,
  },
  onCTA_LeftButtonClick: {
    type: ControlType.EventHandler,
  },
});

(BottomSheet as any).defaultProps = {
  width: 375,
  height: 667,
};

BottomSheet.displayName = makeComponentDisplayName('BottomSheet', '바텀시트');

const Container = styled.div<{
  hideDimmer: boolean;
  removeHeaderPadding: boolean;
}>`
  .modal__dimmer {
    background-color: rgba(0, 0, 0, 0.56);
    ${({ hideDimmer }) => (hideDimmer ? 'background: transparent;' : '')}
  }

  .bottom-sheet__header-wrapper {
    ${({ removeHeaderPadding }) => (removeHeaderPadding ? 'padding: 0;' : '')}
  }
`;

const Content = styled.div`
  & > div[data-framer-component-type='Frame'],
  & > div[data-framer-component-type='Stack'] {
    position: relative;
  }
`;

const BottomSheetContentPlaceholder = styled(ChildrenPlaceholder)<{
  bigRadius: boolean;
}>`
  height: 228px;
  border-radius: ${({ bigRadius }) => (bigRadius ? 16 : 6)}px;
  margin: ${({ bigRadius }) => (bigRadius ? 4 : 0)}px;
`;
