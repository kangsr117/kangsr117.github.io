import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import {
  default as TDSListFooter,
  Props as TDSListFooterProps,
} from '../@tossteam/tds-web/react/components/ListFooter/ListFooter01';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import { colors as canvasColors } from './canvas';

const textAlignLabels = ['왼쪽', '가운데'] as const;
const withIconLabels = ['있음', '없음'] as const;

type TextAlignLabel = typeof textAlignLabels[number];
type WithIcomLabel = typeof withIconLabels[number];

const textAlignByControlLabel: {
  [key in TextAlignLabel]: TDSListFooterProps['titleTextAlign'];
} = {
  왼쪽: 'left',
  가운데: 'center',
};

interface Props {
  text: string;
  textColor: string;
  textAlign: TextAlignLabel;
  withIcon: WithIcomLabel;
  iconName: string;

  onListClick?: () => void;
}

export function ListFooter(props: Props) {
  const { text, textColor, textAlign, withIcon, iconName, onListClick } = useFilteringEventHandlersInInspector(props);

  return (
    <TDSComponent
      name="ListFooter"
      summary={{
        icon: withIcon === '있음' ? iconName : undefined,
        textColor,
        textAlign: textAlignByControlLabel[textAlign],
        text,
      }}
    >
      <TDSListFooter
        icon={withIcon === '있음' ? iconName : undefined}
        titleStyle={{
          color: textColor,
        }}
        titleTextAlign={textAlignByControlLabel[textAlign]}
        liAttributes={{
          onClick: onListClick,
          style: { background: 'transparent' },
        }}
      >
        {text}
      </TDSListFooter>
    </TDSComponent>
  );
}

addPropertyControls(ListFooter, {
  text: {
    title: '텍스트',
    type: ControlType.String,
    defaultValue: '더 보기',
  },
  textColor: {
    title: '↳ 텍스트 컬러',
    type: ControlType.Color,
    defaultValue: canvasColors.Blue500,
  },
  textAlign: {
    title: '↳ 텍스트 정렬',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: textAlignLabels as any,
    defaultValue: textAlignLabels[1],
  },
  withIcon: {
    title: '아이콘',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: withIconLabels as any,
    defaultValue: withIconLabels[1],
  },
  iconName: {
    title: '↳ 아이콘 이름',
    type: ControlType.String,
    defaultValue: 'icn-add-grey',
    hidden(props) {
      return props.withIcon === '없음';
    },
  },

  onListClick: {
    type: ControlType.EventHandler,
  },
});

(ListFooter as any).defaultProps = {
  width: 375,
  height: 59,
};

ListFooter.displayName = makeComponentDisplayName('ListFooter', '리스트푸터');
