import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { colors } from '../@tossteam/colors';
import { default as TDSListHeader } from '../@tossteam/tds-web/react/components/ListHeader/ListHeader';
import { TDSComponent } from '../src/components/TDSComponent';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const typeLabels = ['1줄', '2줄', '셀렉터'] as const;
const rows1TypeLabels = ['큰', '작은', '작은회색'] as const;
const rows2TypeLabels = ['일반', '큰'] as const;

type TypeLabel = typeof typeLabels[number];
type Rows1TypeLabel = typeof rows1TypeLabels[number];
type Rows2TypeLabel = typeof rows2TypeLabels[number];

const rows1ComponentByControlLabel: {
  [key in Rows1TypeLabel]: JSX.Element;
} = {
  큰: <TDSListHeader.Row1 type="A" border="none" />,
  작은: <TDSListHeader.Row1 type="B" border="none" />,
  작은회색: <TDSListHeader.Row1 type="B" color={colors.grey600} border="none" />,
};

const rows1ComponentTypeName: { [key in Rows1TypeLabel]: string } = {
  큰: '19 Medium',
  작은: '16 Medium',
  작은회색: '16 Medium',
};

const rows2ComponentByControlLabel: {
  [key in Rows2TypeLabel]: JSX.Element;
} = {
  일반: <TDSListHeader.Row2 type="A" topText="" bottomText="" border="none" />,
  큰: <TDSListHeader.Row2 type="B" topText="" bottomText="" border="none" />,
};

const rows2ComponentTypeName: { [key in Rows2TypeLabel]: string } = {
  일반: 'top: 13 Regular / bottom: 22 Medium',
  큰: 'top: 16 Regular / bottom: 26 Medium',
};

interface Props {
  type: TypeLabel;
  rows1Type: Rows1TypeLabel;
  rows2Type: Rows2TypeLabel;
  leftText: string;
  topText: string;
  bottomText: string;

  hideRight: boolean;
  rightText: string;
  withoutRightTextArrow: boolean;
}

function getElement({
  type,
  rows1Type,
  rows2Type,
  leftText,
  topText,
  bottomText,

  hideRight,
  rightText,
  withoutRightTextArrow,
}: Props) {
  switch (type) {
    case '1줄':
      return React.cloneElement(
        rows1ComponentByControlLabel[rows1Type],
        {
          right: hideRight ? undefined : (
            <TDSListHeader.RightText size="medium" withArrow={!withoutRightTextArrow}>
              {rightText}
            </TDSListHeader.RightText>
          ),
          style: { background: 'transparent' },
        },
        leftText
      );
    case '2줄':
      return React.cloneElement(rows2ComponentByControlLabel[rows2Type], {
        topText,
        bottomText,
        right: hideRight ? undefined : (
          <TDSListHeader.RightText size="medium" withArrow={!withoutRightTextArrow}>
            {rightText}
          </TDSListHeader.RightText>
        ),
        style: { background: 'transparent' },
      });
    case '셀렉터':
      return <TDSListHeader.Selector style={{ background: 'transparent' }}>{leftText}</TDSListHeader.Selector>;
    default:
      return undefined;
  }
}

export function ListHeader(props: Props) {
  const element = getElement(props);
  return (
    <TDSComponent
      name="ListHeader"
      summary={{
        titleType:
          props.type === '셀렉터'
            ? 'selector'
            : props.type === '1줄'
            ? rows1ComponentTypeName[props.rows1Type]
            : rows2ComponentTypeName[props.rows2Type],
        title: props.type === '1줄' ? props.leftText : props.bottomText,
        titleColor: props.type === '1줄' && props.rows1Type === '작은회색' ? colors.grey600 : colors.grey900,
        subtitle: props.type === '2줄' ? props.topText : undefined,
        subtitleColor: props.type === '1줄' && props.rows1Type === '작은회색' ? colors.grey600 : colors.grey900,
        rightText: !props.hideRight ? props.rightText : undefined,
        rightTextColor: colors.grey600,
        rightTextArrow: !props.withoutRightTextArrow ? true : undefined,
      }}
    >
      {element}
    </TDSComponent>
  );
}

addPropertyControls(ListHeader, {
  type: {
    title: '✍️ 컨텐츠',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: typeLabels as any,
    defaultValue: typeLabels[0],
  },
  rows1Type: {
    title: '↳ 종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: rows1TypeLabels as any,
    defaultValue: rows1TypeLabels[0],
    hidden(props) {
      return props.type !== '1줄';
    },
  },
  rows2Type: {
    title: '↳ 종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: rows2TypeLabels as any,
    defaultValue: rows2TypeLabels[0],
    hidden(props) {
      return props.type !== '2줄';
    },
  },
  leftText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '리스트 타이틀',
    hidden(props) {
      return props.type === '2줄';
    },
  },
  topText: {
    title: '↳ 위쪽',
    type: ControlType.String,
    defaultValue: '보조텍스트',
    hidden(props) {
      return props.type !== '2줄';
    },
  },
  bottomText: {
    title: '↳ 아래쪽',
    type: ControlType.String,
    defaultValue: '리스트 타이틀',
    hidden(props) {
      return props.type !== '2줄';
    },
  },

  hideRight: {
    title: '오른쪽 옵션',
    type: ControlType.Boolean,
    enabledTitle: 'OFF',
    disabledTitle: 'ON',
    defaultValue: true,
    hidden(props) {
      return props.type === '셀렉터';
    },
  },
  rightText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '보조텍스트',
    hidden(props) {
      return props.hideRight;
    },
  },
  withoutRightTextArrow: {
    title: '↳ 화살표',
    type: ControlType.Boolean,
    enabledTitle: 'OFF',
    disabledTitle: 'ON',
    defaultValue: true,
    hidden(props) {
      return props.hideRight;
    },
  },
});

(ListHeader as any).defaultProps = {
  width: 375,
  height: 61,
};

ListHeader.displayName = makeComponentDisplayName('ListHeader', '리스트헤더');
