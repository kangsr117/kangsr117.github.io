import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { List as TDSList } from '../@tossteam/tds-web/react/components/List';
import {
  TableRowLeft as TDSTableRowLeft,
  TableRowRight as TDSTableRowRight,
} from '../@tossteam/tds-web/react/components/TableRow';
import { default as Txt } from '../@tossteam/tds-web/react/components/Text';
import { FontWeightValue } from '../@tossteam/tds-web/react/components/Text/Text';
import { TDSComponent } from '../src/components/TDSComponent';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import { colors as canvasColors } from './canvas';

const alignmentLabels = ['양끝', '좌측'] as const;
const fontWeightLabels = ['레귤러', '미디엄', '볼드'] as const;

type AlignmentLabel = typeof alignmentLabels[number];
type FontWeightLabel = typeof fontWeightLabels[number];

const componentByAlignmentControlLabel: {
  [key in AlignmentLabel]: JSX.Element;
} = {
  좌측: <TDSTableRowLeft left="" right="" />,
  양끝: <TDSTableRowRight left="" right="" />,
};

const fontWeightByControlLabel: {
  [key in FontWeightLabel]: FontWeightValue;
} = {
  레귤러: 'regular',
  미디엄: 'medium',
  볼드: 'bold',
};

interface Props {
  alignment: AlignmentLabel;
  leftRatio: number;
  leftTextFontWeight: FontWeightLabel;
  leftText: string;
  leftTextColor: string;
  rightTextFontWeight: FontWeightLabel;
  rightText: string;
  rightTextColor: string;
}

export function TableRow({
  alignment,
  leftRatio,
  leftTextFontWeight,
  leftText,
  leftTextColor,
  rightTextFontWeight,
  rightText,
  rightTextColor,
}: Props) {
  const element = componentByAlignmentControlLabel[alignment];
  return (
    <TDSList>
      <TDSComponent
        name={`TableRow`}
        summary={{
          type: alignment === '양끝' ? 'TableRowRight' : 'TableRowLeft',
          leftRatio,
          leftText,
          leftTextColor,
          leftTextFontWeight: fontWeightByControlLabel[leftTextFontWeight],
          rightText,
          rightTextColor,
          rightTextFontWeight: fontWeightByControlLabel[rightTextFontWeight],
        }}
      >
        {React.cloneElement(element, {
          leftRatio,
          left: (
            <Txt fontWeight={fontWeightByControlLabel[leftTextFontWeight]} color={leftTextColor}>
              {leftText}
            </Txt>
          ),
          right: (
            <Txt fontWeight={fontWeightByControlLabel[rightTextFontWeight]} color={rightTextColor}>
              {rightText}
            </Txt>
          ),
        })}
      </TDSComponent>
    </TDSList>
  );
}

addPropertyControls(TableRow, {
  alignment: {
    title: '🎯 정렬',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: alignmentLabels as any,
    defaultValue: alignmentLabels[0],
  },
  leftRatio: {
    title: '왼쪽 텍스트 비율',
    type: ControlType.Number,
    min: 10,
    max: 80,
    defaultValue: 30,
  },
  leftTextFontWeight: {
    title: '• 왼쪽',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: fontWeightLabels as any,
    defaultValue: fontWeightLabels[0],
  },
  leftText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '텍스트',
  },
  leftTextColor: {
    title: '↳ 컬러',
    type: ControlType.Color,
    defaultValue: canvasColors['Grey700 - 일반적인 텍스트'],
  },
  rightTextFontWeight: {
    title: '• 오른쪽',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: fontWeightLabels as any,
    defaultValue: fontWeightLabels[1],
  },
  rightText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '텍스트',
  },
  rightTextColor: {
    title: '↳ 컬러',
    type: ControlType.Color,
    defaultValue: canvasColors['Grey700 - 일반적인 텍스트'],
  },
});

(TableRow as any).defaultProps = {
  width: 375,
  height: 44,
};

TableRow.displayName = makeComponentDisplayName('Table', '테이블');
