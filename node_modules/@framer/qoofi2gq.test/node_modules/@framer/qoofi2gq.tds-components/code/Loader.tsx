import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { Loader as TDSLoader, Props as TDSLoaderProps } from '../@tossteam/tds-web/react/components/Loader/Loader';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import { useLoading } from '../src/hooks/useLoading';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const sizeLabels = ['Small', 'Medium', 'Large'] as const;
const typeLabels = ['블루', '다크', '화이트'] as const;
const withLabelLabels = ['있음', '없음'] as const;
const loadingLabels = ['영원히', '타임아웃'] as const;

type SizeLabel = typeof sizeLabels[number];
type TypeLabel = typeof typeLabels[number];
type WithLabelLabel = typeof withLabelLabels[number];
type LoadingLabel = typeof loadingLabels[number];

interface Props {
  size: SizeLabel;
  type: TypeLabel;
  withLabel: WithLabelLabel;
  label: string;
  loading: LoadingLabel;
  loadingTimeoutDelay: number;

  onLoadingEnd?: () => void;
}

const sizeByControlLabel: {
  [key in SizeLabel]: TDSLoaderProps['size'];
} = {
  Small: 'small',
  Medium: 'medium',
  Large: 'large',
};

const typeByControlLabel: {
  [key in TypeLabel]: TDSLoaderProps['type'];
} = {
  블루: 'primary',
  다크: 'dark',
  화이트: 'light',
};

export function Loader(props: Props) {
  const {
    size,
    type,
    withLabel,
    label,
    loading,
    loadingTimeoutDelay,
    onLoadingEnd,
  } = useFilteringEventHandlersInInspector(props);

  useLoading({
    duration: loading === '영원히' ? 0 : loadingTimeoutDelay * 1000,
    onFinish: onLoadingEnd,
  });

  return (
    <TDSComponent
      name="Loader"
      summary={{
        size: sizeByControlLabel[size],
        type: typeByControlLabel[type],
        label: withLabel === '있음' ? label : undefined,
      }}
    >
      <TDSLoader
        size={sizeByControlLabel[size]}
        type={typeByControlLabel[type]}
        label={withLabel === '있음' ? label : undefined}
      />
    </TDSComponent>
  );
}

addPropertyControls(Loader, {
  size: {
    title: '크기',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: sizeLabels as any,
    defaultValue: 'Medium',
  },
  type: {
    title: '색상',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: typeLabels as any,
    defaultValue: '블루',
  },
  withLabel: {
    title: '라벨',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: withLabelLabels as any,
    defaultValue: '없음',
  },
  label: {
    title: '↳ 라벨 텍스트',
    type: ControlType.String,
    defaultValue: '내역을 불러오고 있습니다',
    hidden(props) {
      return props.withLabel === '없음';
    },
  },
  loading: {
    title: '로딩',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: loadingLabels as any,
    defaultValue: '영원히',
  },
  loadingTimeoutDelay: {
    title: '↳ 로딩시간',
    type: ControlType.Number,
    defaultValue: 3,
    min: 1,
    max: 10,
    hidden(props) {
      return props.loading !== '타임아웃';
    },
  },
  onLoadingEnd: {
    type: ControlType.EventHandler,
  },
});

(Loader as any).defaultProps = {
  width: 40,
  height: 40,
};

Loader.displayName = makeComponentDisplayName('Loader', '로더');
