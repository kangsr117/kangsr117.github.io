import { useEffect, useState } from 'react';

interface Options {
  /**
   * Set to 0 to make it infinite.
   */
  duration?: number;
  enabled?: boolean;
  onFinish?: () => void;
}

export function useLoading({ duration = 0, enabled = true, onFinish }: Options): boolean {
  const [isLoading, setIsLoading] = useState(enabled);

  useEffect(() => {
    if (!enabled) {
      setIsLoading(false);
      return;
    }

    setIsLoading(true);
    if (duration === 0) {
      return;
    }

    const timeoutID = setTimeout(() => {
      setIsLoading(false);
      onFinish?.();
    }, duration);

    return () => {
      clearTimeout(timeoutID);
    };
  }, [enabled, duration, onFinish]);

  return isLoading;
}
