import { useInspectorContext } from '../../code/Inspector';

// TODO: hooks 대신 addPropertyControl과 컴포넌트 구현체 사이에 브릿지 역할을 하는 모듈을 만들면 더 확장성 있게 구현 가능할 것 같다 (hoc 혹은 extend 함수 이용)

function undefinedIfEventHandler<T>(object: T): T | undefined {
  // FIXME: make checker more accurate
  if (typeof object === 'function') {
    return undefined;
  }

  return object;
}

/**
 * Filter all EventHandlers from props when component is wrapped in Inspector.
 */
export function useFilteringEventHandlersInInspector<T>(props: T): T {
  const { inInspector } = useInspectorContext();
  if (true || !inInspector) {
    return props;
  }

  return (Object.entries(props).reduce((previousValue, currentValue) => ({
    ...previousValue,
    [currentValue[0]]: undefinedIfEventHandler(currentValue[1]),
  })) as any) as T;
}
