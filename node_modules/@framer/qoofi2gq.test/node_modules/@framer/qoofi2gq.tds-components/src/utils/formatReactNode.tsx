import { isValidElement, ReactElement, ReactNode } from 'react';
import { colorNameByCanvasColorValue, colorNameByHexCode } from '../constants/colors';

function formatStringValue(value: string) {
  const colorName = colorNameByHexCode[value.toLowerCase()] ?? colorNameByCanvasColorValue[value];
  if (colorName !== undefined) {
    return `colors.${colorName}`;
  }

  return `\`${value}\``;
}

function getReactElementName(reactElement: ReactElement): string {
  if (typeof reactElement.type === 'string') {
    return reactElement.type;
  }

  return (reactElement.type as any).name ?? 'C';
}

export function formatObjectValue<T extends object = object>(objectValue: T): string {
  return `{
    ${Object.entries(objectValue)
      .filter(([_, value]) => value !== undefined && value !== null)
      .map(([key, value]) => {
        let valueCode = value;
        if (isValidElement(value)) {
          valueCode = formatReactElement(value);
        } else if (typeof value === 'string') {
          valueCode = formatStringValue(value);
        } else if (typeof value === 'object') {
          valueCode = formatObjectValue(value);
        }
        return `'${key}': ${valueCode}`;
      })
      .join(', ')}
  }`;
}

function formatJSXAttributeValue(value: any): string {
  if (typeof value === 'string') {
    return `{${formatStringValue(value)}}`;
  }

  if (isValidElement(value)) {
    return `{${formatReactElement(value)}}`;
  }

  if (typeof value === 'object') {
    return `{${formatObjectValue(value)}}`;
  }

  return `{${JSON.stringify(value)}}`;
}

function formatComponentProps<T extends object = object>(props: T): string {
  return Object.entries(props)
    .filter(([_, value]) => value !== undefined && value !== null)
    .map(([key, value]) => `${key}=${formatJSXAttributeValue(value)}`)
    .join(' ');
}

function formatReactElement(element: ReactElement): string {
  if (!isValidElement(element)) {
    throw new Error('An error occurred. Please report this to Design Platform Team. - invalid jsx element');
  }

  const componentName = getReactElementName(element);
  const { children, ...props } = element.props as any;
  const propsCode = props ? formatComponentProps(props) : '';

  if (!children) {
    return `<${componentName}
              ${propsCode}
            />`;
  }

  return `<${componentName}
            ${propsCode}
          >
            ${formatReactNode(children)}
          </${componentName}>`;
}

export function formatReactNode(node: ReactNode) {
  if (isValidElement(node)) {
    return formatReactElement(node);
  }

  if (typeof node === 'string') {
    return node;
  }

  if (Array.isArray(node)) {
    return node.map(formatReactNode).join('\n');
  }

  return JSON.stringify(node);
}
