// https://github.com/jvandemo/generator-angular2-library/issues/221
import autosizeProxy from 'autosize';
import classnames from 'classnames';
import { defaultTo } from 'lodash-es';
import * as React from 'react';

import { Context as FormGroupContext } from '../Form/FormGroup';
const autosize = autosizeProxy;

export type TextAreaAttributes = {
  /**
   * `TextArea`를 Controlled component로 사용하기 위한 value를 지정합니다.
   */
  value?: string;
} & Pick<
  React.TextareaHTMLAttributes<HTMLTextAreaElement>,
  | 'autoComplete'
  | 'autoFocus'
  | 'disabled'
  | 'maxLength'
  | 'minLength'
  | 'name'
  | 'readOnly'
  | 'rows'
  | 'placeholder'
  | 'onChange'
  | 'onFocus'
  | 'onBlur'
  | 'onClick'
>;

export type Props = {
  /**
   * 컴포넌트의 root element(`div`)에 추가되는 className입니다.
   */
  className?: string;

  /**
   * 에러 상태를 표시합니다.
   */
  hasError?: boolean;
} & TextAreaAttributes;

export default class TextArea extends React.PureComponent<Props> {
  private inputRef: React.RefObject<HTMLTextAreaElement> = React.createRef();

  public focus() {
    this.inputRef.current!.focus();
  }

  public get value() {
    return this.inputRef.current!.value;
  }

  public componentDidMount() {
    if (this.inputRef.current !== null) {
      autosize(this.inputRef.current);
    }
  }

  public componentWillUnmount() {
    if (this.inputRef.current !== null) {
      autosize.destroy(this.inputRef.current);
    }
  }

  public render() {
    const {
      className,
      autoComplete,
      autoFocus,
      disabled,
      maxLength,
      minLength,
      name,
      readOnly,
      rows,
      placeholder,
      hasError,
      value,
      onFocus,
      onBlur,
      onClick,
    } = this.props;

    return (
      <FormGroupContext.Consumer>
        {formGroupContext => (
          <div
            className={classnames(
              'text-area',
              'font-size--16',
              {
                'form-control': formGroupContext.isInForm,
                'text-area--disabled': disabled,
                'text-area--error': defaultTo(hasError, formGroupContext.hasError),
              },
              className
            )}
          >
            <textarea
              className="text-area__input"
              ref={this.inputRef}
              autoComplete={autoComplete}
              autoFocus={autoFocus}
              disabled={disabled}
              maxLength={maxLength}
              minLength={minLength}
              name={name}
              readOnly={readOnly}
              rows={rows}
              placeholder={placeholder}
              value={value}
              onChange={this.handleChange}
              onFocus={onFocus}
              onBlur={onBlur}
              onClick={onClick}
            />
            <span className="text-area__bottom-line" />
          </div>
        )}
      </FormGroupContext.Consumer>
    );
  }

  private handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
    const { onChange } = this.props;

    if (onChange === undefined) {
      return;
    }

    onChange(event);
  };
}
