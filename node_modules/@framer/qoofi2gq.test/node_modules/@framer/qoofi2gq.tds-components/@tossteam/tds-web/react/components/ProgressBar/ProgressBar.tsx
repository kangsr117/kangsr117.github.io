import classnames from 'classnames';
import * as React from 'react';

export interface Props {
  className?: string;

  /**
   * 막대를 얼마나 채울지 정합니다. (0.0 ~ 1.0)
   */
  progress: number;

  /**
   * `ProgressBar`의 크기를 정합니다.
   */
  size?: 'light' | 'normal' | 'bold';

  /**
   * `ProgressBar`의 트랙에 채워지는 색상을 바꿉니다.
   */
  color?: string;

  /**
   * @description 애니메이션을 사용할지 여부를 결정합니다.
   * @default false
   */
  animate?: boolean;
}

function ProgressBar({ className, progress, size, color, animate: shouldAnimate = false }: Props) {
  const [isAnimating, setIsAnimating] = React.useState(!shouldAnimate);

  React.useEffect(() => {
    const timeout = window.setTimeout(() => {
      setIsAnimating(true);
    });

    return () => {
      window.clearTimeout(timeout);
    };
  }, []);

  return (
    <div
      className={classnames('progress-bar', { [`progress-bar--size-${size}`]: size }, className)}
    >
      <span
        className="progress-bar__filler"
        style={{
          transform: `translateX(${isAnimating ? progress * 100 : 0}%)`,
          backgroundColor: color,
        }}
      />
    </div>
  );
}

export default React.memo(ProgressBar);
