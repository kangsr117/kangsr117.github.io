import * as React from "react";
import { ReactNode, useState, useMemo, useContext } from "react";
import cx from "classnames";

import isSafeAreaExists from "../../utils/isSafeAreaExists";
import { PortalConsumer } from "../../providers/PortalContext";
import { ContainerContext } from "../Container";
import useBottomCTAStyle from "./hooks/useFixedStyle";

export interface Props {
  topText: string;
  bottomText: string;
  button: ReactNode;
  className?: string;
  hasSafeAreaPadding?: boolean;
  takeSpace?: boolean;
  fixed?: boolean;
}

function TypeC({
  bottomText,
  topText,
  button,
  className,
  hasSafeAreaPadding = true,
  fixed = false,
  takeSpace = fixed,
}: Props) {
  const [spaceHeight, setSpaceHeight] = useState(0);
  const enableSafeArea = useMemo(() => {
    return hasSafeAreaPadding && isSafeAreaExists();
  }, [hasSafeAreaPadding]);
  const isInContainer = useContext(ContainerContext);

  const { style } = useBottomCTAStyle({ isElementFixed: fixed });

  const content = (
    <div
      className={cx("bottom-cta", "bottom-cta--c", className, {
        "bottom-cta--fixed": fixed,
        "bottom-cta--c--safe-area": enableSafeArea,
        "bottom-cta--in-container": fixed && isInContainer,
      })}
      style={style}
      ref={(element) => {
        if (element && takeSpace) {
          setSpaceHeight(element.clientHeight);
        }
      }}
    >
      <div className="bottom-cta--c__left">
        <span className={cx("bottom-cta--c__top-text", "font-size--15")}>
          {topText}
        </span>
        <span className={cx("bottom-cta--c__bottom-text", "font-size--20")}>
          {bottomText}
        </span>
      </div>
      <div className="bottom-cta--c__right">{button}</div>
      <div className="inset-checker" id="inset-checker" />
    </div>
  );

  if (fixed) {
    return (
      <>
        <div style={{ height: spaceHeight }} />
        <PortalConsumer>{content}</PortalConsumer>
      </>
    );
  }

  return (
    <>
      <div style={{ height: spaceHeight }} />
      {content}
    </>
  );
}

export default TypeC;
