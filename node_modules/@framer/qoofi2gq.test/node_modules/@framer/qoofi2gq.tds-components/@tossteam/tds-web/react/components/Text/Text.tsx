import { adaptive } from "../../../../colors";
import classnames from "classnames";
import * as React from "react";

import convertNewLineToJSX from "../../utils/convertNewLineToJSX";

// https://stackoverflow.com/questions/51845773/getting-a-union-type-with-all-string-enum-values
export const Typography = {
  T1: "t1",
  T2: "t2",
  T3: "t3",
  T4: "t4",
  T5: "t5",
  T6: "t6",
  T7: "t7",
  ST1: "st1",
  ST2: "st2",
  ST3: "st3",
  ST4: "st4",
  ST5: "st5",
  ST6: "st6",
  ST7: "st7",
  ST8: "st8",
  ST9: "st9",
  ST10: "st10",
  ST11: "st11",
} as const;

export type TypographyValue = typeof Typography[keyof typeof Typography];

export const FontWeight = {
  Regular: "regular" as "regular",
  Medium: "medium" as "medium",
  Semibold: "semibold" as "semibold",
  Bold: "bold" as "bold",
};
export type FontWeightValue = typeof FontWeight[keyof typeof FontWeight];

interface BaseProps {
  children?: React.ReactNode;
  className?: string;
  typography?: TypographyValue;
  fontWeight?: FontWeightValue;
  color?: string;
  ellipsisAfterLines?: number;
  stringToJSX?: boolean;
  display?: React.CSSProperties["display"];
  /**
   * @description word-break: keep-all을 적용할지 여부를 나타냅니다.
   * @default true
   */
  wordBreak?: boolean;
  /**
   * @deprecated
   */
  spanAttributes?: React.AllHTMLAttributes<any>;
}

export { BaseProps as Props };

type Props<Element extends keyof JSX.IntrinsicElements = "span"> = BaseProps & {
  as?: Element;
} & Omit<React.AllHTMLAttributes<Element>, "as">;

export function Text<Element extends keyof JSX.IntrinsicElements = "span">({
  as: Component = "span" as any,
  className,
  children,
  ellipsisAfterLines,
  typography,
  fontWeight,
  color = adaptive.grey900,
  stringToJSX,
  display = "inline-block",
  style,
  spanAttributes,
  wordBreak = true,
  ...props
}: Props<Element>) {
  const adaptiveKey = React.useMemo(() => {
    return Object.entries(adaptive).find(([, variable]) => {
      return variable === color;
    })?.[0];
  }, [color]);

  return (
    <Component
      {...props}
      {...(spanAttributes as any)}
      className={classnames(
        "text",
        {
          [`adaptive-${adaptiveKey}-text`]: adaptiveKey != null, // CSS Variable을 지원하지 않는 브라우저에서 Fallback을 위한 classname
          "text--single-line":
            ellipsisAfterLines !== undefined && ellipsisAfterLines === 1,
          "text--multi-line":
            ellipsisAfterLines !== undefined && ellipsisAfterLines > 1,
          "text--word-break": wordBreak,
          [`typography-${typography}`]: typography,
          [`text--font-weight-${fontWeight}`]: fontWeight,
          [`text--display-${display}`]: display,
          [`text--as`]: Component !== "span",
        },
        className
      )}
      style={{
        color,
        WebkitLineClamp:
          ellipsisAfterLines !== undefined && ellipsisAfterLines > 1
            ? ellipsisAfterLines
            : undefined,
        ...style,
      }}
    >
      {stringToJSX === true && typeof children === "string"
        ? convertNewLineToJSX(children)
        : children}
    </Component>
  );
}

export default Text;
