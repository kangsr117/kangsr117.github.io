import { useState, useCallback, useRef, useEffect } from 'react';

enum NamedKey {
  RETURN = 'Enter',
  SPACE = ' ',
  UP = 'ArrowUp',
  DOWN = 'ArrowDown',
  RIGHT = 'ArrowRight',
  LEFT = 'ArrowLeft',
  HOME = 'Home',
  END = 'End',
}

export default function useFocusChangeByKeyEvent(
  currentIndex: number,
  indexCount: number,
  onEnter: (focusedIndex: number) => void = () => {}
) {
  const [focusedIndex, setFocusedIndex] = useState<number>(currentIndex);
  const onEnterRef = useRef(onEnter);

  useEffect(() => {
    onEnterRef.current = onEnter;
  }, [onEnter]);

  const handleFocusChangeByKeyEvent = useCallback(
    (e: React.KeyboardEvent) => {
      switch (e.key) {
        case NamedKey.HOME:
          setFocusedIndex(0);
          break;
        case NamedKey.END:
          setFocusedIndex(indexCount - 1);
          break;
        case NamedKey.UP:
        case NamedKey.LEFT:
          if (focusedIndex === 0) {
            setFocusedIndex(indexCount - 1);
          } else {
            setFocusedIndex(focusedIndex - 1);
          }
          break;
        case NamedKey.DOWN:
        case NamedKey.RIGHT:
          if (focusedIndex === indexCount - 1) {
            setFocusedIndex(0);
          } else {
            setFocusedIndex(focusedIndex + 1);
          }
          break;
        case NamedKey.RETURN:
        case NamedKey.SPACE:
          onEnterRef.current(focusedIndex);
          break;
      }
    },
    [focusedIndex, indexCount]
  );

  return [focusedIndex, handleFocusChangeByKeyEvent] as const;
}
