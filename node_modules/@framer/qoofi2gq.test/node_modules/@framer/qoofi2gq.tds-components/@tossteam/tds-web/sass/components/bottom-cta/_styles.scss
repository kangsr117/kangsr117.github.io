@import '../../utils/utils';
@import '../../common/mixins/z-index';

$top-gradient-height: 34px;

$bottom-padding: 20px;
// FIXME: https://github.com/webpack-contrib/sass-loader/issues/528
$safe-area-bottom-padding: m#{a}x($bottom-padding, env(safe-area-inset-bottom));

@mixin safe-area-on-bottom-sheet {
  .bottom-sheet & {
    // 당연하지만 max(20px, 0px)은 20px임.
    // CSS Nano 등으로 minify를 돌릴 시 0px은 자동으로 0이됨.
    // 근데 버그인지 스펙인지 모르겠으나 max(20px, 0)이 0px이 되는 현상이 있음 (크롬, 사파리 동일).
    // 다행히도 CSSvariable에는 px을 지우지 않음.
    // 따라서 CSS Variable을 사용하여 minify 방지. 0px이 제대로 계산되도록 함.
    --temporary-zero-pixel: 0px;
    padding-bottom: m#{a}x(calc(20px - env(safe-area-inset-bottom)), var(--temporary-zero-pixel));
  }
}

.bottom-cta {
  display: flex;
  flex-direction: column;
  box-sizing: border-box;

  &--fixed {
    position: fixed;
  }

  &--fixed-in-bottom-sheet {
    position: absolute;
  }

  &--fixed,
  &--fixed-in-bottom-sheet {
    right: 0;
    bottom: 0;
    left: 0;
    z-index: map-get($z-index, 'fixed-bottom-cta');
  }

  &--in-container {
    width: 100%;
    max-width: $container-width;
    left: 50%;
    right: auto;
    transform: translateX(-50%);
  }

  &__gradient {
    height: $top-gradient-height;
    @include tdsVariable('background', tGradientToTop);
  }

  &__top-accessory,
  &__bottom-accessory {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    @include adaptive('color', grey600);
  }

  &__top-accessory {
    padding-bottom: 16px;

    .text-button {
      margin-bottom: -8px;
    }
  }

  &__bottom-accessory {
    padding-top: 16px;
  }

  &__button-wrapper {
    padding: 0 20px 20px 20px;
    @include adaptive('background-color', background);

    &--background-none {
      background-color: transparent;
    }

    &--safe-area {
      @include supports-safe-area-insets {
        padding-bottom: $safe-area-bottom-padding;
        @include safe-area-on-bottom-sheet();

        .bottom-cta--fixed-in-bottom-sheet & {
          padding-bottom: $safe-area-bottom-padding;
        }
      }
    }

    &--b {
      display: flex;
      margin-bottom: -10px;
      padding-right: 10px;

      > .button {
        flex-grow: 1;
        min-width: calc(50% - 10px);
        margin: 0 10px 10px 0;
      }
    }

    &--a11y-medium {
      flex-wrap: wrap;
    }

    &--a11y-large {
      flex-direction: column;
    }
  }

  &--c {
    flex-direction: row;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.04), 0 6px 20px 0 rgba(0, 0, 0, 0.26),
      0 1px 3px 0 rgba(0, 0, 0, 0.07);
    @include adaptive('background-color', background);
    padding: 12px 24px 12px 20px;

    &--safe-area {
      @include supports-safe-area-insets {
        padding-bottom: m#{a}x(12px, env(safe-area-inset-bottom));
        @include safe-area-on-bottom-sheet();

        &.bottom-cta--fixed-in-bottom-sheet {
          padding-bottom: m#{a}x(12px, env(safe-area-inset-bottom));
        }
      }
    }

    &__left,
    &__right {
      flex-basis: 50%;
      display: flex;
    }

    &__left {
      flex-direction: column;
      justify-content: center;
      overflow: hidden;
    }

    &__right {
      > button {
        width: 100%;
      }
    }

    &__top-text,
    &__bottom-text {
      white-space: nowrap;
      text-overflow: ellipsis;
      overflow: hidden;
    }

    &__top-text {
      color: var(--adaptiveGrey600);
    }

    &__bottom-text {
      font-weight: 500;
      color: var(--adaptiveGrey900);
    }
  }
}

/* 
 * NOTE(@raon0211):
 * iOS에서 키보드가 올라왔을 때 FixedBottomCTA가
 * 키보드를 따라 위로 올라오도록 하기 위한 CSS
 */
// iOS에서 기본으로 사용하는 Cubic-Bezier 값
$default-cubic-bezier: cubic-bezier(0.1, 0.76, 0.55, 0.9);

.bottom-cta {
  &--fixed {
    transition: opacity 0.2s $default-cubic-bezier;
  }

  &__button-wrapper {
    transition: padding 0.2s $default-cubic-bezier;
  }

  &--a {
    .button {
      transition: border-radius 0.2s $default-cubic-bezier;
    }
  }

  &--block {
    .bottom-cta__button-wrapper {
      padding: 0;
    }
  }
}

.bottom-sheet .bottom-cta {
  &__button-wrapper {
    @include adaptive('background-color', layeredBackground);
  }

  &--c {
    @include adaptive('background-color', layeredBackground);
  }

  &__gradient {
    @include tdsVariable('background', tLayeredGradientToTop);
  }
}
