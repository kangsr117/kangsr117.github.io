import * as React from "react";
import CalendarMonthList from "./CalendarMonthList";
import useBlockDayModifiers from "./hooks/useBlockDayModifiers";
import useDateRangePick from "./hooks/useDateRangePick";
import useRangePickModifiers from "./hooks/useRangePickModifiers";

const noop = () => {};

export interface Props {
  startDate?: Date;
  endDate?: Date;
  /** @default 이번 달 */
  initialMonth?: Date;
  maxVisibleMonth?: Date;
  minSelectableDate?: Date;
  maxSelectableDate?: Date;
  /** @default false */
  allowSameDateSelect?: boolean;
  onDatesChange?: (dates: [Date | undefined, Date | undefined]) => void;
  dayAriaLabelFormat?: string;
  className?: string;
  /** @default 3 */
  monthPageSize?: number;
  /** @default 50 */
  scrollThreshold?: number;
}

export default function DateRangePicker({
  startDate: initialStartDate,
  endDate: initialEndDate,
  initialMonth = new Date(),
  maxVisibleMonth,
  minSelectableDate,
  maxSelectableDate,
  dayAriaLabelFormat,
  allowSameDateSelect = false,
  onDatesChange = noop,
  className,
  monthPageSize = 3,
  scrollThreshold = 50,
}: Props) {
  const [startDate, endDate, handleDayClick] = useDateRangePick(
    initialStartDate,
    initialEndDate,
    onDatesChange,
    allowSameDateSelect
  );

  const rangePickModifiers = useRangePickModifiers(startDate, endDate);
  const blockDayModifiers = useBlockDayModifiers({
    minDate: minSelectableDate,
    maxDate: maxSelectableDate,
  });

  return (
    <CalendarMonthList
      onDayClick={handleDayClick}
      initialMonth={initialMonth}
      maxVisibleMonth={maxVisibleMonth}
      modifiers={{
        ...rangePickModifiers,
        ...blockDayModifiers,
      }}
      dayAriaLabelFormat={dayAriaLabelFormat}
      monthPageSize={monthPageSize}
      scrollThreshold={scrollThreshold}
      className={className}
    />
  );
}
