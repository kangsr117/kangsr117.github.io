@use "sass:string";
@import './colors';

@function light($name) {
  $colorValue: map-get($adaptive-colors-light, $name);
  $tdsValue: map-get($tds-variables-light, $name);

  @if ($colorValue == null and $tdsValue == null) {
    @error "컬러 값이 존재하지 않습니다: '#{$name}'";
  }

  @if ($colorValue == null) {
    @return $tdsValue;
  }

  @return $colorValue;
}

@function dark($name) {
  $colorValue: map-get($adaptive-colors-dark, $name);
  $tdsValue: map-get($tds-variables-dark, $name);

  @if ($colorValue == null and $tdsValue == null) {
    @error "컬러 값이 존재하지 않습니다: '#{$name}'";
  }

  @if ($colorValue == null) {
    @return $tdsValue;
  }

  @return $colorValue;
}

html {
  @each $key, $cssVariable in $adaptive {
    $variableName: string.quote(string.slice($cssVariable, 5, -2));
    #{$variableName}: map-get($adaptive-colors-light, $key);
  }

  @each $key, $cssVariable in $tds-variables {
    $variableName: string.quote(string.slice($cssVariable, 5, -2));
    #{$variableName}: map-get($tds-variables-light, $key);
  }
}

$background: light(background);
$darkBackground: dark(background);
$greyBackground: light(greyBackground);
$darkGreyBackground: dark(greyBackground);
$layeredBackground: light(layeredBackground);
$darkLayeredBackground: dark(layeredBackground);
$floatBackground: light(floatBackground);
$darkFloatBackground: dark(floatBackground);

$adaptiveGrey50: var(--adaptiveGrey50);
$adaptiveGrey100: var(--adaptiveGrey100);
$adaptiveGrey200: var(--adaptiveGrey200);
$adaptiveGrey300: var(--adaptiveGrey300);
$adaptiveGrey400: var(--adaptiveGrey400);
$adaptiveGrey500: var(--adaptiveGrey500);
$adaptiveGrey600: var(--adaptiveGrey600);
$adaptiveGrey700: var(--adaptiveGrey700);
$adaptiveGrey800: var(--adaptiveGrey800);
$adaptiveGrey900: var(--adaptiveGrey900);

$adaptiveOpacity50: var(--adaptiveOpacity50);
$adaptiveOpacity100: var(--adaptiveOpacity100);
$adaptiveOpacity200: var(--adaptiveOpacity200);
$adaptiveOpacity300: var(--adaptiveOpacity300);
$adaptiveOpacity400: var(--adaptiveOpacity400);
$adaptiveOpacity500: var(--adaptiveOpacity500);
$adaptiveOpacity600: var(--adaptiveOpacity600);
$adaptiveOpacity700: var(--adaptiveOpacity700);
$adaptiveOpacity800: var(--adaptiveOpacity800);
$adaptiveOpacity900: var(--adaptiveOpacity900);

$adaptiveBackground: var(--adaptiveBackground);
$adaptiveGreyBackground: var(--adaptiveGreyBackground);
$adaptiveLayeredBackground: var(--adaptiveLayeredBackground);
$adaptiveFloatBackground: var(--adaptiveFloatBackground);

@mixin adaptive($property, $color) {
  $fallbackValue: map-get($adaptive-colors-light, $color);
  $adaptiveVariable: map-get($adaptive, $color);

  @if ($fallbackValue == null or $adaptiveVariable == null) {
    @error "@mixin adaptive: 주어진 값에 맞는 color가 존재하지 않습니다: '#{$color}'";
  }

  #{$property}: $fallbackValue;
  #{$property}: $adaptiveVariable;
}

@mixin tdsVariable($property, $name) {
  $fallbackValue: map-get($tds-variables-light, $name);
  $variable: map-get($tds-variables, $name);

  @if ($fallbackValue == null or $variable == null) {
    @error "@mixin tdsVariable: 주어진 값에 맞는 변수가 존재하지 않습니다: '#{$color}'";
  }

  #{$property}: $fallbackValue;
  #{$property}: $variable;
}

@each $key, $cssVariable in $adaptive {
  .adaptive-#{'' + $key}-text {
    @include adaptive('color', $key);
  }
}
