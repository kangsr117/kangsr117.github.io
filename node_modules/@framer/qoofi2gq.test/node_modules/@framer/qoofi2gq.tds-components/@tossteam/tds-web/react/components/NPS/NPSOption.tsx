import classnames from 'classnames';
import * as React from 'react';

import generateID from '../../utils/generateID';

interface Props {
  /**
   * 컴포넌트의 root element(`div`)에 추가되는 className입니다.
   */
  className?: string;

  name?: string;

  score: number;

  checked?: boolean;

  onChange?: React.EventHandler<React.ChangeEvent<HTMLInputElement>>;

  onClick?: React.EventHandler<React.MouseEvent<HTMLInputElement>>;
}

export default class NPSOption extends React.Component<Props> {
  public state: {
    uniqId?: string;
  } = {
    uniqId: undefined,
  };

  private inputRef: React.RefObject<HTMLInputElement> = React.createRef();

  public componentDidMount() {
    this.setState({ uniqId: generateID('nps-option-') });
  }

  public render() {
    const { className, name, score, checked } = this.props;
    return (
      <div className={classnames('nps-option', className)}>
        <input
          id={this.state.uniqId}
          name={name}
          type="radio"
          className="nps-option-input"
          value={score}
          checked={checked}
          ref={this.inputRef}
          onChange={this.handleChange}
          onClick={this.handleClick}
        />
        <label htmlFor={this.state.uniqId} className="nps-option__label font-size--19">
          {score}
        </label>
      </div>
    );
  }

  private handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { onChange } = this.props;

    if (onChange === undefined) {
      return;
    }

    onChange(event);
  };

  private handleClick = (event: React.MouseEvent<HTMLInputElement>) => {
    const { onClick } = this.props;

    if (onClick === undefined) {
      return;
    }

    onClick(event);
  };
}
