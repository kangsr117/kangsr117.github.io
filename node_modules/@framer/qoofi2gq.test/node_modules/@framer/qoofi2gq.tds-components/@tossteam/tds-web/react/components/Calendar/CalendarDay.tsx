import classNames from "classnames";
import { format } from "date-fns";
import * as React from "react";
import { useCallback, useMemo } from "react";
import cloneDate from "../../utils/cloneDate";
import getCalendarDayAriaLabel from "../../utils/getCalendarDayAriaLabel";

export interface Props {
  day: Date;
  shouldDisplayDot?: boolean;
  isEmptyCell?: boolean;
  isSelected?: boolean;
  isSelectedStart?: boolean;
  isSelectedEnd?: boolean;
  isInSelectedRange?: boolean;
  isDisabled?: boolean;
  ariaLabelFormat?: string;
  tabIndex?: 0 | -1;
  onDayClick?: (day: Date, event: React.MouseEvent) => void;
}

function isFirstDayOfWeek(date: Date) {
  return date.getDay() === 0;
}

function isLastDayOfWeek(date: Date) {
  return date.getDay() === 6;
}

function CalendarDay({
  day,
  shouldDisplayDot,
  isEmptyCell,
  isInSelectedRange,
  isSelected,
  isSelectedStart,
  isSelectedEnd,
  isDisabled,
  ariaLabelFormat = "yyyy년 M월 d일",
  tabIndex = -1,
  onDayClick,
}: Props) {
  const ariaLabel = useMemo(
    () =>
      getCalendarDayAriaLabel(day, ariaLabelFormat, {
        isSelected,
        isInSelectedRange,
        isSelectedStart,
        isSelectedEnd,
      }),
    [
      day,
      ariaLabelFormat,
      isSelected,
      isSelectedStart,
      isSelectedEnd,
      isInSelectedRange,
    ]
  );

  const content = useMemo(() => format(day, "d"), [day]);

  const handleClick = useCallback(
    (event: React.MouseEvent) => {
      if (isEmptyCell || isDisabled) {
        return;
      }

      if (onDayClick !== undefined) {
        onDayClick(cloneDate(day), event);
      }
    },
    [day, onDayClick, isEmptyCell, isDisabled]
  );

  return (
    <td
      role={isEmptyCell ? "presentation" : "button"}
      aria-disabled={isEmptyCell ? undefined : isDisabled}
      aria-label={isEmptyCell ? undefined : ariaLabel}
      onClick={handleClick}
      tabIndex={isEmptyCell ? undefined : tabIndex}
      className={classNames("calendar-day", {
        "calendar-day--first-day-of-week": isFirstDayOfWeek(day),
        "calendar-day--last-day-of-week": isLastDayOfWeek(day),
        "calendar-day--empty": isEmptyCell,
        "calendar-day--selected": isSelected,
        "calendar-day--selected-start": isSelectedStart,
        "calendar-day--selected-end": isSelectedEnd,
        "calendar-day--in-selected-range": isInSelectedRange,
        "calendar-day--disabled": isDisabled,
      })}
    >
      {shouldDisplayDot && !isEmptyCell ? (
        <span className="calendar-day-dot" />
      ) : null}
      <span className={classNames("calendar-day-inner", "typography-t5")}>
        {isEmptyCell ? "" : content}
      </span>
    </td>
  );
}

export default React.memo(CalendarDay);
