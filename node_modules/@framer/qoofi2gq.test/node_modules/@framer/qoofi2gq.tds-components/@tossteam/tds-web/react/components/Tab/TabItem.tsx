import classnames from "classnames";
import * as React from "react";
import {
  HTMLAttributes,
  useState,
  useRef,
  useCallback,
  useLayoutEffect,
} from "react";

import useResizeObserver from "../../hooks/useResizeObserver";

export interface Props extends HTMLAttributes<HTMLLIElement> {
  selected: boolean;
  redBean?: boolean;
  focused?: boolean;
  onSelectItem?: (width: number, offsetLeft: number) => void;
  onResize?: (offsetLeft: number) => void;
  key: React.Key;
}

function TabItem({
  selected,
  focused,
  redBean = false,
  onClick,
  onSelectItem,
  onResize,
  children,
  ...rest
}: Props) {
  const liRef = useRef<HTMLLIElement>(null);
  const [ellipsis, setEllipsis] = useState(false);
  const [tabWidth, setTabWidth] = useState(0);
  const [offsetLeft, setOffsetLeft] = useState(0);

  const handleResize = () => {
    const tabWidth = liRef?.current?.clientWidth ?? 0;
    setTabWidth(tabWidth);

    const offsetLeft = liRef?.current?.offsetLeft ?? 0;
    setOffsetLeft(offsetLeft);
    onResize?.(offsetLeft);

    const textWrapper = liRef?.current?.children[0];
    const wrapperWidth = textWrapper?.clientWidth ?? 0;
    const textWidth =
      textWrapper?.children[0].getBoundingClientRect().width ?? 0;
    setEllipsis(textWidth > wrapperWidth);
  };

  useLayoutEffect(handleResize, []);
  useResizeObserver(liRef, handleResize);

  const handleClick = useCallback(
    (event: React.MouseEvent<HTMLLIElement>) => {
      event.persist();
      onClick?.(event);
    },
    [onClick]
  );

  useLayoutEffect(() => {
    if (selected) {
      onSelectItem?.(tabWidth, offsetLeft);
    }
  }, [offsetLeft, onSelectItem, selected, tabWidth]);

  return (
    <li
      ref={liRef}
      className={classnames("tab__item", {
        ["tab__item--selected"]: selected,
      })}
      tabIndex={focused ? 0 : -1}
      role="tab"
      aria-selected={selected}
      title={typeof children === "string" ? children : undefined}
      onClick={handleClick}
      {...rest}
    >
      <div
        className={classnames("tab__item-title typography-st9", {
          ["tab__item-title--ellipsis"]: ellipsis,
        })}
      >
        <span>{children}</span>
        {redBean ? <div className="tab__redBean" /> : null}
      </div>
    </li>
  );
}

export default TabItem;
