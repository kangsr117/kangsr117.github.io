import * as React from "react";
import { Children, cloneElement, ComponentProps } from "react";
import { adaptive } from "../../../../../@tossteam/colors";
import Text from "../Text";
import {
  ListRowTextsProps,
  Texts1RowProps,
  Texts2RowProps,
  Texts3RowProps,
} from "./ListRowTexts.types";

function ListRowTexts(props: ListRowTextsProps) {
  switch (props.type) {
    case "1RowTypeA":
    case "Right1RowTypeA":
      return (
        <Texts1Row
          color={adaptive.grey700}
          fontWeight="medium"
          typography="t5"
          top={props.top}
          {...props.topProps}
        />
      );
    case "1RowTypeB":
    case "Right1RowTypeB":
      return (
        <Texts1Row
          color={adaptive.grey800}
          fontWeight="semibold"
          typography="t5"
          top={props.top}
          {...props.topProps}
        />
      );
    case "1RowTypeC":
      return (
        <Texts1Row
          color={adaptive.grey800}
          fontWeight="bold"
          typography="t5"
          top={props.top}
          {...props.topProps}
        />
      );
    case "Right1RowTypeC":
      return (
        <Texts1Row
          color={adaptive.grey700}
          fontWeight="medium"
          typography="t6"
          top={props.top}
          {...props.topProps}
        />
      );
    case "Right1RowTypeD":
      return (
        <Texts1Row
          color={adaptive.grey700}
          fontWeight="medium"
          typography="t7"
          top={props.top}
          {...props.topProps}
        />
      );
    case "2RowTypeA":
      return (
        <Texts2Row
          top={props.top}
          bottom={props.bottom}
          topProps={{
            typography: "t5",
            color: adaptive.grey800,
            fontWeight: "bold",
            ...props.topProps,
          }}
          bottomProps={{
            typography: "t6",
            color: adaptive.grey700,
            fontWeight: "regular",
            ...props.bottomProps,
          }}
        />
      );
    case "Right2RowTypeA":
      return (
        <Texts2Row
          top={props.top}
          bottom={props.bottom}
          topProps={{
            typography: "t5",
            color: adaptive.grey800,
            fontWeight: "semibold",
            ...props.topProps,
          }}
          bottomProps={{
            typography: "t6",
            color: adaptive.grey700,
            fontWeight: "regular",
            ...props.bottomProps,
          }}
        />
      );
    case "2RowTypeB":
      return (
        <Texts2Row
          top={props.top}
          bottom={props.bottom}
          topProps={{
            typography: "t4",
            color: adaptive.grey800,
            fontWeight: "semibold",
            ...props.topProps,
          }}
          bottomProps={{
            typography: "t6",
            color: adaptive.grey700,
            fontWeight: "regular",
            ...props.bottomProps,
          }}
        />
      );
    case "2RowTypeC":
    case "Right2RowTypeB":
      return (
        <Texts2Row
          top={props.top}
          bottom={props.bottom}
          topProps={{
            typography: "t5",
            color: adaptive.grey800,
            fontWeight: "semibold",
            ...props.topProps,
          }}
          bottomProps={{
            typography: "t7",
            color: adaptive.grey700,
            fontWeight: "medium",
            ...props.bottomProps,
          }}
        />
      );
    case "2RowTypeD":
      return (
        <Texts2Row
          top={props.top}
          bottom={props.bottom}
          topProps={{
            typography: "t6",
            color: adaptive.grey700,
            fontWeight: "regular",
            ...props.topProps,
          }}
          bottomProps={{
            typography: "t5",
            color: adaptive.grey800,
            fontWeight: "bold",
            ...props.bottomProps,
          }}
        />
      );
    case "2RowTypeE":
      return (
        <Texts2Row
          top={props.top}
          bottom={props.bottom}
          topProps={{
            typography: "t6",
            color: adaptive.grey700,
            fontWeight: "regular",
            ...props.topProps,
          }}
          bottomProps={{
            typography: "t4",
            color: adaptive.grey800,
            fontWeight: "semibold",
            ...props.bottomProps,
          }}
        />
      );

    case "2RowTypeF":
    case "Right2RowTypeD":
      return (
        <Texts2Row
          top={props.top}
          bottom={props.bottom}
          topProps={{
            typography: "t7",
            color: adaptive.grey700,
            fontWeight: "medium",
            ...props.topProps,
          }}
          bottomProps={{
            typography: "t5",
            color: adaptive.grey800,
            fontWeight: "semibold",
            ...props.bottomProps,
          }}
        />
      );
    case "Right2RowTypeC":
      return (
        <Texts2Row
          top={props.top}
          bottom={props.bottom}
          topProps={{
            typography: "t6",
            color: adaptive.grey800,
            fontWeight: "medium",
            ...props.topProps,
          }}
          bottomProps={{
            typography: "t6",
            color: adaptive.grey700,
            fontWeight: "medium",
            ...props.bottomProps,
          }}
        />
      );
    case "Right2RowTypeE":
      return (
        <Texts2Row
          top={props.top}
          bottom={props.bottom}
          topProps={{
            typography: "t6",
            color: adaptive.grey700,
            fontWeight: "regular",
            ...props.topProps,
          }}
          bottomProps={{
            typography: "t5",
            color: adaptive.grey800,
            fontWeight: "semibold",
            ...props.bottomProps,
          }}
        />
      );
    case "3RowTypeA":
      return (
        <Texts3Row
          top={props.top}
          middle={props.middle}
          bottom={props.bottom}
          topProps={{
            typography: "t5",
            color: adaptive.grey800,
            fontWeight: "semibold",
            ...props.topProps,
          }}
          middleProps={{
            typography: "t7",
            color: adaptive.grey700,
            fontWeight: "medium",
            ...props.middleProps,
          }}
          bottomProps={{
            typography: "t7",
            color: adaptive.grey700,
            fontWeight: "medium",
            ...props.bottomProps,
          }}
        />
      );
    case "3RowTypeB":
      return (
        <Texts3Row
          top={props.top}
          middle={props.middle}
          bottom={props.bottom}
          topProps={{
            typography: "t4",
            color: adaptive.grey800,
            fontWeight: "semibold",
            ...props.topProps,
          }}
          middleProps={{
            typography: "t7",
            color: adaptive.grey600,
            fontWeight: "regular",
            ...props.middleProps,
          }}
          bottomProps={{
            typography: "t7",
            color: adaptive.grey600,
            fontWeight: "regular",
            ...props.bottomProps,
          }}
        />
      );
  }
}

export default React.memo(ListRowTexts);

export type EssentialTextProps = Pick<
  ComponentProps<typeof Text>,
  "color" | "fontWeight" | "typography"
>;

function Texts1Row({ top, ...textProps }: EssentialTextProps & Texts1RowProps) {
  const element = Children.only(
    typeof top === "string" ? <Text>{top}</Text> : top
  );

  return cloneElement(element, {
    ...textProps,
    ...element.props,
  });
}

function Texts2Row({
  top,
  bottom,
  topProps,
  bottomProps,
}: {
  topProps: EssentialTextProps;
  bottomProps: EssentialTextProps;
} & Texts2RowProps) {
  const topElement = Children.only(
    typeof top === "string" ? <Text>{top}</Text> : top
  );
  const bottomElement = Children.only(
    typeof bottom === "string" ? <Text>{bottom}</Text> : bottom
  );

  return (
    <>
      {cloneElement(topElement, {
        ...topProps,
        ...topElement.props,
      })}
      {cloneElement(bottomElement, {
        ...bottomProps,
        ...bottomElement.props,
      })}
    </>
  );
}

function Texts3Row({
  top,
  bottom,
  middle,
  topProps,
  middleProps,
  bottomProps,
}: {
  topProps: EssentialTextProps;
  middleProps: EssentialTextProps;
  bottomProps: EssentialTextProps;
} & Texts3RowProps) {
  const topElement = Children.only(
    typeof top === "string" ? <Text>{top}</Text> : top
  );
  const middleElement = Children.only(
    typeof middle === "string" ? <Text>{middle}</Text> : middle
  );
  const bottomElement = Children.only(
    typeof bottom === "string" ? <Text>{bottom}</Text> : bottom
  );

  return (
    <>
      {cloneElement(topElement, {
        ...topProps,
        ...topElement.props,
      })}
      {cloneElement(middleElement, {
        ...middleProps,
        ...middleElement.props,
      })}
      {cloneElement(bottomElement, {
        ...bottomProps,
        ...bottomElement.props,
      })}
    </>
  );
}
