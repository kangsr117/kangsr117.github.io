import classnames from "classnames";
import * as React from "react";

import isDevelopment from "../../utils/isDevelopment";
import TextFieldBig from "../TextFieldBig";
import TextFieldLine from "../TextFieldLine";
import FormGroup from "./FormGroup";
import FormInline from "./FormInline";
import FormLegend from "./FormLegend";

interface Props extends React.FormHTMLAttributes<HTMLFormElement> {
  /**
   * `form` element의 html 기본 attributes를 지정합니다.
   * @deprecated Root Props에 바로 정의해주세요.
   */
  formAttributes?: React.FormHTMLAttributes<HTMLFormElement>;

  /**
   * FormGroupControl 로 사용되는 Input Component 를 지정합니다.
   */
  inputComponent?: typeof TextFieldBig | typeof TextFieldLine;
}

export function Form({
  className,
  children,
  inputComponent,
  formAttributes,
  onSubmit = () => {},
  ...others
}: Props) {
  React.useEffect(() => {
    if (!isDevelopment()) {
      return;
    }

    if (formAttributes !== undefined) {
      // eslint-disable-next-line no-console
      console.warn(
        "Prop: `formAttributes`은 deprecated 되었습니다. Root Props에 바로 정의해주세요."
      );
    }
  }, [formAttributes]);

  const handleSubmit = React.useCallback(
    (event: React.FormEvent<HTMLFormElement>) => {
      event.preventDefault();
      onSubmit(event);
    },
    [onSubmit]
  );

  return (
    <form
      className={classnames(
        "form",
        {
          "form--text-field-big": inputComponent === TextFieldBig,
          "form--text-field-line": inputComponent === TextFieldLine,
        },
        className
      )}
      {...(formAttributes ?? others)}
      onSubmit={handleSubmit}
    >
      {children}
    </form>
  );
}

Form.Group = FormGroup;
Form.Inline = FormInline;
Form.Legend = FormLegend;

export default Form;
