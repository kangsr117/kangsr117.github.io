import classnames from 'classnames';
import * as React from 'react';

interface ContextProps {
  hasError?: boolean;
  isInForm?: boolean;
}

interface Props {
  /**
   * 컴포넌트의 root element(`div`)에 추가되는 className입니다.
   */
  className?: string;

  /**
   * 상단에 나타날 레이블의 문구를 지정합니다.
   */
  label?: string;

  /**
   * 하단에 나타날 도움말의 문구를 지정합니다.
   */
  help?: string;

  /**
   * 에러 상태를 표시합니다.
   */
  hasError?: boolean;

  /**
   * @deprecated since version 7.0.2
   *
   * `hasError` 를 사용해주세요.
   */
  error?: boolean;

  /**
   * 엘리먼트들을 가로로 정렬합니다.
   */
  isHorizontal?: boolean;

  /**
   * `label`의 `for` attribute를 지정합니다.
   * 폼 그룹 안에 들어가는 input element에 연결해주는 것을 권장합니다.
   */
  labelFor?: string;
}

export const Context = React.createContext<ContextProps>({});

export default class Form extends React.Component<Props> {
  public render() {
    const {
      className,
      children,
      label,
      labelFor,
      help,
      error,
      hasError = error,
      isHorizontal,
    } = this.props;
    return (
      <div
        className={classnames(
          'form-group',
          {
            'form-group--error': hasError,
            'form-group--horizontal': isHorizontal,
          },
          className
        )}
      >
        {label !== undefined ? (
          <label className="form-group__label typography-t7" htmlFor={labelFor}>
            {label}
          </label>
        ) : null}
        <div className="form-group__controls">
          <Context.Provider
            value={{
              hasError,
              isInForm: true,
            }}
          >
            {children}
          </Context.Provider>
        </div>
        {help !== undefined ? (
          <small className="form-group__help typography-t7">{help}</small>
        ) : null}
      </div>
    );
  }
}
