import classnames from "classnames";
import * as React from "react";
import { animated, useSpring } from "react-spring";
import { useMeasure } from "../../hooks/useMeasure";
import { usePrevious } from "../../hooks/usePrevious";

interface BaseProps<Element extends keyof JSX.IntrinsicElements> {
  as?: Element;
  open?: boolean;
}

type Props<Element extends keyof JSX.IntrinsicElements = "div"> = BaseProps<
  Element
> &
  Omit<JSX.IntrinsicElements[Element], keyof BaseProps<Element>>;

const Collapsible = <Element extends keyof JSX.IntrinsicElements = "div">(
  props: Props<Element>
) => {
  const { as = "div", children, open, style, className, ...rest } = props;
  const previous = usePrevious(open);
  const {
    ref,
    bounds: { height: viewHeight },
  } = useMeasure<HTMLDivElement>();

  const { height } = useSpring<{
    height?: number;
    from: { height: 0 };
    to: { height: number };
  }>({
    from: { height: 0 },
    to: {
      height: open ? viewHeight : 0,
    },
  });

  // TODO(cherry-style): type-safe하게 바꾸기
  const Component = animated[as] as any;

  return (
    <Component
      className={classnames("m-collapsible", className)}
      style={{
        height: open && previous === open ? "auto" : height,
        overflow: "hidden",
        ...style,
      }}
      {...rest}
    >
      <div ref={ref}>{children}</div>
    </Component>
  );
};

export default Collapsible;
