import { useState, useEffect, useMemo } from "react";

import { isIOS, isMobile } from "../../../utils/isMobile";

declare const window: Window & {
  visualViewport?: {
    addEventListener: (event: string, func: () => void) => void;
    removeEventListener: (event: string, func: () => void) => void;
    height: number;
    offsetTop: number;
  };
};

/**
 * Viewport의 상태를 확인하는 Hook입니다.
 */
export default function useViewport() {
  const [viewportHeight, setViewportHeight] = useState(getViewportHeight());
  const [viewportOffsetY, setViewportOffsetY] = useState(0);

  /**
   * @from https://github.com/WICG/visual-viewport
   */
  const viewportElement = useMemo(() => {
    if (typeof document === "undefined" || !isMobile) {
      return undefined;
    }

    const element = document.createElement("div");
    element.style.position = "fixed";
    element.style.top = "0";
    element.style.bottom = "0";
    element.style.left = "0";
    element.style.right = "0";
    element.style.visibility = "hidden";
    return element;
  }, []);

  useEffect(() => {
    if (viewportElement == null) {
      return;
    }

    document.body.appendChild(viewportElement);

    return () => {
      document.body.removeChild(viewportElement);
    };
  }, [viewportElement]);

  useEffect(() => {
    const viewport = window.visualViewport;

    if (viewport == null || viewportElement == null) {
      return;
    }

    const handler = () => {
      const viewportHeight = getViewportHeight();

      const viewportOffsetY =
        viewport.height -
        viewportElement.getBoundingClientRect().height +
        viewport.offsetTop;

      setViewportOffsetY(viewportOffsetY);
      setViewportHeight(viewportHeight);
    };

    // NOTE(@raon0211):
    // iOS에서는 window의 resize 이벤트가,
    // Android에서는 window.visualViewport의 resize 이벤트가
    // Fire되지 않음.
    if (isIOS) {
      window.visualViewport?.addEventListener("resize", handler);
      window.visualViewport?.addEventListener("scroll", handler);

      return () => {
        window.visualViewport?.removeEventListener("resize", handler);
        window.visualViewport?.removeEventListener("scroll", handler);
      };
    } else {
      window.addEventListener("resize", handler);

      return () => {
        window.removeEventListener("resize", handler);
      };
    }
  }, [viewportElement]);

  return useMemo(() => {
    return {
      offsetY: viewportOffsetY,
      height: viewportHeight,
    };
  }, [viewportHeight, viewportOffsetY]);
}

function getViewportHeight() {
  if (typeof window === "undefined") {
    return 0;
  }

  if (window.visualViewport != null) {
    return window.visualViewport.height;
    // 일부 오래된 iOS 기기에서 window.outerHeight를 0으로 반환함
  } else if (window.outerHeight > 0) {
    return window.outerHeight;
  } else {
    return window.screen.availHeight;
  }
}
