import * as React from 'react';
import { MouseEventHandler, ReactNode, useEffect, useMemo, useRef, useState } from 'react';
import { animated, useSpring } from 'react-spring';
import { adaptive } from '../../../../../@tossteam/colors';
import { isStaticRenderTarget } from '../../../../../src/utils/isStaticRenderTarget';
import Txt from '../../components/Text';
import convertNewLineToJSX from '../../utils/convertNewLineToJSX';
import { isBrowser } from '../../utils/isBrowser';
import ResizedMask from '../ResizedMask/ResizedMask';

interface Props {
  open: boolean;
  title: ReactNode;
  description?: ReactNode;
  /**
   * @default '확인'
   */
  buttonText?: string;
  onClose?: () => void;
  onButtonClick?: MouseEventHandler<HTMLButtonElement>;

  parentHeight?: number;

  disableAnimation?: boolean;
}

function AlertDialog({
  open,
  title,
  description,
  buttonText = '확인',
  onClose,
  onButtonClick,
  parentHeight,
  disableAnimation = false,
}: Props) {
  const bodyRef = useRef<HTMLDivElement>(null);
  const [height, setHeight] = useState<number | undefined>(undefined);
  const [isDisplayed, setIsDisplayed] = useState(false);
  const [isRested, setIsRested] = useState(false);
  const bodyHeight = isStaticRenderTarget() ? bodyRef.current?.clientHeight ?? 0 : height;

  useEffect(() => {
    setIsRested(false);
  }, [open]);

  const openedTranslateY = useMemo(() => {
    if (isBrowser()) {
      if (isStaticRenderTarget()) {
        return -((parentHeight ?? 0) / 2 + (bodyHeight ?? 0) / 2);
      }
      return -(window.innerHeight / 2 + (bodyHeight ?? 0) / 2);
    }

    return 0;
  }, [parentHeight, bodyHeight]);

  const spring = useSpring({
    opacity: open ? 1 : 0,
    translateY: open ? openedTranslateY : 0,
    config: {
      tension: 300,
      friction: 26,
      precision: 0.01,
    },
    immediate: disableAnimation,
    onFrame: ({ opacity: progress }: { opacity: number }) => {
      if ((open && progress > 0.95) || (!open && progress < 0.05)) {
        setIsDisplayed(open);
      }
    },
    onRest: () => {
      setIsRested(true);
    },
  });

  const dialogBody = (
    <animated.div
      className="dialog-wrapper"
      style={{
        transform: spring.translateY?.interpolate(v => `translate(-50%, ${v}px)`),
      }}
      ref={bodyRef}
    >
      <div className="dialog alert-dialog">
        <Txt typography="t4" fontWeight="bold" color={adaptive.grey800} as="h3">
          {typeof title === 'string' ? convertNewLineToJSX(title) : title}
        </Txt>
        {description !== undefined ? (
          <Txt typography="t6" fontWeight="medium" className="dialog__description" color={adaptive.grey700} as="p">
            {typeof description === 'string' ? convertNewLineToJSX(description) : description}
          </Txt>
        ) : null}
        <button
          className="alert-dialog__button typography-t5 font-weight--bold"
          onClick={event => {
            onButtonClick?.(event);
            onClose?.();
          }}
        >
          {buttonText}
        </button>
      </div>
    </animated.div>
  );

  return (
    <>
      <div className="dialog-area" style={!isDisplayed && !open ? { display: 'none' } : {}}>
        <animated.div
          className="dimmer"
          style={{
            position: isStaticRenderTarget() ? 'absolute' : undefined,
            opacity: spring.opacity,
            pointerEvents: open && isDisplayed ? undefined : 'none',
          }}
          onClick={event => {
            if (event.target !== event.currentTarget) {
              return;
            }
            onClose?.();
          }}
        >
          {isStaticRenderTarget() ? (
            dialogBody
          ) : (
            <ResizedMask
              radius={isRested && open ? 16 : 0}
              onResize={({ height }) => {
                setHeight(height);
              }}
            >
              {dialogBody}
            </ResizedMask>
          )}
        </animated.div>
      </div>
      {!isStaticRenderTarget() && height === undefined ? (
        <div
          ref={elem => {
            if (height !== undefined || elem == null) {
              return;
            }

            setHeight(elem.clientHeight);
          }}
          style={{
            position: 'absolute',
            top: '-9999px',
          }}
        >
          {dialogBody}
        </div>
      ) : null}
    </>
  );
}

export default AlertDialog;
