import classnames from "classnames";
import * as React from "react";
import { ComponentProps, isValidElement, ReactNode } from "react";
import { Button } from "../Button";

type RightButtonProps = {
  text: string;
} & Pick<
  ComponentProps<typeof Button>,
  "onClick" | "disabled" | "type" | "style"
>;

interface SubtitleProps {
  text: ReactNode;
  type?: "normal" | "underline";
  onClick?: () => void;
}

type Subtitle = SubtitleProps | ReactNode;
type RightButton = RightButtonProps | ReactNode;

export interface Props {
  title: string;
  subtitle: Subtitle;
  topPadding?: 80 | 64 | 0;
  bottomPadding?: 24 | 16 | 0;
  rightButton?: RightButton;
  className?: string;
}

function AmountTop({
  className,
  title,
  subtitle,
  rightButton,
  topPadding = 80,
  bottomPadding = 24,
}: Props) {
  const subtitleElement = isProps(subtitle) ? subtitle.text : subtitle;
  const hasUnderline = isProps(subtitle) && subtitle.type === "underline";

  return (
    <div
      className={classnames(
        "amount-top",
        `amount-top--padding-top-${topPadding}`,
        `amount-top--padding-bottom-${bottomPadding}`,
        className
      )}
    >
      <span
        className={classnames("amount-top__subtitle", "font-size--14", {
          "amount-top__subtitle--underline": hasUnderline,
        })}
        onClick={isProps(subtitle) ? subtitle.onClick : undefined}
      >
        {subtitleElement}
      </span>
      <div className="amount-top__title-wrapper">
        <div className={classnames("amount-top__title", "font-size--30")}>
          {title}
        </div>
        {rightButton !== undefined ? (
          isProps(rightButton) ? (
            <Button size="medium" {...(rightButton as any)}>
              {rightButton.text}
            </Button>
          ) : (
            rightButton
          )
        ) : null}
      </div>
    </div>
  );
}

export default AmountTop;

function isProps<P extends unknown>(props: P | ReactNode): props is P {
  const type = typeof props;

  if (
    type === "boolean" ||
    type === "number" ||
    type === "string" ||
    type === "undefined"
  ) {
    return false;
  }

  return !isValidElement(props as any);
}
