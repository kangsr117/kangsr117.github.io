import {
  addMonths,
  differenceInCalendarMonths,
  setDate,
  setHours,
  subMonths,
  getTime,
} from 'date-fns';
import { useCallback, useState, useEffect, useRef, DependencyList } from 'react';

interface Options {
  pageSize: number;
  minMonth?: Date;
  maxMonth?: Date;
}

export default function useVisibleMonths(
  initialMonth: Date,
  { pageSize, minMonth, maxMonth }: Options
): [Date[], () => void, () => void] {
  const [months, setMonths] = useState([
    ...getPrevMonths(subMonths(initialMonth, 1), { pageSize, minMonth }),
    normalizeMonth(initialMonth),
    ...getNextMonths(addMonths(initialMonth, 1), { pageSize, maxMonth }),
  ]);

  useDidUpdate(() => {
    setMonths([
      ...getPrevMonths(subMonths(initialMonth, 1), { pageSize, minMonth }),
      normalizeMonth(initialMonth),
      ...getNextMonths(addMonths(initialMonth, 1), { pageSize, maxMonth }),
    ]);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [getTimeSafely(initialMonth), getTimeSafely(minMonth), getTimeSafely(maxMonth), pageSize]);

  const addPrevMonths = useCallback(() => {
    setMonths(currentMonths => {
      const firstMonth = currentMonths[0];

      if (!canAddPrevMonth(firstMonth, minMonth, true)) {
        return currentMonths;
      }

      const prevMonths = getPrevMonths(subMonths(firstMonth, 1), { pageSize, minMonth });
      return [...prevMonths, ...currentMonths];
    });
  }, [pageSize, minMonth]);

  const addNextMonths = useCallback(() => {
    setMonths(currentMonths => {
      const lastMonth = currentMonths[currentMonths.length - 1];

      if (!canAddNextMonth(lastMonth, maxMonth, true)) {
        return currentMonths;
      }

      const nextMonths = getNextMonths(addMonths(lastMonth, 1), { pageSize, maxMonth });
      return [...currentMonths, ...nextMonths];
    });
  }, [pageSize, maxMonth]);

  return [months, addPrevMonths, addNextMonths];
}

function normalizeMonth(month: Date) {
  return setHours(setDate(month, 15), 12);
}

function canAddPrevMonth(
  month: Date,
  minMonth: Date | undefined,
  containsMinMonth: boolean = false
) {
  if (minMonth === undefined) {
    return true;
  }

  const diff = differenceInCalendarMonths(minMonth, month);
  return containsMinMonth ? diff < 0 : diff <= 0;
}

function canAddNextMonth(
  month: Date,
  maxMonth: Date | undefined,
  containsMaxMonth: boolean = false
) {
  if (maxMonth === undefined) {
    return true;
  }

  const diff = differenceInCalendarMonths(maxMonth, month);
  return containsMaxMonth ? diff > 0 : diff >= 0;
}

function getPrevMonths(startMonth: Date, options: Pick<Options, 'pageSize' | 'minMonth'>) {
  return getMoreMonths(-1, startMonth, options);
}

function getNextMonths(startMonth: Date, options: Pick<Options, 'pageSize' | 'maxMonth'>) {
  return getMoreMonths(1, startMonth, options);
}

function getMoreMonths(
  direction: -1 | 1,
  startMonth: Date,
  { pageSize, minMonth, maxMonth }: Options
) {
  let month = normalizeMonth(startMonth);
  const moreMonths = [];

  for (let i = 0; i < pageSize; i += 1) {
    if (direction === -1) {
      if (!canAddPrevMonth(month, minMonth)) {
        break;
      }

      moreMonths.unshift(month);
      month = subMonths(month, 1);
    } else if (direction === 1) {
      if (!canAddNextMonth(month, maxMonth)) {
        break;
      }

      moreMonths.push(month);
      month = addMonths(month, 1);
    }
  }

  return moreMonths;
}

function useDidUpdate(effect: () => any, deps: DependencyList) {
  const hasMounted = useRef(false);

  useEffect(() => {
    if (!hasMounted.current) {
      hasMounted.current = true;
      return;
    }

    return effect();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
}

function getTimeSafely(time: Date | undefined) {
  if (time === undefined) {
    return undefined;
  }
  return getTime(time);
}
