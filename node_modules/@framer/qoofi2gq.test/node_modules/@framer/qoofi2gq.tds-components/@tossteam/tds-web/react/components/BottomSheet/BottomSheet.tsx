import { clearAllBodyScrollLocks, disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';
import cx from 'classnames';
import * as React from 'react';
import { ComponentProps, ReactNode, useCallback, useEffect, useRef, useState } from 'react';
import FocusLock from 'react-focus-lock';
import { animated, useSpring } from 'react-spring';
import useIsomorphicLayoutEffect from '../../hooks/useIsomorphicLayoutEffect';
import useResizeObserver from '../../hooks/useResizeObserver';
import { BottomSheetContext } from './BottomSheetContext';
import BottomSheetCTA from './BottomSheetCTA';
import BottomSheetHeader from './Header';
import BottomSheetHeaderDescription from './HeaderDescription';
import BottomSheetSelect from './Select';

const shadowHeight = 5;

type FocusLockProps = Omit<ComponentProps<typeof FocusLock>, 'children'>;
interface Props {
  open: boolean;
  header?: ReactNode;
  children?: ReactNode;
  className?: string;
  dimmerClassName?: string;
  fullscreen?: boolean;
  lockScroll?: boolean;
  closeOnDimmerClick?: boolean;
  fromTop?: boolean;
  focusLock?: FocusLockProps;
  withoutAnimation?: boolean;

  onClose?: () => void;
  onEntered?: () => void;
  onExited?: () => void;
}

function BottomSheet({
  open,
  header,
  children,
  className,
  dimmerClassName,
  focusLock = {},
  fullscreen = false,
  lockScroll = true,
  closeOnDimmerClick = true,
  fromTop = false,
  withoutAnimation = false,
  onClose = noop,
  onEntered = noop,
  onExited = noop,
}: Props) {
  const [isDisplayed, setIsDisplayed] = useState(false);
  const ref = useRef<HTMLDivElement | null>(null);
  const [height, setHeight] = useState<number | undefined>(undefined);

  useResizeObserver(ref, ({ clientHeight }) => {
    if (withoutAnimation) {
      return;
    }
    if (clientHeight !== 0 && clientHeight !== height) {
      setHeight(clientHeight);
    }
  });

  const handleClose = useCallback(() => {
    if (open) {
      onClose();
    }
  }, [onClose, open]);

  const contentRef = useRef<HTMLDivElement | null>(null);

  useIsomorphicLayoutEffect(() => {
    if (contentRef.current == null || withoutAnimation) {
      return;
    }

    if (open && isDisplayed && lockScroll) {
      disableBodyScroll(contentRef.current);
    } else {
      enableBodyScroll(contentRef.current);
    }
  }, [isDisplayed, lockScroll, open]);

  useEffect(() => {
    if (isDisplayed) {
      onEntered();
    } else {
      onExited();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isDisplayed]);

  useEffect(() => {
    return () => {
      clearAllBodyScrollLocks();
    };
  }, []);

  const spring = useSpring({
    opacity: open ? 1 : 0,
    translateY: open ? 0 : (height ?? 300 + shadowHeight) * (fromTop ? -1 : 1),
    config: {
      tension: 400,
      friction: 40,
      precision: 0.1,
    },
    immediate: withoutAnimation,
    delay: 0.1,
    onFrame: ({ opacity: progress }: { opacity: number }) => {
      if ((open && progress > 0.95) || (!open && progress < 0.05)) {
        setIsDisplayed(open);
      }
    },
  });

  function getFocusLockProps(): FocusLockProps {
    return {
      disabled: withoutAnimation || (!isDisplayed && !open),
      autoFocus: true,
      returnFocus: true,
      ...focusLock,
    };
  }

  return (
    <>
      <div
        className={cx(
          'bottom-sheet',
          {
            'bottom-sheet--full': fullscreen,
            'bottom-sheet--hide': !isDisplayed && !open,
          },
          className
        )}
      >
        <animated.div
          className={cx('dimmer', dimmerClassName)}
          style={{
            opacity: spring.opacity,
            pointerEvents: open && isDisplayed ? undefined : 'none',
          }}
          onClick={event => {
            if (event.target !== event.currentTarget) {
              return;
            }

            if (closeOnDimmerClick) {
              handleClose();
            }
          }}
        >
          <FocusLock {...getFocusLockProps()}>
            <animated.div
              ref={ref}
              className={cx('bottom-sheet__sheet', {
                'bottom-sheet__sheet__top-sheet': fromTop,
              })}
              style={{
                transform: spring.translateY?.interpolate(v => `translateY(${v}px)`),
              }}
            >
              <BottomSheetContext.Provider value={{ onClose: handleClose }}>
                <div className="bottom-sheet__header-wrapper">
                  {typeof header === 'string' ? <BottomSheetHeader>{header}</BottomSheetHeader> : header}
                </div>
                <div ref={contentRef} className="bottom-sheet__content">
                  {children}
                </div>
              </BottomSheetContext.Provider>
            </animated.div>
          </FocusLock>
        </animated.div>
      </div>
      {/* display: none일 때, 초기 height를 알 수 없기 때문에 임의로 Content를 렌더해서 height를 계산, 계산이 완료되면 지움. */}
      {!withoutAnimation && height === undefined ? (
        <div
          className={cx(
            'bottom-sheet__sheet',
            {
              'bottom-sheet__sheet__top-sheet': fromTop,
            },
            dimmerClassName
          )}
          style={{
            position: 'absolute',
            top: '-9999px',
          }}
          ref={sheetElement => {
            if (sheetElement != null && height === undefined) {
              setHeight(sheetElement.clientHeight);
            }
          }}
        >
          <div className="bottom-sheet__header-wrapper">
            {typeof header === 'string' ? <BottomSheetHeader>{header}</BottomSheetHeader> : header}
          </div>
          <div className="bottom-sheet__content">{children}</div>
        </div>
      ) : null}
    </>
  );
}

BottomSheet.Select = BottomSheetSelect;
BottomSheet.Header = BottomSheetHeader;
BottomSheet.HeaderDescription = BottomSheetHeaderDescription;
BottomSheet.CTA = BottomSheetCTA;

export default BottomSheet;

function noop() {}
