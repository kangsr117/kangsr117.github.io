import css from 'css';
import * as utils from './utils';
import adaptive from './adaptive';
import tds from './tds';

describe('utils', () => {
  describe('generateColorsCSS / generateLightCSS / generateDarkCSS / generateLightTDSVariablesCSS / generateDarkTDSVariablesCSS', () => {
    test('generate 결과물은 Valid CSS다.', () => {
      const colorsCSS = utils.generateColorsCSS({ wrap: ':root' });
      const lightCSS = utils.generateLightCSS({ wrap: ':root' });
      const darkCSS = utils.generateDarkCSS({ wrap: ':root' });
      const lightVariablesCSS = utils.generateLightTDSVariablesCSS({ wrap: ':root' });
      const darkVairablesCSS = utils.generateDarkTDSVariablesCSS({ wrap: ':root' });

      [colorsCSS, lightCSS, darkCSS, lightVariablesCSS, darkVairablesCSS].forEach(cssString => {
        const parsed = css.parse(cssString);
        expect(parsed.stylesheet?.parsingErrors?.length).toBe(0);
      });
    });

    test('wrap으로 감싸지 않으면 CSS body 만을 갖는다.', () => {
      const cssString = utils.generateColorsCSS();

      expect(cssString.includes('{')).toBe(false);
    });
  });

  describe('generateLightCSS / generateDarkCSS', () => {
    test('모든 adaptive 변수에 대해 컬러가 정의되어야 한다.', () => {
      const lightCSS = utils.generateLightCSS();
      const darkCSS = utils.generateDarkCSS();

      const adaptiveVariables = Object.values(adaptive).map(variable => {
        return /var\(--(.+)\)/.exec(variable)?.[1]!;
      });

      adaptiveVariables.forEach(variable => {
        const regex = new RegExp(`--${variable}`);

        expect(lightCSS).toMatch(regex);
        expect(darkCSS).toMatch(regex);
      });
    });
  });

  describe('generateLightTDSVariablesCSS / generateDarkTDSVariablesCSS', () => {
    test('모든 tds 변수에 대해 값이 정의되어야 한다.', () => {
      const lightVariables = utils.generateLightTDSVariablesCSS();
      const darkVariables = utils.generateDarkTDSVariablesCSS();

      Object.keys(tds).forEach(variable => {
        const regex = new RegExp(`--${variable}`);

        expect(lightVariables).toMatch(regex);
        expect(darkVariables).toMatch(regex);
      });
    });
  });
});
