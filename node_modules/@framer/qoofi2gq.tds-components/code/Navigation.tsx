import styled from '@emotion/styled';
import { addPropertyControls, ControlType, useNavigation } from 'framer';
import * as React from 'react';
import { default as TDSIcon } from '../@tossteam/tds-web/react/components/Icon/Icon';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import { StatusBar } from './StatusBar';

const textThemeLabels = ['블랙', '블랙투명', '화이트투명'] as const;
const leftItemLabels = ['뒤로', '닫기', '없음'] as const;
const rightItemLabels = ['없음', '텍스트', '아이콘'] as const;

type TextThemeLabel = typeof textThemeLabels[number];
type LeftItemLabel = typeof leftItemLabels[number];
type RightItemLabel = typeof rightItemLabels[number];

const colorByTextTheme: Record<TextThemeLabel, string> = {
  블랙: 'black',
  블랙투명: 'black',
  화이트투명: 'white',
};

const backgroundColorByTextTheme: Record<TextThemeLabel, string> = {
  블랙: 'white',
  블랙투명: 'transparent',
  화이트투명: 'transparent',
};

const iosLeftIconByLeftItemLabel: Record<LeftItemLabel, string | undefined> = {
  뒤로: 'icn-navigation-ios-back',
  닫기: 'icn-navigation-close',
  없음: undefined,
};

const androidLeftIconByLeftItemLabel: Record<LeftItemLabel, string | undefined> = {
  뒤로: 'icn-navigation-android-back',
  닫기: 'icn-navigation-close',
  없음: undefined,
};

interface Props {
  iOS: boolean;
  slim: boolean;
  notPillar: boolean;
  textTheme: TextThemeLabel;
  title: string;
  leftItem: LeftItemLabel;
  rightItem: RightItemLabel;
  rightItemText: string;
  rightItemIcon1: string;
  rightItemIcon2: string;

  onBackButonClick: () => void;
  onLeftIconClick: () => void;
  onRightTextClick: () => void;
  onRightIconClick: () => void;
}

export function Navigation(props: Props) {
  const {
    iOS,
    slim,
    notPillar,
    textTheme,
    title,
    leftItem,
    rightItem,
    rightItemText,
    rightItemIcon1,
    rightItemIcon2,

    onBackButonClick,
    onLeftIconClick,
    onRightIconClick,
    onRightTextClick,
  } = useFilteringEventHandlersInInspector(props);

  const color = colorByTextTheme[textTheme];
  const backgroundColor = backgroundColorByTextTheme[textTheme];
  const pillar = !notPillar;
  const leftIcon = iOS ? iosLeftIconByLeftItemLabel[leftItem] : androidLeftIconByLeftItemLabel[leftItem];

  const navigation = useNavigation();

  return (
    <NavigationBar color={color} backgroundColor={backgroundColor}>
      <StatusBar iOS={iOS} slim={slim} blackTheme={textTheme !== '화이트투명'} />
      <NavigationToolbar iOS={iOS}>
        {!pillar && (
          <>
            <LeftItemContainer iOS={iOS}>
              {leftIcon && (
                <LeftIconButton name={leftIcon} color={color} onClick={onBackButonClick ?? navigation.goBack} />
              )}
              {!iOS && <ToolbarTitle style={{ paddingLeft: 32 }}>{title}</ToolbarTitle>}
            </LeftItemContainer>
            {iOS && <ToolbarTitle>{title}</ToolbarTitle>}
          </>
        )}
        <RightItemContainer iOS={iOS} pillar={pillar}>
          {rightItem === '아이콘' ? (
            <>
              {rightItemIcon2 && <IconButton name={rightItemIcon2} color={color} onClick={onLeftIconClick} />}
              {rightItemIcon1 && (
                <span
                  style={{
                    marginLeft: 20,
                    display: 'flex',
                    alignItems: 'center',
                  }}
                >
                  <IconButton name={rightItemIcon1} color={color} onClick={onRightIconClick} />
                </span>
              )}
            </>
          ) : rightItem === '텍스트' ? (
            <TextButton onClick={onRightTextClick}>{rightItemText}</TextButton>
          ) : null}
        </RightItemContainer>
      </NavigationToolbar>
      {pillar && <NavigationPillarTitle>{title}</NavigationPillarTitle>}
    </NavigationBar>
  );
}

addPropertyControls(Navigation, {
  iOS: {
    title: 'OS',
    type: ControlType.Boolean,
    enabledTitle: 'iOS',
    disabledTitle: 'Android',
    defaultValue: true,
  },
  slim: {
    title: '기종',
    type: ControlType.Boolean,
    enabledTitle: '기본',
    disabledTitle: '아이폰X',
    defaultValue: true,
    hidden(props) {
      return !props.iOS;
    },
  },
  notPillar: {
    title: '필러',
    type: ControlType.Boolean,
    enabledTitle: 'OFF',
    disabledTitle: 'ON',
    defaultValue: true,
  },
  textTheme: {
    title: '텍스트 테마',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: textThemeLabels as any,
    defaultValue: textThemeLabels[0],
  },
  title: {
    title: '✏️ 타이틀',
    type: ControlType.String,
    defaultValue: '',
  },
  leftItem: {
    title: '왼쪽 아이콘',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: leftItemLabels as any,
    defaultValue: leftItemLabels[0],
    hidden(props) {
      return !props.notPillar;
    },
  },
  rightItem: {
    title: '오른쪽 옵션',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: rightItemLabels as any,
    defaultValue: rightItemLabels[0],
  },
  rightItemText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '설정',
    hidden(props) {
      return props.rightItem !== '텍스트';
    },
  },
  rightItemIcon1: {
    title: '↳ 오른쪽 아이콘',
    type: ControlType.String,
    defaultValue: 'icn-navigation-more',
    hidden(props) {
      return props.rightItem !== '아이콘';
    },
  },
  rightItemIcon2: {
    title: '↳ 왼쪽 아이콘',
    type: ControlType.String,
    defaultValue: '',
    hidden(props) {
      return props.rightItem !== '아이콘';
    },
  },

  onBackButonClick: {
    type: ControlType.EventHandler,
  },
  onLeftIconClick: {
    type: ControlType.EventHandler,
  },
  onRightIconClick: {
    type: ControlType.EventHandler,
  },
  onRightTextClick: {
    type: ControlType.EventHandler,
  },
});

(Navigation as any).defaultProps = {
  width: 375,
  height: 64,
};

const NavigationBar = styled.div<{ color: string; backgroundColor: string }>`
  color: ${({ color }) => color};
  background-color: ${({ backgroundColor }) => backgroundColor};
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;

  display: flex;
  flex-direction: column;
`;

const NavigationToolbar = styled.div<{ iOS: boolean }>`
  height: ${({ iOS }) => (iOS ? 44 : 54)}px;

  display: flex;
  align-items: center;
  padding: 0 16px;
`;

const ToolbarTitle = styled.div`
  font-size: 17px;
  line-height: 24px;
  font-weight: 600;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  padding: 0 8px;
`;

const LeftItemContainer = styled.div<{ iOS: boolean }>`
  flex: 1 0 0;
  ${({ iOS }) => (iOS ? '' : 'overflow: hidden;')}

  display: flex;
  align-items: center;
`;

const IconButton = styled(TDSIcon)`
  transition: opacity 100ms ease-in;
  cursor: pointer;

  &:hover {
    opacity: 0.5;
  }

  &:active {
    opacity: 0.3;
  }
`;

const TextButton = styled.span`
  transition: opacity 100ms ease-in;
  cursor: pointer;

  &:hover {
    opacity: 0.5;
  }

  &:active {
    opacity: 0.3;
  }
`;

const LeftIconButton = styled(IconButton)`
  flex: none;
`;

const RightItemContainer = styled.div<{ iOS: boolean; pillar: boolean }>`
  flex: ${({ iOS, pillar }) => (iOS || pillar ? '1 0 0' : 'none')};
  white-space: nowrap;

  display: flex;
  align-items: center;
  justify-content: flex-end;
`;

const NavigationPillarTitle = styled.div`
  height: 31px;
  font-size: 26px;
  line-height: 1.2;
  font-weight: bold;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;

  padding: 0 24px;
`;

Navigation.displayName = makeComponentDisplayName('Navigation', '네비게이션');
