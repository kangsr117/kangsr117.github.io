import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { default as TDSBottomCTA } from '../@tossteam/tds-web/react/components/BottomCTA';
import { Props as TDSButtonProps } from '../@tossteam/tds-web/react/components/Button/Button';
import { TextButton as TDSTextButton } from '../@tossteam/tds-web/react/components/TextButton/TextButton';
import convertNewLineToJSX from '../@tossteam/tds-web/react/utils/convertNewLineToJSX';
import { IPhoneSafeAreaContainer } from '../src/components/iPhoneSafeAreaContainer';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import { Button } from './Button';

const typeLabels = ['1개', '2개'] as const;
const buttonStyleLabels = ['Fill', 'Weak'] as const;
const buttonTypeLabels = ['🔵 블루', '⚫️ 다크', '🔴 레드', '⚪️ 라이트'] as const;
const buttonDisabledLabels = ['활성', '비활성'] as const;
const safeAreaPaddingLabels = ['ON', 'OFF'] as const;
const showAdditionalOptionsLabels = ['ON', 'OFF'] as const;
const showDescriptionLabels = ['있음', '없음'] as const;
const descriptionPositionLabels = ['위', '아래'] as const;
const showTopButtonLabels = ['있음', '없음'] as const;

type TypeLabel = typeof typeLabels[number];
type ButtonStyleLabel = typeof buttonStyleLabels[number];
type ButtonTypeLabel = typeof buttonTypeLabels[number];
type ButtonDisabledLabel = typeof buttonDisabledLabels[number];
type SafeAreaPaddingLabel = typeof safeAreaPaddingLabels[number];
type ShowAdditionalOptionsLabel = typeof showAdditionalOptionsLabels[number];
type ShowDescriptionLabel = typeof showDescriptionLabels[number];
type DescriptionPositionLabel = typeof descriptionPositionLabels[number];
type ShowTopButtonLabel = typeof showTopButtonLabels[number];

const buttonTypeByControlLabel: {
  [key in ButtonTypeLabel]: TDSButtonProps['type'];
} = {
  '🔵 블루': 'primary',
  '⚫️ 다크': 'dark',
  '🔴 레드': 'danger',
  '⚪️ 라이트': 'light',
};

const buttonDisabledByControlLabel: {
  [key in ButtonDisabledLabel]: TDSButtonProps['disabled'];
} = {
  활성: false,
  비활성: true,
};

const buttonStyleByControlLabel: {
  [key in ButtonStyleLabel]: TDSButtonProps['style'];
} = {
  Fill: 'fill',
  Weak: 'weak',
};

const safeAreaPaddingByControlLabels: {
  [key in SafeAreaPaddingLabel]: boolean;
} = {
  ON: true,
  OFF: false,
};

interface Props {
  type: TypeLabel;
  buttonTitle: string;
  primaryButtonTitle: string;
  primaryButtonStyle: ButtonStyleLabel;
  primaryButtonType: ButtonTypeLabel;
  primaryButtonDisabled: ButtonDisabledLabel;
  secondaryButtonTitle: string;
  secondaryButtonStyle: ButtonStyleLabel;
  secondaryButtonType: ButtonTypeLabel;
  secondaryButtonDisabled: ButtonDisabledLabel;
  safeAreaPadding: SafeAreaPaddingLabel;
  showAdditionalOptions: ShowAdditionalOptionsLabel;
  showDescription: ShowDescriptionLabel;
  descriptionPosition: DescriptionPositionLabel;
  descriptionText: string;
  showTopButton: ShowTopButtonLabel;
  topButtonText: string;

  onButtonClick?: () => void;
  onRightButtonClick?: () => void;
  onLeftButtonClick?: () => void;
  onTopButtonClick?: () => void;
}

export function FixedBottomCTA(props: Props) {
  const {
    type,
    buttonTitle,
    primaryButtonTitle,
    primaryButtonStyle,
    primaryButtonType,
    primaryButtonDisabled,
    secondaryButtonTitle,
    secondaryButtonStyle,
    secondaryButtonType,
    secondaryButtonDisabled,
    safeAreaPadding,
    showDescription,
    descriptionPosition,
    descriptionText,
    showTopButton,
    topButtonText,
    onButtonClick,
    onRightButtonClick,
    onLeftButtonClick,
    onTopButtonClick,
  } = useFilteringEventHandlersInInspector(props);

  const shouldRenderTopDescription = showDescription === '있음' && descriptionPosition === '위';
  const shouldRenderTopButton = showTopButton === '있음';
  const topAccessory =
    shouldRenderTopDescription || shouldRenderTopButton ? (
      <div
        style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
        }}
      >
        {shouldRenderTopDescription && convertNewLineToJSX(descriptionText)}
        {shouldRenderTopButton && (
          <TDSTextButton type="primary" style={{ textAlign: 'center' }} onClick={onTopButtonClick}>
            {topButtonText}
          </TDSTextButton>
        )}
      </div>
    ) : undefined;

  const shouldRenderBottomDescription = showDescription === '있음' && descriptionPosition === '아래';
  const bottomAccessory = shouldRenderBottomDescription ? convertNewLineToJSX(descriptionText) : undefined;

  const component =
    type === '1개' ? (
      <TDSBottomCTA.TypeA
        type={buttonTypeByControlLabel[primaryButtonType]}
        style={buttonStyleByControlLabel[primaryButtonStyle]}
        disabled={buttonDisabledByControlLabel[primaryButtonDisabled]}
        hasSafeAreaPadding={safeAreaPaddingByControlLabels[safeAreaPadding]}
        topAccessory={topAccessory}
        bottomAccessory={bottomAccessory}
        onClick={onButtonClick}
      >
        {buttonTitle}
      </TDSBottomCTA.TypeA>
    ) : (
      <TDSBottomCTA.TypeB
        rightButton={
          <Button
            text={primaryButtonTitle}
            size="Big"
            type={primaryButtonType}
            style={primaryButtonStyle}
            disabled={primaryButtonDisabled}
            onClick={onRightButtonClick}
            disableInspector
          />
        }
        leftButton={
          <Button
            text={secondaryButtonTitle}
            size="Big"
            type={secondaryButtonType}
            style={secondaryButtonStyle}
            disabled={secondaryButtonDisabled}
            onClick={onLeftButtonClick}
            disableInspector
          />
        }
        hasSafeAreaPadding={safeAreaPaddingByControlLabels[safeAreaPadding]}
        topAccessory={topAccessory}
        bottomAccessory={bottomAccessory}
      />
    );

  return (
    <IPhoneSafeAreaContainer iPhoneX={safeAreaPadding === 'ON'} safeAreaHeight={16} safeAreaBackgroundColor="white">
      <TDSComponent
        name={`FixedBottomCTA`}
        summary={{
          button:
            type === '1개'
              ? {
                  type: buttonTypeByControlLabel[primaryButtonType],
                  style: buttonStyleByControlLabel[primaryButtonStyle],
                  size: 'big',
                  disabled: buttonDisabledByControlLabel[primaryButtonDisabled],
                  text: buttonTitle,
                }
              : undefined,
          leftButton:
            type === '2개'
              ? {
                  type: buttonTypeByControlLabel[secondaryButtonType],
                  style: buttonStyleByControlLabel[secondaryButtonStyle],
                  size: 'big',
                  disabled: buttonDisabledByControlLabel[secondaryButtonDisabled],
                  text: secondaryButtonTitle,
                }
              : undefined,
          rightButton:
            type === '2개'
              ? {
                  type: buttonTypeByControlLabel[primaryButtonType],
                  style: buttonStyleByControlLabel[primaryButtonStyle],
                  size: 'big',
                  disabled: buttonDisabledByControlLabel[primaryButtonDisabled],
                  text: primaryButtonTitle,
                }
              : undefined,
          topButton: shouldRenderTopButton ? topButtonText : undefined,
          topDescription: shouldRenderTopDescription ? descriptionText : undefined,
          bottomDescription: shouldRenderBottomDescription ? descriptionText : undefined,
        }}
      >
        {component}
      </TDSComponent>
    </IPhoneSafeAreaContainer>
  );
}

addPropertyControls(FixedBottomCTA, {
  type: {
    title: '버튼 개수',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: typeLabels as any,
    defaultValue: '1개',
  },
  buttonTitle: {
    title: '버튼',
    type: ControlType.String,
    defaultValue: '버튼레이블',
    hidden(props) {
      return props.type !== '1개';
    },
  },
  primaryButtonTitle: {
    title: '👉 오른쪽 버튼',
    type: ControlType.String,
    defaultValue: '버튼레이블',
    hidden(props) {
      return props.type !== '2개';
    },
  },
  primaryButtonStyle: {
    title: '↳ 타입',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonStyleLabels as any,
    defaultValue: 'Fill',
  },
  primaryButtonType: {
    title: '↳ 색상',
    type: ControlType.Enum,
    options: ['🔵 블루', '⚫️ 다크', '🔴 레드', '⚪️ 라이트'],
    defaultValue: '🔵 블루',
  },
  primaryButtonDisabled: {
    title: '↳ 상태',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonDisabledLabels as any,
    defaultValue: '활성',
  },
  secondaryButtonTitle: {
    title: '👈 왼쪽 버튼',
    type: ControlType.String,
    defaultValue: '버튼레이블',
    hidden(props) {
      return props.type !== '2개';
    },
  },
  secondaryButtonStyle: {
    title: '↳ 타입',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonStyleLabels as any,
    defaultValue: 'Weak',
    hidden(props) {
      return props.type !== '2개';
    },
  },
  secondaryButtonType: {
    title: '↳ 색상',
    type: ControlType.Enum,
    options: ['🔵 블루', '⚫️ 다크', '🔴 레드', '⚪️ 라이트'],
    defaultValue: '🔵 블루',
    hidden(props) {
      return props.type !== '2개';
    },
  },
  secondaryButtonDisabled: {
    title: '↳ 상태',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonDisabledLabels as any,
    defaultValue: '활성',
    hidden(props) {
      return props.type !== '2개';
    },
  },
  safeAreaPadding: {
    title: '아이폰 X',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: safeAreaPaddingLabels as any,
    defaultValue: 'OFF',
  },
  showAdditionalOptions: {
    title: '옵션 더보기 ⚙️',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: showAdditionalOptionsLabels as any,
    defaultValue: 'OFF',
  },
  showDescription: {
    title: '설명 옵션',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: showDescriptionLabels as any,
    defaultValue: '없음',
    hidden(props) {
      return props.showAdditionalOptions === 'OFF';
    },
  },
  descriptionPosition: {
    title: '↳ 위치',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: descriptionPositionLabels as any,
    defaultValue: '아래',
    hidden(props) {
      return props.showAdditionalOptions === 'OFF' || props.showDescription !== '있음';
    },
  },
  descriptionText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '설명을 적을 때',
    displayTextArea: true,
    hidden(props) {
      return props.showAdditionalOptions === 'OFF' || props.showDescription !== '있음';
    },
  },
  showTopButton: {
    title: '위쪽 버튼 옵션',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: showTopButtonLabels as any,
    defaultValue: '없음',
    hidden(props) {
      return props.showAdditionalOptions === 'OFF';
    },
  },
  topButtonText: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '버튼레이블',
    hidden(props) {
      return props.showAdditionalOptions === 'OFF' || props.showTopButton !== '있음';
    },
  },
  onButtonClick: {
    type: ControlType.EventHandler,
  },
  onRightButtonClick: {
    type: ControlType.EventHandler,
  },
  onLeftButtonClick: {
    type: ControlType.EventHandler,
  },
  onTopButtonClick: {
    type: ControlType.EventHandler,
  },
});

(FixedBottomCTA as any).defaultProps = {
  width: 375,
  height: 110,
};

FixedBottomCTA.displayName = makeComponentDisplayName('FixedBottomCTA', '하단CTA');
