import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import {
  default as TDSGridList,
  Props as TDSGridListProps,
} from '../@tossteam/tds-web/react/components/GridList/GridList01';
import { getIconUrl } from '../@tossteam/tds-web/react/components/Icon/Icon';
import { TDSComponent } from '../src/components/TDSComponent';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const numberOfColumnsLabels = ['3개', '2개', '1개'] as const;

type NumberOfColumnsLabel = typeof numberOfColumnsLabels[number];

const numberOfColumnsByControlLabel: {
  [key in NumberOfColumnsLabel]: TDSGridListProps['column'];
} = {
  '3개': 3,
  '2개': 2,
  '1개': 1,
};

interface Props {
  numberOfColumns: NumberOfColumnsLabel;
  item1IconName: string;
  item1Text: string;
  item2IconName: string;
  item2Text: string;
  item3IconName: string;
  item3Text: string;
}

export function GridList({
  numberOfColumns,
  item1IconName,
  item1Text,
  item2IconName,
  item2Text,
  item3IconName,
  item3Text,
}: Props) {
  const columns = numberOfColumnsByControlLabel[numberOfColumns];
  const items: Array<{ icon: string; text: string }> = [
    { icon: item1IconName, text: item1Text },
    { icon: item2IconName, text: item2Text },
    { icon: item3IconName, text: item3Text },
  ].slice(0, columns);

  return (
    <TDSComponent
      name="GridListItem"
      summary={{
        numberOfColumns: numberOfColumnsByControlLabel[numberOfColumns],
        items,
      }}
    >
      <TDSGridList style={{ padding: '0 24px 8px' }} column={numberOfColumnsByControlLabel[numberOfColumns]}>
        {items.map(({ icon, text }, index) => (
          <TDSGridList.Item key={index} image={{ src: getIconUrl(icon) }}>
            {text}
          </TDSGridList.Item>
        ))}
      </TDSGridList>
    </TDSComponent>
  );
}

addPropertyControls(GridList, {
  numberOfColumns: {
    title: '컬럼',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: numberOfColumnsLabels as any,
    defaultValue: '3개',
  },
  item1IconName: {
    title: '• 첫번째 아이콘',
    type: ControlType.String,
    defaultValue: 'icn-bank-toss',
  },
  item1Text: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '텍스트',
  },
  item2IconName: {
    title: '• 첫번째 아이콘',
    type: ControlType.String,
    defaultValue: 'icn-bank-toss',
    hidden(props) {
      return props.numberOfColumns === '1개';
    },
  },
  item2Text: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '텍스트',
    hidden(props) {
      return props.numberOfColumns === '1개';
    },
  },
  item3IconName: {
    title: '• 첫번째 아이콘',
    type: ControlType.String,
    defaultValue: 'icn-bank-toss',
    hidden(props) {
      return props.numberOfColumns !== '3개';
    },
  },
  item3Text: {
    title: '↳ 텍스트',
    type: ControlType.String,
    defaultValue: '텍스트',
    hidden(props) {
      return props.numberOfColumns !== '3개';
    },
  },
});

(GridList as any).defaultProps = {
  width: 375,
  height: 80,
};

GridList.displayName = makeComponentDisplayName('GridList', '그리드리스트');
