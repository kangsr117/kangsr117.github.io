import styled from '@emotion/styled';
import { addPropertyControls, ControlType, useIsInCurrentNavigationTarget, useNavigation } from 'framer';
import * as React from 'react';
import { useEffect, useRef, useState } from 'react';
import Button from '../@tossteam/tds-web/react/components/Button/Button';
import { default as TDSAlertDialog } from '../@tossteam/tds-web/react/components/Overlays/AlertDialog';
import { default as TDSConfirmDialog } from '../@tossteam/tds-web/react/components/Overlays/ConfirmDialog';
import useResizeObserver from '../@tossteam/tds-web/react/hooks/useResizeObserver';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { isStaticRenderTarget } from '../src/utils/isStaticRenderTarget';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';
import {
  styleByControlLabel as buttonStyleByControlLabel,
  StyleLabel as ButtonStyleLabel,
  styleLabels as buttonStyleLabels,
  typeByControlLabel as buttonTypeByControlLabel,
  TypeLabel as ButtonTypeLabel,
  typeLabels as buttonTypeLabels,
} from './Button';

interface Props {
  title: string;
  hideDescription: boolean;
  description: string;
  onlyOneButton: boolean;
  buttonText: string;
  alignButtonHorizontally: boolean;
  rightButtonText: string;
  bottomButtonText: string;
  rightButtonType: ButtonTypeLabel;
  rightButtonStyle: ButtonStyleLabel;
  leftButtonText: string;
  topButtonText: string;
  leftButtonType: ButtonTypeLabel;
  leftButtonStyle: ButtonStyleLabel;
  useDefaultButtonColors: boolean;
  showDimmer: boolean;

  onDimmerClick?: () => void;
  onButtonClick?: () => void;
  onLeftButtonClick?: () => void;
  onRightButtonClick?: () => void;
}

export function Dialog(props: Props) {
  const {
    title,
    hideDescription,
    description,
    onlyOneButton,
    buttonText,
    alignButtonHorizontally,
    rightButtonText,
    bottomButtonText,
    rightButtonStyle,
    rightButtonType,
    leftButtonText,
    topButtonText,
    leftButtonType,
    leftButtonStyle,
    useDefaultButtonColors,
    showDimmer,

    onDimmerClick,
    onButtonClick,
    onLeftButtonClick,
    onRightButtonClick,
  } = useFilteringEventHandlersInInspector(props);

  const containerRef = useRef<HTMLDivElement>(null);
  const [containerHeight, setContainerHeight] = useState(667);

  useResizeObserver(containerRef, target => {
    setContainerHeight(target.clientHeight);
  });

  const navigation = useNavigation();
  const isInCurrentNavigationTarget = useIsInCurrentNavigationTarget();

  const withoutAnimation = isStaticRenderTarget() || !showDimmer;
  const [open, setOpen] = useState(withoutAnimation);
  useEffect(() => {
    if (withoutAnimation) {
      return;
    }

    const timeoutHandler = setTimeout(() => {
      setOpen(true);
    }, 100);

    return () => {
      clearTimeout(timeoutHandler);
    };
  }, [isInCurrentNavigationTarget]);

  return (
    <Container
      hideDimmer={!showDimmer}
      alignButton={alignButtonHorizontally ? 'horizontal' : 'vertical'}
      ref={containerRef}
    >
      <TDSComponent
        name="Dialog"
        summary={{
          title,
          description: !hideDescription ? description : undefined,
          button: onlyOneButton
            ? {
                buttonText,
              }
            : undefined,
          [`${alignButtonHorizontally ? 'left' : 'top'}Button`]: !onlyOneButton
            ? {
                type: useDefaultButtonColors ? 'dark' : buttonTypeByControlLabel[leftButtonType],
                style: useDefaultButtonColors ? 'weak' : buttonStyleByControlLabel[leftButtonStyle],
                text: alignButtonHorizontally ? leftButtonText : topButtonText,
              }
            : undefined,
          [`${alignButtonHorizontally ? 'right' : 'bottom'}Button`]: !onlyOneButton
            ? {
                type: useDefaultButtonColors ? 'primary' : buttonTypeByControlLabel[rightButtonType],
                style: useDefaultButtonColors ? 'fill' : buttonStyleByControlLabel[rightButtonStyle],
                text: alignButtonHorizontally ? rightButtonText : bottomButtonText,
              }
            : undefined,
        }}
      >
        {onlyOneButton ? (
          <TDSAlertDialog
            title={title}
            description={hideDescription ? undefined : description}
            buttonText={buttonText}
            open={open}
            onClose={() => (onDimmerClick ?? navigation.goBack)()}
            onButtonClick={onButtonClick}
            parentHeight={containerHeight}
            disableAnimation={withoutAnimation}
          />
        ) : (
          <TDSConfirmDialog
            title={title}
            description={hideDescription ? undefined : description}
            open={open}
            onClose={() => (onButtonClick ?? navigation.goBack)()}
            cancelButton={
              <Button
                type={useDefaultButtonColors ? 'dark' : buttonTypeByControlLabel[leftButtonType]}
                style={useDefaultButtonColors ? 'weak' : buttonStyleByControlLabel[leftButtonStyle]}
                onClick={onLeftButtonClick}
              >
                {alignButtonHorizontally ? leftButtonText : topButtonText}
              </Button>
            }
            confirmButton={
              <Button
                type={useDefaultButtonColors ? undefined : buttonTypeByControlLabel[rightButtonType]}
                style={useDefaultButtonColors ? undefined : buttonStyleByControlLabel[rightButtonStyle]}
                onClick={onRightButtonClick}
              >
                {alignButtonHorizontally ? rightButtonText : bottomButtonText}
              </Button>
            }
            parentHeight={containerHeight}
            disableAnimation={withoutAnimation}
          />
        )}
      </TDSComponent>
    </Container>
  );
}

addPropertyControls(Dialog, {
  title: {
    title: '✏️ 제목',
    type: ControlType.String,
    displayTextArea: true,
    defaultValue: '다이얼로그 제목은\n최대한 간결하게 작성해주세요',
  },
  hideDescription: {
    title: '설명',
    type: ControlType.Boolean,
    enabledTitle: '없음',
    disabledTitle: '있음',
    defaultValue: true,
  },
  description: {
    title: '↳ 설명 텍스트',
    type: ControlType.String,
    defaultValue: '보조적인 설명을 적는 옵션',
    hidden(props) {
      return props.hideDescription;
    },
  },
  onlyOneButton: {
    title: '🕹 버튼 개수',
    type: ControlType.Boolean,
    enabledTitle: '1개',
    disabledTitle: '2개',
    defaultValue: true,
  },
  buttonText: {
    title: '↳ 버튼 텍스트',
    type: ControlType.String,
    defaultValue: '확인',
    hidden(props) {
      return !props.onlyOneButton;
    },
  },
  alignButtonHorizontally: {
    title: '↳ 버튼 정렬',
    type: ControlType.Boolean,
    enabledTitle: '↔ 좌우',
    disabledTitle: '↕ 위아래',
    defaultValue: true,
    hidden(props) {
      return props.onlyOneButton;
    },
  },
  rightButtonText: {
    title: '↳ 오른쪽 텍스트',
    type: ControlType.String,
    defaultValue: '하기',
    hidden(props) {
      return props.onlyOneButton || !props.alignButtonHorizontally;
    },
  },
  bottomButtonText: {
    title: '↳ 아래쪽 텍스트',
    type: ControlType.String,
    defaultValue: '하기',
    hidden(props) {
      return props.onlyOneButton || props.alignButtonHorizontally;
    },
  },
  rightButtonType: {
    title: '　　↳ 색상',
    type: ControlType.Enum,
    options: buttonTypeLabels as any,
    defaultValue: buttonTypeLabels[0],
    hidden(props) {
      return props.onlyOneButton || props.useDefaultButtonColors;
    },
  },
  rightButtonStyle: {
    title: '　　↳ 타입',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonStyleLabels as any,
    defaultValue: buttonStyleLabels[0],
    hidden(props) {
      return props.onlyOneButton || props.useDefaultButtonColors;
    },
  },
  leftButtonText: {
    title: '↳ 왼쪽 텍스트',
    type: ControlType.String,
    defaultValue: '안하기',
    hidden(props) {
      return props.onlyOneButton || !props.alignButtonHorizontally;
    },
  },
  topButtonText: {
    title: '↳ 위쪽 텍스트',
    type: ControlType.String,
    defaultValue: '안하기',
    hidden(props) {
      return props.onlyOneButton || props.alignButtonHorizontally;
    },
  },
  leftButtonType: {
    title: '　　↳ 색상',
    type: ControlType.Enum,
    options: buttonTypeLabels as any,
    defaultValue: buttonTypeLabels[1],
    hidden(props) {
      return props.onlyOneButton || props.useDefaultButtonColors;
    },
  },
  leftButtonStyle: {
    title: '　　↳ 타입',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: buttonStyleLabels as any,
    defaultValue: buttonStyleLabels[1],
    hidden(props) {
      return props.onlyOneButton || props.useDefaultButtonColors;
    },
  },
  useDefaultButtonColors: {
    title: '↳ 버튼 색상',
    type: ControlType.Boolean,
    enabledTitle: '디폴트',
    disabledTitle: '바꿀래요',
    defaultValue: true,
    hidden(props) {
      return props.onlyOneButton;
    },
  },
  showDimmer: {
    title: '🌚 Dimmer 배경 ',
    type: ControlType.Boolean,
    enabledTitle: '켜기',
    disabledTitle: '끄기',
    defaultValue: true,
  },
  onDimmerClick: {
    type: ControlType.EventHandler,
  },
  onButtonClick: {
    type: ControlType.EventHandler,
  },
  onLeftButtonClick: {
    type: ControlType.EventHandler,
  },
  onRightButtonClick: {
    type: ControlType.EventHandler,
  },
});

(Dialog as any).defaultProps = {
  width: 375,
  height: 667,
};

Dialog.displayName = makeComponentDisplayName('Dialog', '다이얼로그');

const Container = styled.div<{
  hideDimmer: boolean;
  alignButton: 'vertical' | 'horizontal';
}>`
  width: 100%;
  height: 100%;

  .dimmer {
    background-color: rgba(0, 0, 0, 0.56);
    ${({ hideDimmer }) => (hideDimmer ? 'background: transparent;' : '')}
  }

  .confirm-dialog__buttons {
    flex-direction: ${({ alignButton }) => (alignButton === 'horizontal' ? 'row' : 'column')};
  }
`;
