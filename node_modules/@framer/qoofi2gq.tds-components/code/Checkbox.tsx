import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import {
  Checkbox as TDSCheckbox,
  Props as TDSCheckboxProps,
} from '../@tossteam/tds-web/react/components/Checkbox/Checkbox';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const checkedLabels = ['On', 'Off'] as const;
const typeLabels = ['큰체크', '작은체크', '체크'] as const;
const disabledLabels = ['아니오', '네'] as const;

type CheckedLabel = typeof checkedLabels[number];
type TypeLabel = typeof typeLabels[number];
type DisabledLabel = typeof disabledLabels[number];

interface Props {
  checked: CheckedLabel;
  type: TypeLabel;
  disabled: DisabledLabel;

  disableInspector?: boolean;

  onToggle?: () => void;
  onCheck?: () => void;
  onUncheck?: () => void;
}

const checkedByControlLabel: {
  [key in CheckedLabel]: TDSCheckboxProps['checked'];
} = {
  On: true,
  Off: false,
};

const typeByControlLabel: {
  [key in TypeLabel]: TDSCheckboxProps['type'];
} = {
  큰체크: 'circle-big-primary',
  작은체크: 'circle-small-primary',
  체크: 'primary',
};

const disabledByControlLabel: {
  [key in DisabledLabel]: TDSCheckboxProps['disabled'];
} = {
  아니오: false,
  네: true,
};

export function Checkbox(props: Props) {
  const {
    checked,
    type,
    disabled,
    onToggle,
    onCheck,
    onUncheck,

    disableInspector,
  } = useFilteringEventHandlersInInspector(props);

  const [value, setValue] = React.useState(checkedByControlLabel[checked]);

  React.useEffect(() => {
    setValue(checkedByControlLabel[checked]);
  }, [checkedByControlLabel[checked]]);

  const handleChange = (_, newChecked) => {
    setValue(newChecked);
    onToggle?.();
    newChecked ? onCheck?.() : onUncheck?.();
  };

  return (
    <TDSComponent
      name="Checkbox"
      disabled={disableInspector}
      summary={{
        checked: value,
        type: typeByControlLabel[type],
        disabled: disabledByControlLabel[disabled],
      }}
    >
      <TDSCheckbox
        checked={value}
        type={typeByControlLabel[type]}
        disabled={disabledByControlLabel[disabled]}
        onChange={handleChange}
      />
    </TDSComponent>
  );
}

addPropertyControls(Checkbox, {
  checked: {
    title: '체크',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: checkedLabels as any,
    defaultValue: 'On',
  },
  type: {
    title: '타입',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: typeLabels as any,
    defaultValue: '큰체크',
  },
  disabled: {
    title: '비활성',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: disabledLabels as any,
    defaultValue: '아니오',
  },
  onToggle: {
    type: ControlType.EventHandler,
  },
  onCheck: {
    type: ControlType.EventHandler,
  },
  onUncheck: {
    type: ControlType.EventHandler,
  },
});

(Checkbox as any).defaultProps = {
  width: 30,
  height: 30,
};

Checkbox.displayName = makeComponentDisplayName('Checkbox', '체크박스');
