import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import {
  Props as TDSTextButtonProps,
  TextButton as TDSTextButton,
} from '../@tossteam/tds-web/react/components/TextButton/TextButton';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const shapeLabels = ['화살표', '텍스트만', '밑줄'] as const;
const typeLabels = ['🔵 블루', '⚪️ 그레이'] as const;
const disabledLabels = ['아니오', '네'] as const;

type ShapeLabel = typeof shapeLabels[number];
type TypeLabel = typeof typeLabels[number];
type DisabledLabel = typeof disabledLabels[number];

interface Props {
  shape: ShapeLabel;
  text: string;
  type: TypeLabel;
  disabled: DisabledLabel;

  onClick?: () => void;
}

const typeByControlLabel: { [key in TypeLabel]: TDSTextButtonProps['type'] } = {
  '🔵 블루': 'primary',
  '⚪️ 그레이': 'grey',
};

const disabledByControlLabel: {
  [key in DisabledLabel]: TDSTextButtonProps['disabled'];
} = {
  아니오: false,
  네: true,
};

export function TextButton(props: Props) {
  const { shape, text, type, disabled, onClick } = useFilteringEventHandlersInInspector(props);

  return (
    <TDSComponent
      name="TextButton"
      summary={{
        type: shape === '밑줄' ? 'underline' : typeByControlLabel[type],
        disabled: disabledByControlLabel[disabled],
        arrow: shape === '화살표',
        text,
      }}
    >
      <TDSTextButton
        type={shape === '밑줄' ? 'underline' : typeByControlLabel[type]}
        disabled={disabledByControlLabel[disabled]}
        withArrow={shape === '화살표'}
        onClick={onClick}
      >
        {text}
      </TDSTextButton>
    </TDSComponent>
  );
}

addPropertyControls(TextButton, {
  shape: {
    title: '형태',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: shapeLabels as any,
    defaultValue: '화살표',
  },
  text: {
    title: '텍스트',
    type: ControlType.String,
    defaultValue: '버튼레이블',
  },
  type: {
    title: '색상',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: typeLabels as any,
    defaultValue: '블루',
    hidden(props) {
      return props.shape === '밑줄';
    },
  },
  disabled: {
    title: '비활성',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: disabledLabels as any,
    defaultValue: '아니오',
  },
  onClick: {
    type: ControlType.EventHandler,
  },
});

(TextButton as any).defaultProps = {
  width: 98,
  height: 33,
};

TextButton.displayName = makeComponentDisplayName('TextButton', '텍스트버튼');
