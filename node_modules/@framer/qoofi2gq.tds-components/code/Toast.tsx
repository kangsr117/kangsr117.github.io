import { addPropertyControls, ControlType, RenderTarget, useIsInCurrentNavigationTarget } from 'framer';
import * as React from 'react';
import { useEffect, useState } from 'react';
import { Button as TDSButton } from '../@tossteam/tds-web/react/components/Button';
import { default as TDSToast } from '../@tossteam/tds-web/react/components/Toast';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import '../src/styles/tds-framer.css';
import { isStaticRenderTarget } from '../src/utils/isStaticRenderTarget';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

interface Props {
  text: string;
  hideLeftIcon: boolean;
  iconName: string;
  hideRightButton: boolean;
  buttonText: string;
  notHigherThanCTA: boolean;
  preserve: boolean;

  onButtonClick: () => void;
}

export function Toast(props: Props) {
  const {
    text,
    hideLeftIcon,
    iconName,
    hideRightButton,
    buttonText,
    notHigherThanCTA,
    preserve,

    onButtonClick,
  } = useFilteringEventHandlersInInspector(props);

  const isInCurrentNavigationTarget = useIsInCurrentNavigationTarget();
  const [open, setOpen] = useState(isStaticRenderTarget());
  useEffect(() => {
    if (isStaticRenderTarget()) {
      return;
    }

    let openTimeoutHandler;
    let closeTimeoutHandler;

    if (!isInCurrentNavigationTarget) {
      closeTimeoutHandler = setTimeout(() => {
        setOpen(false);
      }, 500);
    }

    if (RenderTarget.current() === RenderTarget.preview) {
      openTimeoutHandler = setTimeout(() => {
        setOpen(true);
        if (preserve) {
          return;
        }
        closeTimeoutHandler = setTimeout(() => {
          setOpen(false);
        }, 3000);
      }, 100);
    }
    return () => {
      clearTimeout(openTimeoutHandler);
      clearTimeout(closeTimeoutHandler);
    };
  }, [isInCurrentNavigationTarget]);
  return (
    <TDSComponent
      name="Toast"
      summary={{
        icon: !hideLeftIcon ? iconName : undefined,
        text,
        button: !hideRightButton
          ? {
              type: 'light',
              style: 'weak',
              size: 'tiny',
              text: buttonText,
            }
          : undefined,
      }}
    >
      <TDSToast
        open={open}
        icon={hideLeftIcon ? undefined : iconName}
        text={text}
        button={
          hideRightButton ? undefined : (
            <TDSButton type="light" style="weak" size="tiny" onClick={onButtonClick}>
              {buttonText}
            </TDSButton>
          )
        }
        higherThanCTA={!notHigherThanCTA}
        withoutAnimation={isStaticRenderTarget()}
      />
    </TDSComponent>
  );
}

addPropertyControls(Toast, {
  text: {
    title: '텍스트',
    type: ControlType.String,
    displayTextArea: true,
    defaultValue: '오류가 발생했어요',
  },
  hideLeftIcon: {
    title: '왼쪽 아이콘',
    type: ControlType.Boolean,
    enabledTitle: '없음',
    disabledTitle: '있음',
    defaultValue: true,
  },
  iconName: {
    title: '↳ 아이콘이름',
    type: ControlType.String,
    defaultValue: 'icn-success-color',
    hidden(props) {
      return props.hideLeftIcon;
    },
  },
  hideRightButton: {
    title: '오른쪽 버튼',
    type: ControlType.Boolean,
    enabledTitle: '없음',
    disabledTitle: '있음',
    defaultValue: true,
  },
  buttonText: {
    title: '↳ 버튼텍스트',
    type: ControlType.String,
    defaultValue: '확인하기',
    hidden(props) {
      return props.hideRightButton;
    },
  },
  notHigherThanCTA: {
    title: 'CTA와 겹치나요?',
    type: ControlType.Boolean,
    enabledTitle: '아니요',
    disabledTitle: '네',
    defaultValue: true,
  },
  preserve: {
    title: '노출 시간',
    type: ControlType.Boolean,
    enabledTitle: '무한히',
    disabledTitle: '보통',
    defaultValue: false,
  },

  onButtonClick: {
    type: ControlType.EventHandler,
  },
});

(Toast as any).defaultProps = {
  width: 375,
  height: 667,
};

Toast.displayName = makeComponentDisplayName('Toast', '토스트');
