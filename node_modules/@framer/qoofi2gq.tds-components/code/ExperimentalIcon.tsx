import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { useEffect } from 'react';
import { colors } from '../@tossteam/colors';
import { default as TDSIcon, Props as TDSIconProps } from '../@tossteam/tds-web/react/components/Icon/Icon';
import { iconDisplayNameByName, iconNames } from '../src/constants/icon';
import '../src/styles/tds-framer.css';
import { makeDisplayName } from '../src/utils/makeDisplayName';
import { colors as canvasColors } from './canvas';

interface Props {
  typeNormal: boolean;
  useSlider: boolean;
  iconIndex: number;
  iconName: string;
  color: string;
}

function getIconName({ useSlider, iconIndex, iconName }: Props) {
  return useSlider ? iconNames[iconIndex - 1] : iconName;
}

function getIconComponent(props: Props) {
  const { typeNormal, useSlider, iconIndex, color } = props;
  const iconProps: TDSIconProps = {
    name: getIconName(props),
    color: typeNormal ? color : undefined,
    size: '100%',
  };

  const [showIconPreviewList, setShowIconPreviewList] = React.useState(false);

  useEffect(() => {
    setShowIconPreviewList(useSlider);

    const timeout = setTimeout(() => {
      setShowIconPreviewList(false);
    }, 700);

    return () => {
      clearTimeout(timeout);
    };
  }, [useSlider, iconIndex]);

  return (
    <>
      {!showIconPreviewList && <TDSIcon {...iconProps} />}
      <div>
        {[...new Array(9)]
          .map((_, index) => index - 4)
          .filter(index => index + iconIndex - 1 >= 0 && index + iconIndex - 1 < iconNames.length)
          .map(index => {
            const currentIconIndex = index + iconIndex - 1;
            const currentIconName = iconNames[currentIconIndex];

            return (
              <div
                key={currentIconIndex}
                style={{
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  bottom: 0,
                  right: 0,
                  transform: `translateY(calc(${index}0px + ${index * 100}%))`,
                  transition: 'transform 50ms linear, opacity 300ms linear',
                  opacity: showIconPreviewList ? (index === 0 ? 1 : 0.9) : 0,
                }}
              >
                <div
                  style={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    bottom: 0,
                    transform: `translateX(calc(-100% - 12px))`,
                    display: 'flex',
                    alignItems: 'center',
                    height: '100%',
                    backgroundColor: showIconPreviewList ? colors.white : undefined,
                    color: index === 0 ? colors.red900 : undefined,
                    fontWeight: index === 0 ? 'bold' : undefined,
                    fontSize: index === 0 ? 20 : undefined,
                  }}
                >
                  {currentIconIndex + 1}
                  {index === 0 ? '👉' : ''}
                </div>
                <TDSIcon {...iconProps} name={currentIconName} />
                <div
                  style={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    bottom: 0,
                    transform: `translateX(calc(100% + 12px))`,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'flex-start',
                    backgroundColor: showIconPreviewList ? colors.white : undefined,
                    width: '100%',
                    overflow: 'visible',
                    whiteSpace: 'nowrap',
                  }}
                >
                  {`${currentIconName} - ${iconDisplayNameByName[currentIconName].name}`}
                </div>
              </div>
            );
          })}
      </div>
    </>
  );
}

export function ExperimentalIcon(props: Props) {
  const { typeNormal } = props;

  if (typeNormal) {
    return getIconComponent(props);
  }

  return (
    <div
      style={{
        position: 'relative',
        width: '100%',
        minWidth: 40,
        minHeight: 40,
        paddingTop: '100%',
      }}
    >
      <div
        style={{
          position: 'absolute',
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          borderRadius: '50%',
          overflow: 'hidden',
        }}
      >
        {getIconComponent(props)}
      </div>
    </div>
  );
}

addPropertyControls(ExperimentalIcon, {
  typeNormal: {
    title: '종류',
    type: ControlType.Boolean,
    enabledTitle: '일반',
    disabledTitle: '원형',
    defaultValue: true,
  },
  useSlider: {
    title: '',
    type: ControlType.Boolean,
    enabledTitle: '슬라이더',
    disabledTitle: '직접입력',
    defaultValue: true,
  },
  iconIndex: {
    title: '아이콘',
    type: ControlType.Number,
    min: 1,
    max: iconNames.length,
    defaultValue: 263,
    hidden(props) {
      return !props.useSlider;
    },
  },
  iconName: {
    title: '아이콘',
    type: ControlType.String,
    defaultValue: 'icn-arrow-rightwards-line',
    hidden(props) {
      return props.useSlider;
    },
  },
  color: {
    title: '컬러',
    type: ControlType.Color,
    defaultValue: canvasColors['Grey600 - 가벼운 텍스트, 그레이 아이콘'],
    hidden(props: Props) {
      return !props.typeNormal || !getIconName(props).endsWith('line');
    },
  },
});

(ExperimentalIcon as any).defaultProps = {
  width: 24,
  height: 24,
};

ExperimentalIcon.displayName = makeDisplayName('lab')('ExperimentalIcon', '아이콘');
