import { addPropertyControls, ControlType } from 'framer';
import * as React from 'react';
import { ComponentProps, useEffect, useState } from 'react';
import { default as TDSAgreement } from '../@tossteam/tds-web/react/components/NewAgreement';
import { TDSComponent } from '../src/components/TDSComponent';
import { useFilteringEventHandlersInInspector } from '../src/hooks/useFilteringEventHandlersInInspector';
import { useUncontrolled } from '../src/hooks/useUncontrolled';
import '../src/styles/tds-framer.css';
import { isStaticRenderTarget } from '../src/utils/isStaticRenderTarget';
import { makeComponentDisplayName } from '../src/utils/makeDisplayName';

const typeLabels = ['Big', 'Medium', 'Small'] as const;

type TypeLabel = typeof typeLabels[number];

const componentByTypeLabel: Record<TypeLabel, JSX.Element> = {
  Big: <TDSAgreement.RowBig />,
  Medium: <TDSAgreement.RowMedium />,
  Small: <TDSAgreement.RowSmall />,
};

const componentTypeNameByTypeLabel: Record<TypeLabel, string> = {
  Big: 'AgreementRowBig',
  Medium: 'AgreementRowMedium',
  Small: 'AgreementRowSmall',
};

const childComponentByTypeLabel: Record<TypeLabel, JSX.Element | null> = {
  Big: <TDSAgreement.RowMedium />,
  Medium: <TDSAgreement.RowSmall />,
  Small: null,
};

const childrenComponentTypeNameByTypeLabel: Record<TypeLabel, string | undefined> = {
  Big: 'AgreementRowMedium',
  Medium: 'AgreementRowSmall',
  Small: undefined,
};

interface Props {
  type: TypeLabel;
  text: string;
  withUnderline: boolean;
  indentationLevel: 0 | 1 | 2;

  withCheckbox: boolean;
  checked: boolean;

  withArrow: boolean;
  withBorder: boolean;

  withSubAgreement: boolean;
  isSubAgreementOpen: boolean;
  subAgreementWithCheckbox: boolean;
  subAgreementChecked: boolean;
  subAgreements: string[];

  onAllChecked?: () => void;
  onNotAllChecked?: () => void;
}

export function AgreementV2(props: Props) {
  const {
    type,
    text,
    withUnderline,
    indentationLevel,

    withCheckbox,
    checked,

    withArrow,
    withBorder,

    withSubAgreement,
    isSubAgreementOpen,
    subAgreementWithCheckbox,
    subAgreementChecked,
    subAgreements,

    onAllChecked,
    onNotAllChecked,
  } = useFilteringEventHandlersInInspector(props);

  // TODO: refactor agreement checkbox logis into a hook function
  const [subAgreementRows, setSubAgreementRows] = useState<
    { text: string; checked: boolean; onChange: (checked: boolean) => void }[]
  >([]);
  useEffect(() => {
    setSubAgreementRows(
      withSubAgreement
        ? subAgreements.map((text, index) => ({
            text,
            checked: withCheckbox ? checked : subAgreementChecked,
            onChange: checked =>
              setSubAgreementRows(rows => [
                ...rows.slice(0, index),
                {
                  ...rows[index],
                  checked,
                },
                ...rows.slice(index + 1),
              ]),
          }))
        : []
    );
  }, [withSubAgreement, subAgreements]);

  const doesSubAgreementExist = type !== 'Small' && withSubAgreement && subAgreementRows.length > 0;
  const isAllChecked =
    doesSubAgreementExist && type === 'Big' ? subAgreementRows.every(({ checked }) => checked) : checked;

  const { value: checkedValue, handleChange: handleCheckedChange } = useUncontrolled(isAllChecked);

  useEffect(() => {
    if (isStaticRenderTarget() || !doesSubAgreementExist) {
      return;
    }

    if (checkedValue !== isAllChecked) {
      handleCheckedChange(isAllChecked);
      if (isAllChecked) {
        onAllChecked?.();
      } else {
        onNotAllChecked?.();
      }
    }
  }, [subAgreementRows]);

  const component = componentByTypeLabel[type];
  const childComponent = childComponentByTypeLabel[type];

  const componentProps: ComponentProps<typeof TDSAgreement.RowBig> = {
    ...component.props,
    checked: checkedValue,
    onCheckedChange: (_, newValue) => {
      if (!doesSubAgreementExist) {
        handleCheckedChange(newValue);
        return;
      }
      subAgreementRows.forEach(({ onChange }) => onChange(newValue));
    },
    withBorder: type === 'Big' && withBorder,
    withCheckbox: type !== 'Small' && withCheckbox,
    withArrow: type !== 'Small' && withArrow,
    underline: withUnderline,
    defaultCollapsed: !isSubAgreementOpen,
  };
  const childrenNode = [
    text,
    doesSubAgreementExist ? (
      <TDSAgreement>
        {subAgreementRows.map(({ text, checked, onChange }) =>
          React.cloneElement(
            childComponent,
            {
              checked,
              onCheckedChange: (_, newValue) => onChange(newValue),
              withArrow: type === 'Big',
              withCheckbox: type === 'Big' && subAgreementWithCheckbox,
            },
            text
          )
        )}
      </TDSAgreement>
    ) : null,
  ];

  return (
    <TDSComponent
      name={component.type.name}
      summary={{
        type: componentTypeNameByTypeLabel[type],
        text,
        checked: type !== 'Small' && withCheckbox ? checked : undefined,
        checkbox: type !== 'Small' ? withCheckbox : undefined,
        border: type === 'Big' ? withBorder : undefined,
        underline: type === 'Small' ? withUnderline : undefined,
        subAgreements: doesSubAgreementExist
          ? {
              items: subAgreements,
              withCheckbox: subAgreementWithCheckbox ? subAgreementWithCheckbox : undefined,
              checked: subAgreementWithCheckbox ? subAgreementChecked : undefined,
            }
          : undefined,
      }}
    >
      <TDSAgreement>{React.cloneElement(component, componentProps, childrenNode)}</TDSAgreement>
    </TDSComponent>
  );
}

addPropertyControls(AgreementV2, {
  type: {
    title: '🚥 종류',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: typeLabels as any,
    defaultValue: typeLabels[2],
  },
  text: {
    title: '✏️ 텍스트',
    type: ControlType.String,
    defaultValue: '토스증권 필수 약관 전체 동의',
    hidden(props) {
      return props.type === 'Small';
    },
  },
  withUnderline: {
    title: '↳ 밑줄',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: false,
    hidden(props) {
      return props.type !== 'Small';
    },
  },

  withCheckbox: {
    title: '☑️ 체크',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type === 'Small';
    },
  },
  checked: {
    title: '　 ↳ 체크',
    type: ControlType.Boolean,
    enabledTitle: 'ON',
    disabledTitle: 'OFF',
    defaultValue: false,
    hidden(props) {
      return props.type === 'Small' || !props.withCheckbox;
    },
  },

  withArrow: {
    title: '➡️ 화살표',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type === 'Small';
    },
  },
  indentationLevel: {
    title: '📐 들여쓰기',
    type: ControlType.Enum,
    displaySegmentedControl: true,
    options: [0, 1, 2],
    optionTitles: ['없음', '🚧1단계', '🚧2단계'],
    defaultValue: 0,
  },
  withBorder: {
    title: '📏 보더',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big';
    },
  },

  withSubAgreement: {
    title: '👩‍👧‍👧 하위약관',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: false,
    hidden(props) {
      return props.type === 'Small';
    },
  },
  isSubAgreementOpen: {
    title: '　 ↳ 펼침',
    type: ControlType.Boolean,
    enabledTitle: '펼치기',
    disabledTitle: '접기',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big' || !props.withSubAgreement;
    },
  },
  subAgreementWithCheckbox: {
    title: '　 ↳ 체크',
    type: ControlType.Boolean,
    enabledTitle: '있음',
    disabledTitle: '없음',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big' || !props.withSubAgreement;
    },
  },
  subAgreementChecked: {
    title: '　 ↳ 상태',
    type: ControlType.Boolean,
    enabledTitle: 'ON',
    disabledTitle: 'OFF',
    defaultValue: true,
    hidden(props) {
      return props.type !== 'Big' || !props.withSubAgreement || !!props.withCheckbox;
    },
  },
  subAgreements: {
    title: '하위약관',
    type: ControlType.Array,
    propertyControl: {
      type: ControlType.String,
    },
    defaultValue: ['종합 계좌 약관', '전자금융거래 이용약관', '제휴사 신용정보 조회 동의 (선택)'],
    hidden(props) {
      return !props.withSubAgreement;
    },
  },

  onAllChecked: {
    type: ControlType.EventHandler,
  },
  onNotAllChecked: {
    type: ControlType.EventHandler,
  },
});

(AgreementV2 as any).defaultProps = {
  width: 375,
  height: 195,
  subAgreements: ['종합 계좌 약관', '전자금융거래 이용약관', '제휴사 신용정보 조회 동의 (선택)'],
};

AgreementV2.displayName = makeComponentDisplayName('Agreement', '약관');
