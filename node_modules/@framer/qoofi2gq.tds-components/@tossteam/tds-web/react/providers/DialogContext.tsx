import * as React from "react";
import {
  cloneElement,
  ComponentProps,
  createContext,
  MouseEvent,
  ReactElement,
  ReactNode,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useState,
} from "react";
import { Button } from "../components/Button";
import AlertDialog from "../components/Overlays/AlertDialog";
import ConfirmDialog from "../components/Overlays/ConfirmDialog";

type AlertDialogProps = ComponentProps<typeof AlertDialog>;
type AlertOptions = Omit<AlertDialogProps, "open" | "onClose">;

type ConfirmDialogProps = ComponentProps<typeof ConfirmDialog>;
interface ConfirmOptions
  extends Omit<
    ConfirmDialogProps,
    "open" | "cancelButton" | "confirmButton" | "onClose"
  > {
  confirmButton?: ReactElement | string;
  cancelButton?: ReactElement | string;
}

interface DialogContextOptions {
  openAlert: (options: AlertOptions) => Promise<void>;
  openConfirm: (options: ConfirmOptions) => Promise<boolean>;
  close: () => void;
}

const DialogContext = createContext<DialogContextOptions | undefined>(
  undefined
);

export function DialogProvider({ children }: { children: ReactNode }) {
  const [alertState, setAlertState] = useState<AlertDialogProps>({
    open: false,
    title: "",
  });

  const [confirmState, setConfirmState] = useState<ConfirmDialogProps>({
    open: false,
    title: "",
    cancelButton: <></>,
    confirmButton: <></>,
  });

  const close = useCallback(() => {
    setAlertState((prevState) => ({ ...prevState, open: false }));
    setConfirmState((prevState) => ({ ...prevState, open: false }));
  }, []);

  const openAlert = useCallback(
    ({ buttonText = "확인", onButtonClick, ...otherOptions }: AlertOptions) => {
      return new Promise<void>((resolve) => {
        setAlertState((prevState) => {
          return {
            ...prevState,
            ...otherOptions,
            open: true,
            buttonText,
            onButtonClick: (event: MouseEvent<HTMLButtonElement>) => {
              resolve();
              if (onButtonClick !== undefined) {
                onButtonClick(event);
              } else {
                close();
              }
            },
          };
        });
      });
    },
    [close]
  );

  const openConfirm = useCallback(
    ({
      confirmButton = "확인",
      cancelButton = "취소",
      ...otherOptions
    }: ConfirmOptions) => {
      const _confirmButton =
        typeof confirmButton === "string" ? (
          <Button>{confirmButton}</Button>
        ) : (
          confirmButton
        );
      const _cancelButton =
        typeof cancelButton === "string" ? (
          <Button>{cancelButton}</Button>
        ) : (
          cancelButton
        );

      return new Promise<boolean>((resolve) => {
        setConfirmState((prevState) => {
          return {
            ...prevState,
            ...otherOptions,
            open: true,
            confirmButton: cloneElement<ComponentProps<typeof Button>>(
              _confirmButton,
              {
                ..._confirmButton.props,
                onClick: (event) => {
                  resolve(true);

                  if (_cancelButton.props.onClick === undefined) {
                    close();
                  } else {
                    _confirmButton.props.onClick(event);
                  }
                },
              }
            ),
            cancelButton: cloneElement<ComponentProps<typeof Button>>(
              _cancelButton,
              {
                ..._cancelButton.props,
                onClick: (event) => {
                  resolve(false);

                  if (_cancelButton.props.onClick === undefined) {
                    close();
                  } else {
                    _cancelButton.props.onClick(event);
                  }
                },
              }
            ),
          };
        });
      });
    },
    [close]
  );

  const controls = useMemo(() => {
    return { close, openConfirm, openAlert };
  }, [close, openAlert, openConfirm]);

  return (
    <DialogContext.Provider value={controls}>
      {children}
      <AlertDialog {...alertState} />
      <ConfirmDialog {...confirmState} />
    </DialogContext.Provider>
  );
}

interface UseDialogOptions {
  /** @default true */
  closeOnDestroy?: boolean;
}

export function useDialog(options: UseDialogOptions = {}) {
  const { closeOnDestroy = true } = options;
  const controls = useContext(DialogContext);

  useEffect(
    () => () => {
      if (closeOnDestroy) {
        controls?.close();
      }
    },
    [closeOnDestroy, controls]
  );

  if (controls == null) {
    throw new Error("DialogContext 안에서 사용해주세요");
  }

  return controls;
}
