import * as lottie from "lottie-web";
import { AnimationItem } from "lottie-web";
import * as React from "react";
import { memo, MutableRefObject, useEffect, useRef, useState } from "react";

interface Props {
  url: string;
  loop?: boolean;
  autoplay?: boolean;
  controller?: MutableRefObject<AnimationItem | null>;

  className?: string;
}

const Lottie = memo(
  ({ url, loop = true, autoplay = true, controller, className }: Props) => {
    const [hasParsingError, setHasParsingError] = useState(false);
    const container = useRef<HTMLDivElement | null>(null);
    const player = useRef<AnimationItem | null>(null);
    const [, assetsPath, name] = /(.+)\/(.+)\..+/.exec(url) ?? [];

    useEffect(() => {
      if (container.current == null) {
        return;
      }

      setHasParsingError(false);
      try {
        player.current = lottie.loadAnimation({
          container: container.current,
          loop,
          autoplay,
          renderer: "svg",
          path: url,
          assetsPath,
          name,
          rendererSettings: {
            progressiveLoad: true,
            hideOnTransparent: true,
          },
        });
      } catch {
        setHasParsingError(true);
      }

      if (controller !== undefined && controller.current == null) {
        controller.current = player.current;
      }

      return () => {
        player.current?.destroy();
      };
    }, [assetsPath, autoplay, controller, loop, name, url]);

    return (
      <div className={className} ref={container}>
        {hasParsingError ? "[ERROR] 로띠 주소를 확인해 주세요" : undefined}
      </div>
    );
  },
  (prev, next) => {
    return (
      prev.url === next.url &&
      prev.loop === next.loop &&
      prev.autoplay === next.autoplay
    );
  }
);

export default Lottie;
