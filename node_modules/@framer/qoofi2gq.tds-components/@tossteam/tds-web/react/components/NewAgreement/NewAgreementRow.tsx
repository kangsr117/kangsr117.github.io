import classnames from "classnames";
import * as React from "react";
import {
  ChangeEvent,
  ComponentProps,
  HTMLProps,
  MouseEvent,
  ReactElement,
} from "react";
import { adaptive } from "../../../../../@tossteam/colors";
import useControlled from "../../hooks/useControlled";
import Checkbox from "../Checkbox";
import Collapsible from "../Collapsible";
import { default as Txt } from "../Text";
import { FontWeightValue, TypographyValue } from "../Text/Text";
import { AGREEMENT_COMPONENT_ID } from "./NewAgreement";
import NewAgreementRowActionArea from "./NewAgreementRowActionArea";
import NewAgreementRowCheckbox from "./NewAgreementRowCheckbox";

type LIProps = HTMLProps<HTMLLIElement>;

interface PrivateProps {
  color?: string;
  typography: TypographyValue;
  fontWeight: FontWeightValue;
}

interface WithCheckboxProps {
  withCheckbox: true;
  checked?: boolean;
  checkboxProps?: ComponentProps<typeof Checkbox>;
  defaultChecked?: boolean;
  onCheckedChange?: (
    event: ChangeEvent<HTMLInputElement>,
    checked: boolean
  ) => void;
}

interface WithoutCheckboxProps {
  withCheckbox?: false;
  checked?: never;
  checkboxProps?: never;
  defaultChecked?: never;
  onCheckedChange?: never;
}

export type NewAgreementRowCheckboxProps =
  | WithCheckboxProps
  | WithoutCheckboxProps;

export type NewAgreementRowProps = Omit<LIProps, "checked" | "onChange"> & {
  collapsed?: boolean;
  defaultCollapsed?: boolean;
  withArrow?: boolean;
  withBorder?: boolean;

  onLabelClick?: (event: MouseEvent<HTMLButtonElement>) => void;
};

export type Props = NewAgreementRowProps &
  (NewAgreementRowCheckboxProps | {}) &
  PrivateProps;

// TODO(cherry-style): anchor로 활용할 수 있게 하기

function NewAgreementRow({
  color = adaptive.grey800,
  children,
  collapsed: collapsedProp,
  defaultCollapsed = false,
  withArrow = false,
  withBorder = false,
  typography,
  fontWeight,
  className,
  onLabelClick,
  ...rest
}: Props) {
  const [collapsedValue, setCollapsed] = useControlled({
    controlledValue: collapsedProp,
    defaultValue: defaultCollapsed,
  });

  const handleLabelClick = () => {
    setCollapsed(!collapsed);
  };

  const childrenArray = React.Children.toArray(children);
  const agreementChild = childrenArray.find(isAgreementComponent);
  const restChildren = childrenArray.filter(
    (child) => child !== agreementChild
  );

  const collapsed = agreementChild === undefined || collapsedValue;

  const text = (
    <Txt
      className="m-new-agreement-row__text"
      typography={typography}
      fontWeight={fontWeight}
      color={color}
    >
      {restChildren}
    </Txt>
  );

  return (
    <li
      className={classnames(
        "m-new-agreement-row",
        { "m-new-agreement-row--with-arrow": withArrow },
        { "m-new-agreement-row--with-checkbox": isWithCheckbox(rest) },
        className
      )}
      {...rest}
    >
      <div className="m-new-agreement-row__body">
        {isWithCheckbox(rest) && (
          <NewAgreementRowCheckbox
            checked={rest.checked}
            defaultChecked={rest.defaultChecked}
            onChange={rest.onCheckedChange}
            {...rest.checkboxProps}
          >
            {text}
          </NewAgreementRowCheckbox>
        )}
        <NewAgreementRowActionArea
          downArrow={!collapsed}
          withArrow={withArrow}
          onClick={onLabelClick ?? handleLabelClick}
        >
          {!isWithCheckbox(rest) && text}
        </NewAgreementRowActionArea>
      </div>
      {withBorder && <div className="m-new-agreement-row__border" />}
      {agreementChild && (
        <Collapsible open={!collapsed}>
          {React.cloneElement(agreementChild, {
            ...agreementChild.props,
            className: classnames(
              agreementChild.props.className,
              "m-new-agreement--nested"
            ),
          })}
        </Collapsible>
      )}
    </li>
  );
}

function isWithCheckbox<T>(
  props: T & (NewAgreementRowCheckboxProps | {})
): props is T & WithCheckboxProps {
  return "withCheckbox" in props && props.withCheckbox === true;
}

function isAgreementComponent(node: React.ReactNode): node is ReactElement {
  return (node as any)?.type?.tdsID === AGREEMENT_COMPONENT_ID;
}

export default NewAgreementRow;
