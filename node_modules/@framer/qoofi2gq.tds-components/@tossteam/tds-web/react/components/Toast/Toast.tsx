import cx from 'classnames';
import * as React from 'react';
import { cloneElement, HTMLAttributes, ReactElement, useMemo, useRef, useState } from 'react';
import { animated, useSpring } from 'react-spring';
import { colors } from '../../../../../@tossteam/colors';
import useResizeObserver from '../../hooks/useResizeObserver';
import getSafeAreaBottomSize from '../../utils/getSafeAreaBottomSize';
import { Icon } from '../Icon';
import Txt from '../Text';

interface Props extends Omit<HTMLAttributes<HTMLDivElement>, 'children'> {
  open: boolean;
  /**
   * FixedBottomCTA 보다 높이 토스트를 띄울때 사용합니다.
   * @default false
   */
  higherThanCTA?: boolean;
  icon?: string;
  text: string;
  button?: ReactElement;
  withoutAnimation?: boolean;
  onEntered?: () => void;
  onExited?: () => void;
}

// iOS에서 10만큼의 차이가 발생하여 토스트가 화면에 표시되는 문제가 있습니다. 이를 해결하기 위해 오프셋만큼 아래로 이동시킵니다.
const OFFSET = 10;

const bottomCTAHeight = 56;
const margin = 17;
const DEFAULT_SAFE_AREA_BOTTOM_SIZE = 20;
const DEFAULT_BOTTOM_SIZE = 24;

function Toast({
  open,
  icon,
  text,
  button,
  className,
  style,
  higherThanCTA = false,
  onEntered,
  onExited,
  withoutAnimation = false,
  ...rest
}: Props) {
  const ref = useRef<HTMLDivElement | null>(null);
  const [height, setHeight] = useState<number | undefined>(undefined);
  const bottomPosition = useMemo(() => {
    if (higherThanCTA) {
      return bottomCTAHeight + margin + (getSafeAreaBottomSize() || DEFAULT_SAFE_AREA_BOTTOM_SIZE);
    }

    return DEFAULT_BOTTOM_SIZE;
  }, [higherThanCTA]);

  const hiddenPosition = (height ?? 200) + bottomPosition + OFFSET;

  const spring = useSpring({
    progress: open ? 1 : 0,
    translateY: open ? -bottomPosition : hiddenPosition,
    config: { tension: 400, friction: 40, precision: 0.1 },
    delay: 0.1,
    immediate: withoutAnimation,
    onFrame: ({ progress }: { progress: number }) => {
      if (open && progress > 0.95) {
        onEntered?.();
      }

      if (!open && progress < 0.05) {
        onExited?.();
      }
    },
  });

  useResizeObserver(ref, ({ clientHeight }) => {
    if (clientHeight !== height) {
      setHeight(clientHeight);
    }
  });

  const toastBody = (
    <div className="toast__body">
      {icon !== undefined ? <Icon className="toast__icon" name={icon} /> : null}
      <Txt className="toast__text" typography="st10" color={colors.white} stringToJSX={true}>
        {text}
      </Txt>
      {button !== undefined
        ? cloneElement(button, {
            size: 'tiny',
          })
        : null}
    </div>
  );

  return (
    <>
      <animated.div
        ref={ref}
        className={cx('toast', className)}
        style={{
          ...style,
          position: 'absolute',
          display: spring.progress?.interpolate(v => (v < 0.05 ? 'none' : 'block')) ?? (open ? 'block' : 'none'),
          transform:
            spring.translateY?.interpolate(v => `translate(-50%, ${v}px)`) ??
            `translate(-50%, ${open ? -bottomPosition : hiddenPosition}px)`,
        }}
        {...rest}
      >
        {toastBody}
      </animated.div>
      {!withoutAnimation && height === undefined ? (
        <div
          ref={elem => {
            if (height !== undefined || elem == null) {
              return;
            }

            setHeight(elem.clientHeight);
          }}
          style={{
            position: 'absolute',
            top: '-9999px',
          }}
        >
          {toastBody}
        </div>
      ) : null}
    </>
  );
}

export default Toast;
