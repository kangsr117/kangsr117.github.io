import axios from 'axios';
import classnames from 'classnames';
import * as React from 'react';
import { forwardRef, HTMLAttributes, Ref, useMemo, useState } from 'react';
import { adaptive } from '../../../../../@tossteam/colors';

const iconFetchingRequest: Record<string, Promise<string>> = {};
const iconCache: Record<string, string> = {};

export interface Props extends HTMLAttributes<HTMLSpanElement> {
  /**
   * 아이콘의 이름을 지정합니다.
   */
  name: string;

  alt?: string;

  /**
   * 아이콘의 색상을 지정합니다.
   */
  color?: string;

  /**
   * 아이콘의 크기를 지정합니다.
   */
  size?: number | string;

  /**
   * 아이콘을 클릭했을 때 발생하는 이벤트입니다.
   */
  onClick?: (event: React.MouseEvent<HTMLSpanElement>) => void;
}

export function Icon(
  { name, alt, className, size, color, style, onClick, ...spanAttrs }: Props,
  ref: Ref<HTMLSpanElement>
) {
  const [innerHTML, setInnerHTML] = useState<string | undefined>(iconCache[name]);
  const [showFallback, setShowFallback] = useState(false);
  const adaptiveKey = useMemo(() => {
    return Object.entries(adaptive).find(([, variable]) => {
      return variable === color;
    })?.[0];
  }, [color]);

  React.useEffect(() => {
    if (typeof window === 'undefined' && typeof global !== 'undefined') {
      return;
    } else if (iconCache[name]) {
      setInnerHTML(iconCache[name]);
      return;
    }

    // async function cleanup (참고 : https://codesandbox.io/s/k0lm13kwxo - @gaearon)
    let ignore = false;

    async function setIcon() {
      if (iconFetchingRequest[name] === undefined) {
        iconFetchingRequest[name] = fetchIcon(name);
      }

      try {
        const data = await iconFetchingRequest[name];

        if (!ignore) {
          iconCache[name] = data;
          setInnerHTML(iconCache[name]);
        }
      } catch (err) {
        setShowFallback(true);
      }
    }

    setIcon();

    return () => {
      ignore = true;
    };
  }, [innerHTML, name]);

  return (
    <span
      className={classnames('m-icon', 'svg-icon-wrapper', className)}
      style={{
        width: size,
        height: size,
        ...style,
      }}
      onClick={onClick}
      ref={ref}
      {...spanAttrs}
    >
      <span
        className={classnames('m-icon__inner', 'svg-icon', {
          [`adaptive-${adaptiveKey}-text`]: adaptiveKey != null,
          [`svg-icon--hide`]: showFallback,
          'm-icon__inner--colored': color != null,
        })}
        style={{
          width: '100%',
          height: '100%',
          color,
        }}
        aria-label={alt}
        aria-hidden={innerHTML == null}
        role={alt == null ? 'presentation' : 'img'}
        dangerouslySetInnerHTML={
          innerHTML
            ? {
                __html: innerHTML,
              }
            : undefined
        }
      />
      <img
        className={classnames('svg-icon-fallback', {
          [`svg-icon-fallback--show`]: showFallback,
        })}
        alt={showFallback ? alt : undefined}
        role={alt == null || !showFallback ? 'presentation' : undefined}
        src={getIconUrl(name)}
      />
    </span>
  );
}

export default forwardRef(Icon);

Icon.displayName = 'Icon';

async function fetchIcon(name: string) {
  const response = await axios.get(getIconUrl(name));

  return response.data;
}

export function getIconUrl(name: string) {
  const prefixedName = name.startsWith('icn-') || name.startsWith('icon-') ? name : `icn-${name}`;
  return `https://static.toss.im/icons/svg/${prefixedName}.svg`;
}
