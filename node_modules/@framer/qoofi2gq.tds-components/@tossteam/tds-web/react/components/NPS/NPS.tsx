import classnames from 'classnames';
import * as React from 'react';

import generateID from '../../utils/generateID';
import NPSOption from './NPSOption';

interface ContextProps {
  name?: string;
}

export interface Props {
  /**
   * 컴포넌트의 root element(`div`)에 추가되는 className입니다.
   */
  className?: string;

  value?: number;

  onChange?: (score: number) => void;

  onClick?: React.EventHandler<React.MouseEvent<HTMLInputElement>>;
}

export const Context = React.createContext<ContextProps>({});

export default class NPS extends React.Component<Props> {
  public state: {
    uniqId?: string;
  } = {
    uniqId: undefined,
  };

  public componentDidMount() {
    this.setState({ uniqId: generateID('nps-') });
  }

  public render() {
    const { className, value, onClick } = this.props;
    return (
      <div className={classnames('nps', className)}>
        {[
          [0, 1, 2, 3, 4, 5],
          [6, 7, 8, 9, 10],
        ].map((scores, rowIndex) => (
          <div className="nps__row" key={rowIndex}>
            {scores.map(score => (
              <NPSOption
                key={score}
                name={this.state.uniqId}
                score={score}
                onClick={onClick}
                onChange={this.handleChange}
                checked={value !== undefined ? value === score : undefined}
              />
            ))}
          </div>
        ))}
      </div>
    );
  }

  private handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { onChange } = this.props;

    if (onChange === undefined) {
      return;
    }

    onChange(parseInt(event.target.value, 10));
  };
}
