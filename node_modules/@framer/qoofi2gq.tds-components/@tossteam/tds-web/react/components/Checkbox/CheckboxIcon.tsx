import * as React from "react";
import { memo, useRef } from "react";
import { animated, useSpring } from "react-spring";
import { colors } from "../../../../../@tossteam/colors";
import generateID from "../../utils/generateID";

interface Props {
  checked?: boolean;
  type: "primary" | "secondary";
  circleSize?: "big" | "small";
  onRest?: () => void;
}

export const CheckboxIcon = memo(
  ({ checked, type, circleSize, onRest }: Props) => {
    const id = useRef(generateID("checkbox-icon-"));
    const checkScale =
      circleSize === undefined ? 1 : circleSize === "small" ? 0.68 : 0.84;
    const size = circleSize === "big" ? 30 : 24;

    const spring = useSpring({
      width: checked ? 24 : 0,
      circleSize: checked ? size / 2 : 0,
      circleOpacity: checked ? 1 : 0,
      onRest,
    });

    return (
      <svg
        className="checkbox__icon"
        viewBox={`0 0 ${size} ${size}`}
        width={size}
        height={size}
      >
        <defs>
          <clipPath id={id.current}>
            <animated.rect width={spring.width} height="24" x="0" y="0" />
          </clipPath>
        </defs>
        {circleSize !== undefined ? (
          <animated.circle
            cx={size / 2}
            cy={size / 2}
            r={spring.circleSize}
            fill={colors.blue400}
            fillOpacity={spring.circleOpacity}
          />
        ) : null}
        {circleSize !== undefined ? (
          circleSize === "big" ? (
            <BigGreyCircle />
          ) : (
            <SmallGreyCircle />
          )
        ) : null}
        {type === "primary" ? (
          <CheckIconBase
            origin={size / 2}
            color={colors.grey500}
            scale={checkScale}
            opacity={0.24}
          />
        ) : null}
        <g clipPath={`url(#${id.current})`}>
          <CheckIconBase
            origin={size / 2}
            color={circleSize === undefined ? colors.blue400 : colors.white}
            scale={checkScale}
          />
        </g>
      </svg>
    );
  }
);

export default CheckboxIcon;

const CheckIconBase = memo(
  ({
    color,
    origin = 12,
    scale = 1,
    opacity = 1,
  }: {
    color: string;
    origin?: number;
    scale?: number;
    opacity?: number;
  }) => {
    return (
      <g
        transform={`translate(${origin}, ${origin}) scale(${scale})`}
        opacity={opacity}
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          fillOpacity="0"
          stroke={color}
          strokeWidth="2.5"
          d="M-9.188,0.719 C-9.188,0.719 -3.469,6.438 -3.469,6.438 C-3.469,6.438 8.719,-5.75 8.719,-5.75"
        />
      </g>
    );
  }
);

const SmallGreyCircle = memo(() => {
  return (
    <g transform="matrix(1,0,0,1,7.902,8.84)" opacity="0.24">
      <g opacity="1" transform="matrix(1,0,0,1,4.098,3.16)">
        <path
          fillOpacity="0"
          stroke={colors.grey500}
          strokeWidth="1"
          d=" M0,-11.5 C6.34685,-11.5 11.5,-6.34685 11.5,0 C11.5,6.34685 6.34685,11.5 0,11.5 C-6.34685,11.5 -11.5,6.34685 -11.5,0 C-11.5,-6.34685 -6.34685,-11.5 0,-11.5z"
        ></path>
      </g>
    </g>
  );
});

const BigGreyCircle = memo(() => {
  return (
    <g transform="scale(1) translate(10.9,11.84)" opacity="0.24">
      <g opacity="1" transform="matrix(1,0,0,1,4.098,3.16)">
        <path
          fillOpacity="0"
          stroke={colors.grey500}
          strokeWidth="1"
          d=" M0,-14.5 C8.00255,-14.5 14.5,-8.00255 14.5,0 C14.5,8.00255 8.00255,14.5 0,14.5 C-8.00255,14.5 -14.5,8.00255 -14.5,0 C-14.5,-8.00255 -8.00255,-14.5 0,-14.5z"
        ></path>
      </g>
    </g>
  );
});
