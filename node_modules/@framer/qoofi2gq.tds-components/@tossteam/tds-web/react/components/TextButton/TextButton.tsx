import * as React from "react";
import cx from "classnames";
import { adaptive, colors } from "../../../../../@tossteam/colors";

import { Icon } from "../Icon";

interface BaseProps {
  /**
   * @deprecated 'size' Property는 Deprecated 되었습니다.
   */
  size?: "large" | "medium" | "small";
  /**
   * @deprecated 'dark' 타입은 Deprecated 되었습니다. 'grey' 타입을 사용해주세요.
   */
  type?: "primary" | "dark" | "grey" | "underline";
  htmlType?: React.ButtonHTMLAttributes<HTMLButtonElement>["type"];
  withArrow?: boolean;
}

export type Props<
  Element extends keyof JSX.IntrinsicElements = "button"
> = BaseProps & {
  as?: Element;
} & Omit<JSX.IntrinsicElements[Element], keyof BaseProps | "as">;

export function TextButton<T extends keyof JSX.IntrinsicElements = "button">(
  props: Props<T>
) {
  const {
    type = "grey",
    size,
    className,
    children,
    htmlType = "button",
    withArrow = false,
    as: Component = "button",
    ...rest
  } = props as Props;

  React.useEffect(() => {
    if (process?.env?.NODE_ENV !== "development") {
      return;
    }

    if (size !== undefined) {
      // eslint-disable-next-line no-console
      console.warn(`'size' Property는 Deprecated 되었습니다.`);
    }
  }, [size]);

  const normalType = type === "dark" ? "grey" : type;

  return (
    <Component
      className={cx(
        `text-button`,
        "typography-t5",
        {
          [`text-button--type-${normalType}`]: normalType,
          [`text-button--size-${size}`]: size,
        },
        className
      )}
      type={htmlType}
      {...rest}
    >
      {children}
      {withArrow && type !== "underline" ? (
        <Icon
          color={type === "grey" ? adaptive.grey600 : colors.blue400}
          className="text-button__indicator font-size--16"
          name="arrow-rightwards"
        />
      ) : null}
    </Component>
  );
}

export default TextButton;
