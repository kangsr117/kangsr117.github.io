import { act, renderHook } from '@testing-library/react-hooks';
import { addDays, isSameDay, subDays } from 'date-fns';

import cloneDate from '../../../utils/cloneDate';
import useDateRangePick from './useDateRangePick';

describe('Calendar.hooks.useRangePickDates', () => {
  test('아무 날짜도 선택되어 있지 않은 상태에서 날짜를 선택하면 시작날짜가 선택된다.', () => {
    const { result } = renderHook(() => useDateRangePick(undefined, undefined));
    const selectedDate = new Date(2019, 6, 5);

    act(() => {
      const handleDayClick = result.current[2];
      handleDayClick(selectedDate);
    });

    const [startDate] = result.current;

    expect(startDate).toBeDefined();
    expect(isSameDay(startDate!, selectedDate)).toBe(true);
  });

  describe('시작날짜 선택됨 & 끝날짜 선택안됨', () => {
    test('시작날짜보다 이후 날짜를 선택하면 끝 날짜로 선택된다.', () => {
      const initialStartDate = new Date(2019, 6, 10);
      const { result } = renderHook(() => useDateRangePick(initialStartDate, undefined));
      const selectedDate = addDays(initialStartDate, 6);

      act(() => {
        const handleDayClick = result.current[2];
        handleDayClick(selectedDate);
      });

      const [startDate, endDate] = result.current;

      expect(isSameDay(startDate!, initialStartDate)).toBe(true);
      expect(isSameDay(endDate!, selectedDate)).toBe(true);
    });

    test('시작날짜를 포함한 이전 날짜를 선택하면 시작날짜가 선택한 날짜로 변경된다.', () => {
      const initialStartDate = new Date(2019, 6, 10);
      const { result } = renderHook(() => useDateRangePick(initialStartDate, undefined));

      let selectedDate: Date;

      // 시작날짜와 똑같은 날짜를 선택
      selectedDate = cloneDate(initialStartDate);

      act(() => {
        const handleDayClick = result.current[2];
        handleDayClick(selectedDate);
      });

      expect(isSameDay(result.current[0]!, selectedDate)).toBe(true);
      expect(result.current[1]).toBeUndefined();

      // 시작날짜 이전 날짜를 선택
      selectedDate = subDays(initialStartDate, 3);

      act(() => {
        const handleDayClick = result.current[2];
        handleDayClick(selectedDate);
      });

      expect(isSameDay(result.current[0]!, selectedDate)).toBe(true);
      expect(result.current[1]).toBeUndefined();
    });
  });

  test('시작날짜와 끝날짜가 모두 선택된 상태에서 날짜를 선택하면 해당 날짜가 시작날짜가 되고 끝날짜는 없어진다.', () => {
    const initialStartDate = new Date(2019, 6, 10);
    const initialEndDate = addDays(initialStartDate, 10);
    const { result } = renderHook(() => useDateRangePick(initialStartDate, initialEndDate));
    const selectedDate = new Date(2019, 6, 3);

    act(() => {
      const handleDayClick = result.current[2];
      handleDayClick(selectedDate);
    });

    const [startDate, endDate] = result.current;

    expect(isSameDay(startDate!, selectedDate)).toBe(true);
    expect(endDate).toBeUndefined();
  });

  test("날짜를 변경했을 때, 'onDatesChange' 콜백으로 변경된 날짜값을 전달한다.", () => {
    const onDatesChange = jest.fn();
    const { result } = renderHook(() => useDateRangePick(undefined, undefined, onDatesChange));
    const startDate = new Date(2019, 7, 15);
    const endDate = new Date(2019, 7, 21);

    act(() => {
      result.current[2](startDate);
    });

    expect(onDatesChange).toHaveBeenCalledWith([startDate, undefined]);

    act(() => {
      result.current[2](endDate);
    });

    expect(onDatesChange).toHaveBeenCalledWith([startDate, endDate]);
  });

  test('"allowSameDateSelect" 값이 참인 경우 같은 날짜를 선택할 수 있다.', () => {
    const { result } = renderHook(() => useDateRangePick(undefined, undefined, () => {}, true));

    const selectedDate = new Date(2019, 5, 4);

    act(() => {
      const [, , handleDayClick] = result.current;
      handleDayClick(cloneDate(selectedDate));
    });

    act(() => {
      const [, , handleDayClick] = result.current;
      handleDayClick(cloneDate(selectedDate));
    });

    const [startDate, endDate] = result.current;

    expect(isSameDay(startDate!, selectedDate)).toBe(true);
    expect(isSameDay(endDate!, selectedDate)).toBe(true);
  });
});
