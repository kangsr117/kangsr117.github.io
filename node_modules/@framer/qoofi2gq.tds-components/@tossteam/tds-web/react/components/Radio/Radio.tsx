import classnames from "classnames";
import * as React from "react";
import {
  ChangeEvent,
  Children,
  cloneElement,
  ComponentProps,
  InputHTMLAttributes,
  ReactElement,
  useCallback,
  useEffect,
  useRef,
  useState,
} from "react";
import { animated, useSpring } from "react-spring";
import generateID from "../../utils/generateID";
import { ResizedMask } from "../ResizedMask";
import { RadioOption } from "./RadioOption";

type RadioOptionElement = ReactElement<ComponentProps<typeof RadioOption>>;

const radioRadius = 12;

export interface Props extends InputHTMLAttributes<HTMLInputElement> {
  children: RadioOptionElement | RadioOptionElement[];
}

export function Radio({
  className,
  children,
  disabled,
  value,
  onChange,
}: Props) {
  const id = useRef(generateID("radio-"));
  const isOnFirstAnimate = useRef(true);

  const [innerValue, setInnerValue] = useState(value);

  useEffect(() => {
    setInnerValue(value);
  }, [value]);

  const handleChange = useCallback(
    (event: ChangeEvent<HTMLInputElement>) => {
      setInnerValue(event.target.value);
      onChange?.(event);
    },
    [onChange]
  );

  const checkedIndex = Children.map(children, (child) => {
    return child.props;
  }).findIndex((p) => p.value === innerValue);

  useEffect(() => {
    if (checkedIndex !== -1) {
      isOnFirstAnimate.current = false;
    }
  }, [checkedIndex]);

  const spring = useSpring({
    opacity: checkedIndex === -1 ? 0 : 1,
    translateX: checkedIndex === -1 ? 0 : checkedIndex * 100,
    config: {
      tension: 300,
      friction: 28,
      precision: 0.01,
    },
  });

  return (
    <ResizedMask radius={radioRadius}>
      <div className={classnames("radio", "form-control", className)}>
        <ResizedMask radius={radioRadius}>
          <animated.div
            className="radio__indicator"
            style={{
              width: `${100 / Children.count(children)}%`,
              transform: isOnFirstAnimate.current
                ? `translateX(${checkedIndex * 100}%)`
                : spring.translateX?.interpolate((v) => `translateX(${v}%)`),
              opacity: spring.opacity,
            }}
          />
        </ResizedMask>
        {Children.map(children, (child) => {
          return cloneElement(child, {
            name: id.current,
            disabled,
            checked:
              value !== undefined ? value === child.props.value : undefined,
            onChange: handleChange,
          });
        })}
      </div>
    </ResizedMask>
  );
}

Radio.Option = RadioOption;

export default Radio;
