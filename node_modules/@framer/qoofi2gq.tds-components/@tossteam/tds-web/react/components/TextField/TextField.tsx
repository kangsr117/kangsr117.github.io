import classnames from "classnames";
import * as React from "react";
import {
  forwardRef,
  InputHTMLAttributes,
  useContext,
  useRef,
  useState,
} from "react";
import useCombinedRefs from "../../utils/hooks/useCombinedRefs";
import { Context as FormGroupContext } from "../Form/FormGroup";
import { Icon } from "../Icon";
import { ResizedMask } from "../ResizedMask";

export interface Props extends InputHTMLAttributes<HTMLInputElement> {
  /**
   * 에러 상태를 표시합니다.
   */
  hasError?: boolean;

  /**
   * 좌측에 표시될 아이콘의 이름을 지정합니다.
   */
  leftIcon?: string;

  /**
   * 우측에 표시될 접미사를 지정합니다.
   */
  suffix?: string;

  /**
   * 텍스트 마스킹 여부를 지정합니다.
   */
  secret?: boolean;
}

const TextField = forwardRef<HTMLInputElement, Props>((props, forwardedRef) => {
  const formGroupContext = useContext(FormGroupContext);
  const {
    className,
    disabled,
    hasError,
    value,
    leftIcon,
    suffix,
    secret,
    onFocus,
    onBlur,
    ...inputAttrs
  } = props;
  const inputRef = useRef<HTMLInputElement>(null);
  const refCallback = useCombinedRefs<HTMLInputElement>(inputRef, forwardedRef);

  const [isFocused, setIsFocused] = useState(false);

  return (
    <ResizedMask radius={14}>
      <div
        className={classnames(
          "text-field",
          { "form-control": formGroupContext.isInForm },
          { "text-field--disabled": disabled },
          { "text-field--focused": isFocused },
          { "text-field--error": hasError ?? formGroupContext.hasError },
          { "text-field--secret": secret },
          "font-size--16",
          className
        )}
      >
        {leftIcon !== undefined ? (
          <Icon className="text-field__left-icon" name={leftIcon} size={24} />
        ) : null}
        <input
          ref={refCallback}
          className="text-field__input"
          disabled={disabled}
          onFocus={(event) => {
            setIsFocused(true);
            onFocus?.(event);
          }}
          onBlur={(event) => {
            setIsFocused(false);
            onBlur?.(event);
          }}
          value={value}
          {...inputAttrs}
        />
        {suffix !== undefined ? (
          <span className="text-field__suffix">{suffix}</span>
        ) : null}
      </div>
    </ResizedMask>
  );
});

export default TextField;
