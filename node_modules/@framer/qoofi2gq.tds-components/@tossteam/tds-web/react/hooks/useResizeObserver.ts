import { debounce } from 'lodash-es';
import { RefObject, useEffect, useRef } from 'react';
import ResizeObserver from 'resize-observer-polyfill';

export default function useResizeObserver<T extends Element>(ref: RefObject<T>, onResize: (target: Element) => void) {
  const savedCallback = useRef(
    debounce(onResize, 100, {
      trailing: true,
    })
  );
  const observer = useRef<ResizeObserver | null>(null);

  useEffect(() => {
    const callback = savedCallback.current;

    return () => {
      callback.flush();
    };
  }, []);

  useEffect(() => {
    if (ref.current == null) {
      return;
    }

    observer.current = new ResizeObserver(([{ target }]) => {
      savedCallback.current?.(target);
    });

    observer.current.observe(ref.current);

    savedCallback.current?.(ref.current);

    return () => {
      observer.current?.disconnect();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [ref.current]);
}
