import colors from './colors';
import adaptiveDictionary from './adaptiveDictionary';
import { tdsDictionary } from './tds';

const colorEntries = Object.entries(colors);
const adaptiveEntries = Object.entries(adaptiveDictionary);
const tdsEntries = Object.entries(tdsDictionary);

function wrapBody(body: string, selector: string) {
  return `
    ${selector} {
      ${body}
    }
  `;
}

interface BuildOptions {
  /**
   * @description selector로 감쌀 지 여부, 넘기지 않는다면 selector로 감싸지 않음. 넘긴다면 넘긴 string을 selector로 감싼다.
   */
  wrap?: string;
}

function generateCSS(css: string) {
  return ({ wrap }: BuildOptions = {}) => {
    let result = css;

    if (wrap != null) {
      result = wrapBody(result, wrap);
    }

    return result;
  };
}

export const generateColorsCSS = generateCSS(colorEntries.map(([key, value]) => `--${key}: ${value};`).join('\n'));

export const generateLightCSS = generateCSS(
  adaptiveEntries
    .map(([key, value]) => {
      const [lightColor] = value;
      return `--${toAdaptiveVariable(key)}: ${lightColor};`;
    })
    .join('\n')
);

export const generateDarkCSS = generateCSS(
  adaptiveEntries
    .map(([key, value]) => {
      const [, darkColor] = value;
      return `--${toAdaptiveVariable(key)}: ${darkColor};`;
    })
    .join('\n')
);

export const generateLightTDSVariablesCSS = generateCSS(
  tdsEntries
    .map(([key, value]) => {
      const [lightColor] = value;
      return `--${key}: ${lightColor};`;
    })
    .join('\n')
);

export const generateDarkTDSVariablesCSS = generateCSS(
  tdsEntries
    .map(([key, value]) => {
      const [, darkColor] = value;
      return `--${key}: ${darkColor};`;
    })
    .join('\n')
);

function toAdaptiveVariable(key: string) {
  return `adaptive${key.charAt(0).toUpperCase()}${key.slice(1)}`;
}
