import colors from "./colors";
import { rgba } from "polished";

// NOTE: polished를 번들에 포함시키지 않기 위해, babel-plugin-polished를 쓰고 있습니다.
// babel-plugin-polished는 컴파일 타임에 polished를 사용하는 부분을 미리 평가해서 컴파일 결과물에 포함시키는 플러그인입니다.
// 하지만 babel-plugin-polished의 한계로, 변수를 넘기면 polished가 컴파일 타임에 평가되지 않습니다.
// 따라서 변수를 사용하지 않고, 직접 string literal을 넘겨 babel-plugin-polished가 잘 동작하도록 만듭니다.
const polishedValues = {
  toastBackground: rgba("#191f28", 0.54), // rgba(colors.grey900, 0.54)
  transparentBackground: rgba("#ffffff", 0), // rgba(colors.white, 0)
  transaprentDarkBackground: rgba("#17171c", 0), // rgba(colors.darkBackground, 0)
  transparentDarkLayeredBackground: rgba("#202027", 0), // rgba(colors.inverseGrey50, 0)

  primaryWeakButtonPressedBackgroundLight: rgba("#3182f6", 0.26), // rgba(colors.blue500, 0.26)
  dangerWeakButtonPressedBackgroundLight: rgba("#f44336", 0.26), // rgba(colors.red500, 0.26)
  darkWeakButtonPressedBackgroundLight: rgba("#4e5968", 0.26), // rgba(colors.grey700, 0.26)
  lightWeakButtonPressedBackgroundLight: rgba("#ffffff", 0.26), // rgba(colors.white, 0.26)

  blueBadgeBackgroundLight: rgba("#3182f6", 0.16), // rgba(colors.blue500, 0.16)
  blueBadgeBackgroundDark: rgba("#4593fc", 0.16), // rgba(colors.blue400, 0.16)
  tealBadgeBackgroundLight: rgba("#00818a", 0.16), // rgba(colors.teal600, 0.16)
  tealBadgeBackgroundDark: rgba("#269da6", 0.16), // rgba(colors.teal400, 0.16)
  greenBadgeBackgroundLight: rgba("#009959", 0.16), // rgba(colors.green600, 0.16)
  greenBadgeBackgroundDark: rgba("#05c072", 0.16), // rgba(colors.green400, 0.16)
  redBadgeBackgroundLight: rgba("#f44336", 0.16), // rgba(colors.red500, 0.16)
  redBadgeBackgroundDark: rgba("#ef5350", 0.16), // rgba(colors.red400, 0.16)
  yellowBadgeBackgroundLight: rgba("#ffb331", 0.16), // rgba(colors.yellow600, 0.16)
  yellowBadgeBackgroundDark: rgba("#ffd158", 0.16), // rgba(colors.yellow400, 0.16)
  elephantBadgeBackgroundLight: rgba("#4e5968", 0.16), // rgba(colors.grey700, 0.16)
  elephantBadgeBackgroundDark: rgba("#c3c3c6", 0.16), // rgba(colors.inverseGrey700, 0.16)

  listRowDisabledBackgroundDark: rgba("#17171c", 0.7), // rgba(colors.darkBackground, 0.7)
};

// tds-web 전용 variables 입니다.
// 모든 변수가 t로 시작하도록 prefix를 넣습니다.
export const tds = {
  tHairlineBackground: "var(--tHairlineBackground)",
  tGradientToTop: "var(--tGradientToTop)",
  tLayeredGradientToTop: "var(--tLayeredGradientToTop)",
  tGradientToRight: "var(--tGradientToRight)",
  tGradientToLeft: "var(--tGradientToLeft)",
  tGradientToBottom: "var(--tGradientToBottom)",
  tRadioCheckedFontColor: "var(--tRadioCheckedFontColor)",
  tToastBackground: "var(--tToastBackground)",

  tDarkFillButtonBackground: "var(--tDarkFillButtonBackground)",

  tPrimaryWeakButtonBackground: "var(--tPrimaryWeakButtonBackground)",
  tDangerWeakButtonBackground: "var(--tDangerWeakButtonBackground)",
  tDarkWeakButtonBackground: "var(--tDarkWeakButtonBackground)",
  tLightWeakButtonBackground: "var(--tLightWeakButtonBackground)",

  tButtonPressedAfterBackground: "var(--tButtonPressedAfterBackground)",

  tPrimaryWeakButtonPressedBackground:
    "var(--tPrimaryWeakButtonPressedBackground)",
  tDangerWeakButtonPressedBackground:
    "var(--tDangerWeakButtonPressedBackground)",
  tDarkWeakButtonPressedBackground: "var(--tDarkWeakButtonPressedBackground)",
  tLightWeakButtonPressedBackground: "var(--tLightWeakButtonPressedBackground)",

  tBlueBadgeColor: "var(--tBlueBadgeColor)",
  tBlueBadgeBackground: "var(--tBlueBadgeBackground)",
  tTealBadgeColor: "var(--tTealBadgeColor)",
  tTealBadgeBackground: "var(--tTealBadgeBackground)",
  tGreenBadgeColor: "var(--tGreenBadgeColor)",
  tGreenBadgeBackground: "var(--tGreenBadgeBackground)",
  tRedBadgeColor: "var(--tRedBadgeColor)",
  tRedBadgeBackground: "var(--tRedBadgeBackground)",
  tYellowBadgeColor: "var(--tYellowBadgeColor)",
  tYellowBadgeBackground: "var(--tYellowBadgeBackground)",
  tElephantBadgeColor: "var(--tElephantBadgeColor)",
  tElephantBadgeBackground: "var(--tElephantBadgeBackground)",

  tSwiperBulletBackground: "var(--tSwiperBulletBackground)",
  tListRowDisabledBackground: "var(--tListRowDisabledBackground)",
};

export const tdsDictionary: Record<keyof typeof tds, [string, string]> = {
  tHairlineBackground: [
    `repeat-x url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='1' height='1'><rect fill='${colors.greyOpacity300}' x='0' y='0' width='1' height='0.5'/></svg>")`,
    `repeat-x url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='1' height='1'><rect fill='${colors.whiteOpacity300}' x='0' y='0' width='1' height='0.5'/></svg>")`,
  ],
  tGradientToTop: [
    getLinearGradient(colors.background, polishedValues.transparentBackground),
    getLinearGradient(
      colors.darkBackground,
      polishedValues.transaprentDarkBackground
    ),
  ],
  tLayeredGradientToTop: [
    getLinearGradient(
      colors.layeredBackground,
      polishedValues.transparentBackground
    ),
    getLinearGradient(
      colors.darkLayeredBackground,
      polishedValues.transparentDarkLayeredBackground
    ),
  ],
  tGradientToRight: [
    getLinearGradient(
      colors.background,
      polishedValues.transparentBackground,
      "right"
    ),
    getLinearGradient(
      colors.darkBackground,
      polishedValues.transaprentDarkBackground,
      "right"
    ),
  ],
  tGradientToLeft: [
    getLinearGradient(
      colors.background,
      polishedValues.transparentBackground,
      "left"
    ),
    getLinearGradient(
      colors.darkBackground,
      polishedValues.transaprentDarkBackground,
      "left"
    ),
  ],
  tRadioCheckedFontColor: [colors.blue600, colors.blue500],
  tGradientToBottom: [
    getLinearGradient(
      colors.background,
      polishedValues.transparentBackground,
      "bottom"
    ),
    getLinearGradient(
      colors.darkBackground,
      polishedValues.transaprentDarkBackground,
      "bottom"
    ),
  ],
  tToastBackground: [polishedValues.toastBackground, colors.whiteOpacity100],

  tDarkFillButtonBackground: [colors.grey700, colors.inverseGrey300],

  tPrimaryWeakButtonBackground: [colors.blue50, colors.whiteOpacity100],
  tDangerWeakButtonBackground: [colors.red50, colors.whiteOpacity100],
  tDarkWeakButtonBackground: [colors.grey100, colors.whiteOpacity100],
  tLightWeakButtonBackground: [colors.whiteOpacity200, colors.whiteOpacity100],

  tButtonPressedAfterBackground: ["transparent", "rgba(0, 0, 0, 0.26)"],

  tPrimaryWeakButtonPressedBackground: [
    polishedValues.primaryWeakButtonPressedBackgroundLight,
    colors.whiteOpacity100,
  ],
  tDangerWeakButtonPressedBackground: [
    polishedValues.dangerWeakButtonPressedBackgroundLight,
    colors.whiteOpacity100,
  ],
  tDarkWeakButtonPressedBackground: [
    polishedValues.darkWeakButtonPressedBackgroundLight,
    colors.whiteOpacity100,
  ],
  tLightWeakButtonPressedBackground: [
    polishedValues.lightWeakButtonPressedBackgroundLight,
    colors.whiteOpacity100,
  ],

  tBlueBadgeColor: [colors.blue700, colors.blue400],
  tBlueBadgeBackground: [
    polishedValues.blueBadgeBackgroundLight,
    polishedValues.blueBadgeBackgroundDark,
  ],
  tTealBadgeColor: [colors.teal700, colors.teal400],
  tTealBadgeBackground: [
    polishedValues.tealBadgeBackgroundLight,
    polishedValues.tealBadgeBackgroundDark,
  ],
  tGreenBadgeColor: [colors.green700, colors.green400],
  tGreenBadgeBackground: [
    polishedValues.greenBadgeBackgroundLight,
    polishedValues.greenBadgeBackgroundDark,
  ],
  tRedBadgeColor: [colors.red700, colors.red400],
  tRedBadgeBackground: [
    polishedValues.redBadgeBackgroundLight,
    polishedValues.redBadgeBackgroundDark,
  ],
  tYellowBadgeColor: [colors.yellow900, colors.yellow700],
  tYellowBadgeBackground: [
    polishedValues.yellowBadgeBackgroundLight,
    polishedValues.yellowBadgeBackgroundDark,
  ],
  tElephantBadgeColor: [colors.grey700, colors.inverseGrey700],
  tElephantBadgeBackground: [
    polishedValues.elephantBadgeBackgroundLight,
    polishedValues.elephantBadgeBackgroundDark,
  ],

  tSwiperBulletBackground: [colors.whiteOpacity400, colors.greyOpacity400],
  tListRowDisabledBackground: [
    colors.whiteOpacity700,
    polishedValues.listRowDisabledBackgroundDark,
  ],
};

export default tds;

function getLinearGradient(fromColor: string, toColor: string, to = "top") {
  return `linear-gradient(to ${to}, ${fromColor}, ${toColor})`;
}
